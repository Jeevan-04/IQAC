from pymongo import MongoClient
from bson import ObjectId
import datetime
import hashlib
import secrets
import re
from nicegui import app, ui
import urllib.parse
import pandas as pd
import io
import base64

# Beautiful Modern Design System
def add_beautiful_global_styles():
    """Add simple, clean styling to the application"""
    pass  # Temporarily disabled to fix syntax issues

# Color utility functions (moved to module level for reuse)
import re
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
def rgbstr_to_rgb(rgbstr):
    nums = re.findall(r"[\d\.]+", rgbstr)
    return tuple(int(float(nums[i])) for i in range(3))
def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb
def lighten(rgb, percent):
    return tuple(min(255, int(c + (255-c)*percent)) for c in rgb)

# Color utility functions (moved to module level for reuse)
import re
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
def rgbstr_to_rgb(rgbstr):
    nums = re.findall(r"[\d\.]+", rgbstr)
    return tuple(int(float(nums[i])) for i in range(3))
def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb
def lighten(rgb, percent):
    return tuple(min(255, int(c + (255-c)*percent)) for c in rgb)
# ...existing code...

# --- Add School Form ---
@ui.page('/institution_admin/{inst_id}/add_school')
def add_school_page(inst_id: str):
    from bson import ObjectId
    from nicegui import app
    
    # </style>
    # """)
    
    .stats-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--primary-gradient);
    }
    
    .stats-number {
        font-family: var(--font-secondary);
        font-size: 2.5rem;
        font-weight: 700;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        line-height: 1;
        margin-bottom: var(--spacing-sm);
    }
    
    .stats-label {
        color: rgba(44, 62, 80, 0.7);
        font-weight: 500;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.1em;
    }
    
    /* Beautiful Animations */
    @keyframes fadeInUp {
        from {
            #             opacity: 0;
            #             transform: translateY(30px);
        # }
        to {
            #             opacity: 1;
            #             transform: translateY(0);
        # }
    }
    
    @keyframes slideInRight {
        from {
            #             opacity: 0;
            #             transform: translateX(30px);
        # }
        to {
            #             opacity: 1;
            #             transform: translateX(0);
        # }
    }
    
    .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out;
    }
    
    .animate-slide-in-right {
        animation: slideInRight 0.6s ease-out;
    }
    
    /* Beautiful Loading States */
    .loading-shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
    }
    
    @keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }
    
    /* Beautiful Scrollbars */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--border-radius-sm);
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--primary-gradient);
        border-radius: var(--border-radius-sm);
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #5a6fd8 0%, #6b5b95 100%);
    }
    
    /* Beautiful Selection */
    ::selection {
        background: rgba(102, 126, 234, 0.3);
        color: #2c3e50;
    }
    
    /* Beautiful Focus States */
    *:focus {
        outline: 2px solid rgba(102, 126, 234, 0.3);
        outline-offset: 2px;
    }
    
    /* Beautiful Responsive Design */
    @media (max-width: 768px) {
        .beautiful-sidebar {
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }
        
        .beautiful-sidebar.open {
            transform: translateX(0);
        }
        
        .main-content {
# Color utility functions (moved to module level for reuse)
import re
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
def rgbstr_to_rgb(rgbstr):
    nums = re.findall(r"[\d\.]+", rgbstr)
    return tuple(int(float(nums[i])) for i in range(3))
def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb
def lighten(rgb, percent):
    return tuple(min(255, int(c + (255-c)*percent)) for c in rgb)
# ...existing code...

# --- Add School Form ---
@ui.page('/institution_admin/{inst_id}/add_school')
def add_school_page(inst_id: str):
    from bson import ObjectId
    from nicegui import app
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    # Get academic year from URL parameters first, then fallback to session
    try:
        from nicegui import context
        query_params = context.get().request.query_params
        year_id_from_url = query_params.get('year_id','')
    except:
        year_id_from_url = ''
    
    # Use URL parameter if available, otherwise use session storage
    selected_academic_year_id = year_id_from_url or app.storage.user.get('selected_academic_year_id')
    
    # Update session storage if we got year from URL
    if year_id_from_url:
        app.storage.user['selected_academic_year_id'] = year_id_from_url
    
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    main_color = inst.get('theme_color', '#1976d2')
    
    # Modal overlay effect and centered form
    with ui.row().style('position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1000; align-items: center; justify-content: center; backdrop-filter: blur(8px); background: rgba(0,0,0,0.18);'):
        with ui.card().style(f'align-items: center; padding: 2.5rem 2.5rem 2rem 2.5rem; background: #fff; border-radius: 18px; box-shadow: 0 4px 32px rgba(0,0,0,0.18); min-width: 400px;'):
            ui.label('Add School').style(f'font-size: 1.7rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
            
            # Show current academic year selection status
            if selected_academic_year_id:
                try:
                    year_doc = academic_years_col.find_one({'_id': ObjectId(selected_academic_year_id)})
                    year_name = year_doc.get('name', 'Unknown') if year_doc else 'Unknown'
                    ui.label(f'Academic Year: {year_name}').style(f'font-size: 0.9rem; color: {main_color}; margin-bottom: 1rem; font-weight: bold;')
                except:
                    ui.label('⚠️ Invalid academic year ID').style('font-size: 0.9rem; color: #c00; margin-bottom: 1rem; font-weight: bold;')
                    selected_academic_year_id = None
            else:
                ui.label('⚠️ No academic year selected').style('font-size: 0.9rem; color: #c00; margin-bottom: 1rem; font-weight: bold;')
                ui.label('Please go back to the hierarchy page and select an academic year first.').style('font-size: 0.8rem; color: #666; margin-bottom: 1rem;')
            
            school_name = ui.input('School Name').style('width: 350px; margin-bottom: 1.5rem;')
            def submit_school():
                if not school_name.value:
                    ui.notify('School name is required', color='negative')
                    return
                if not selected_academic_year_id:
                    ui.notify('Please select an academic year first from the hierarchy page', color='negative')
                    return
                result = create_school(school_name.value, inst_id, inst.get('created_by','admin'), selected_academic_year_id)
                ui.notify('School added!', color='positive')
                ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
            ui.button('Add School', on_click=submit_school).style(f'background: {main_color}; color: #fff; width: 350px; margin-top: 1rem; font-size: 1.1rem;')
            ui.button('Cancel', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')).style(f'background: #6c757d; color: #fff; width: 350px; margin-top: 0.5rem; font-size: 1.1rem;')

# --- Add Program Form ---
@ui.page('/institution_admin/{inst_id}/add_program')
def add_program_page(inst_id: str):
    from nicegui import app
    from bson import ObjectId
    from starlette.requests import Request
    import urllib.parse
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    # Get query parameters from the current request
    school_id = ''
    year_id_from_url = ''
    
    try:
        from nicegui import context
        request = context.request
        query_params = request.query_params if hasattr(request, 'query_params') else {}
        school_id = query_params.get('school_id', '') if query_params else ''
        year_id_from_url = query_params.get('year_id', '') if query_params else ''
        
        # Debug logging
        print(f"Debug - URL Parameters (method 1):")
        print(f"  Request object: {type(request)}")
        print(f"  Query params: {dict(query_params) if query_params else 'None'}")
        print(f"  school_id extracted: '{school_id}'")
        print(f"  year_id_from_url extracted: '{year_id_from_url}'")
        
    except Exception as e:
        print(f"Method 1 failed: {e}")
        try:
            # Alternative method using app.storage or URL parsing
            from nicegui import app
            from urllib.parse import urlparse, parse_qs
            
            # Try to get URL from somewhere else
            print("Trying method 2 - checking app context...")
            
            # For now, let's use a fallback - store parameters in session when navigating
            # This is a workaround until we fix the context issue
            stored_params = app.storage.user.get('temp_nav_params', {}) if hasattr(app.storage, 'user') else {}
            if stored_params:
                school_id = stored_params.get('school_id', '')
                year_id_from_url = stored_params.get('year_id', '')
                print(f"Debug - Using stored params: school_id='{school_id}', year_id='{year_id_from_url}'")
                
                # Clear the temp params immediately after use
                if school_id:
                    del app.storage.user['temp_nav_params']
                    print(f"Debug - Cleared temp_nav_params after extraction")
            #             else:
                print(f"Debug - No stored params found in session")
                
        except Exception as e2:
            print(f"Method 2 also failed: {e2}")
            school_id = ''
            year_id_from_url = ''
    
    print(f"Debug - FINAL RESULT: school_id='{school_id}', year_id='{year_id_from_url}'")
    
    # Use URL parameter if available, otherwise use session storage
    selected_academic_year_id = year_id_from_url or app.storage.user.get('selected_academic_year_id')
    
    # Update session storage if we got year from URL
    if year_id_from_url:
        app.storage.user['selected_academic_year_id'] = year_id_from_url
    
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    main_color = inst.get('theme_color', '#1976d2')
    
            def update_code_preview():
                if program_name.value and selected_academic_year_id:
                    try:
                        year_doc = academic_years_col.find_one({'_id': ObjectId(selected_academic_year_id)})
                        year_name = year_doc.get('name', '') if year_doc else ''
                        type_short = program_type.value.split(' ')[0] if program_type.value else 'UG'
                        
                        code = generate_program_code(inst_id, year_name, type_short, program_name.value)
                        preview_code.text = f'Program Code: {code}'
                        preview_code.style('font-size: 0.9rem; color: #2e7d32; margin-bottom: 1rem; font-weight: bold;')
                    except:
                        preview_code.text = 'Program Code: (will be generated)'
                        preview_code.style('font-size: 0.9rem; color: #666; margin-bottom: 1rem; font-style: italic;')
            
            # Update preview when fields change
            program_name.on('change', lambda: update_code_preview())
            program_type.on('change', lambda: update_code_preview())
            
            # Academic year will be selected from dropdown at the top (to be implemented)
            def submit_program():
                if not program_name.value:
                    ui.notify('Program name is required', color='negative')
                    return
                if not school_id:
                    ui.notify('School ID is missing - please go back to hierarchy and click Add Program on a specific school', color='negative')
                    return
                if not selected_academic_year_id:
                    ui.notify('Please select an academic year first from the hierarchy page', color='negative')
                    return
                
                try:
                    # Generate the program code
                    year_doc = academic_years_col.find_one({'_id': ObjectId(selected_academic_year_id)})
                    year_name = year_doc.get('name', '') if year_doc else ''
                    type_short = program_type.value.split(' ')[0] if program_type.value else 'UG'
                    
                    program_code = generate_program_code(inst_id, year_name, type_short, program_name.value)
                    
                    # Create program with code
                    program_doc = {
                        'name': program_name.value,
                        'code': program_code,
                        'type': type_short,
                        'type_full': program_type.value,
                        'duration': program_duration.value,
                        'school_id': school_id,
                        'institution_id': inst_id,
                        'academic_cycle_id': selected_academic_year_id,
                        'created_at': datetime.datetime.utcnow(),
                        'created_by': inst.get('created_by', 'admin')
                    }
                    
                    result = programs_col.insert_one(program_doc)
                    
                    # Log program creation - get school name for audit log
                    school_doc = schools_col.find_one({'_id': ObjectId(school_id)}) if school_id else None
                    school_name = school_doc.get('name', 'Unknown School') if school_doc else 'Unknown School'
                    log_audit_action(
                        action='Created Program',
                        details=f'Program "{program_name.value}" ({program_duration.value}) created with code {program_code} in school "{school_name}"',
                        institution_id=inst_id,
                        entity_type='program',
                        entity_id=str(result.inserted_id)
                    )
                    
                    ui.notify(f'Program "{program_name.value}" created with code: {program_code}', color='positive')
                    ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                except Exception as e:
                    ui.notify(f'Error creating program: {str(e)}', color='negative')
            ui.button('Add Program', on_click=submit_program).style(f'background: {main_color}; color: #fff; width: 350px; margin-top: 1rem; font-size: 1.1rem;')
            ui.button('Cancel', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')).style(f'background: #6c757d; color: #fff; width: 350px; margin-top: 0.5rem; font-size: 1.1rem;')

# --- Add Department Form ---
@ui.page('/institution_admin/{inst_id}/add_department')
def add_department_page(inst_id: str):
    from bson import ObjectId
    from nicegui import app
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    main_color = inst.get('theme_color', '#1976d2')
    # Modal overlay effect and centered form
    with ui.row().style('position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1000; align-items: center; justify-content: center; backdrop-filter: blur(8px); background: rgba(0,0,0,0.18);'):
        with ui.card().style(f'align-items: center; padding: 2.5rem 2.5rem 2rem 2.5rem; background: #fff; border-radius: 18px; box-shadow: 0 4px 32px rgba(0,0,0,0.18); min-width: 400px;'):
            ui.label('Add Department').style(f'font-size: 1.7rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
            dept_name = ui.input('Department Name').style('width: 350px; margin-bottom: 1.5rem;')
            def submit_dept():
                selected_academic_year_id = app.storage.user.get('selected_academic_year_id') if app.storage.user else None
                if not dept_name.value or not selected_academic_year_id:
                    ui.notify('All fields are required (including academic year)', color='negative')
                    return
                # For department, type='department' in school collection
                school = {
                    'name': dept_name.value,
                    'institution_id': inst_id,
                    'created_by': inst.get('created_by','admin'),
                    'academic_cycle_id': selected_academic_year_id,
                    'type': 'department',
                    'created_at': datetime.datetime.utcnow(),
                    'updated_at': datetime.datetime.utcnow(),
                }
                result = schools_col.insert_one(school)
                
                # Log department creation
                log_audit_action(
                    action='Created Department',
                    details=f'Department "{dept_name.value}" created',
                    institution_id=inst_id,
                    entity_type='department',
                    entity_id=str(result.inserted_id)
                )
                
                ui.notify('Department added!', color='positive')
                ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
            ui.button('Add Department', on_click=submit_dept).style(f'background: {main_color}; color: #fff; width: 350px; margin-top: 1rem; font-size: 1.1rem;')

# --- Create User Group Form ---
@ui.page('/institution_admin/{inst_id}/create_user_group')
def create_user_group_page(inst_id: str):
    from nicegui import app
    from bson import ObjectId
    import urllib.parse
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    # Get query parameters from the current request
    try:
        from nicegui import context
        query_params = context.get().request.query_params
        school_id = query_params.get('school_id','')
        program_id = query_params.get('program_id','')
        department_id = query_params.get('department_id','')
    except:
        school_id = ''
        program_id = ''
        department_id = ''  # fallback if no query params
    
    # Determine default role based on context
    default_role = ''
    context_info = ''
    if school_id:
        try:
            school_doc = schools_col.find_one({'_id': ObjectId(school_id)})
            school_name = school_doc.get('name', 'Unknown') if school_doc else 'Unknown'
            default_role = 'School Admin'
            context_info = f'School: {school_name}'
        except:
            context_info = 'Invalid School ID'
    elif program_id:
        try:
            program_doc = programs_col.find_one({'_id': ObjectId(program_id)})
            program_name = program_doc.get('name', 'Unknown') if program_doc else 'Unknown'
            default_role = 'Program Admin'
            context_info = f'Program: {program_name}'
        except:
            context_info = 'Invalid Program ID'
    elif department_id:
        try:
            dept_doc = schools_col.find_one({'_id': ObjectId(department_id)})
            dept_name = dept_doc.get('name', 'Unknown') if dept_doc else 'Unknown'
            default_role = 'Department Admin'
            context_info = f'Department: {dept_name}'
        except:
            context_info = 'Invalid Department ID'
    
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    main_color = inst.get('theme_color', '#1976d2')
    
    # Modal overlay effect and centered form (same as other forms)
    with ui.row().style('position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1000; align-items: center; justify-content: center; backdrop-filter: blur(8px); background: rgba(0,0,0,0.18);'):
        with ui.card().style(f'align-items: center; padding: 2.5rem 2.5rem 2rem 2.5rem; background: #fff; border-radius: 18px; box-shadow: 0 4px 32px rgba(0,0,0,0.18); min-width: 400px;'):
            ui.label('Create User Group').style(f'font-size: 1.7rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
            
            # Show context information
            if context_info:
                ui.label(context_info).style(f'font-size: 0.9rem; color: {main_color}; margin-bottom: 1rem; font-weight: bold;')
            
            first_name = ui.input('First Name').style('width: 350px; margin-bottom: 1rem;')
            last_name = ui.input('Last Name').style('width: 350px; margin-bottom: 1rem;')
            email = ui.input('Email').props('type=email').style('width: 350px; margin-bottom: 1rem;')
            
            # Auto-fill role based on context, but allow editing
            roles_input = ui.input('Role', value=default_role).style('width: 350px; margin-bottom: 1rem;')
            
            def submit_user():
                # Assign to correct hierarchy level
                selected_academic_year_id = app.storage.user.get('selected_academic_year_id') if app.storage.user else None
                if not selected_academic_year_id:
                    ui.notify('Select an academic year first', color='negative')
                    return
                
                if not all([first_name.value, last_name.value, email.value, roles_input.value]):
                    ui.notify('All fields are required', color='negative')
                    return
                
                result, raw_password = create_user(
                    email=email.value,
                    role=roles_input.value,
                    institution_id=inst_id,
                    school_id=school_id if school_id else None,
                    program_id=program_id if program_id else None,
                    department_id=department_id if department_id else None,
                    first_name=first_name.value,
                    last_name=last_name.value,
                    academic_cycle_id=selected_academic_year_id
                )
                ui.notify(f'User created! Password: {raw_password}', color='positive')
                ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                
            ui.button('Create User', on_click=submit_user).style(f'background: {main_color}; color: #fff; width: 350px; margin-top: 1rem; font-size: 1.1rem;')
            ui.button('Cancel', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')).style(f'background: #6c757d; color: #fff; width: 350px; margin-top: 0.5rem; font-size: 1.1rem;')

# --- Imports (move all to top) ---
from pymongo import MongoClient
import datetime
import hashlib
import secrets
from nicegui import app, ui


# --- Institution Admin Sidebar Wrapper ---
def institution_admin_sidebar(inst_id, main_content_func):
    # --- AUTH CHECK: Only allow rendering if user is logged in ---
    global current_user
    if not current_user or not current_user.get('email'):
        if hasattr(app.storage, 'user'):
            app.storage.user['selected_academic_year_id'] = None
            app.storage.user['selected_academic_year_inst_id'] = None
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    from bson import ObjectId
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    if not inst:
        ui.label('Institution not found').style('font-size: 1.2rem; color: #c00; margin-top: 2rem;')
        return
    main_color = inst.get('theme_color', '#1976d2')
    # Calculate lighter tint for theme
    import re
    def hex_to_rgb(hex_color):
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
    def rgbstr_to_rgb(rgbstr):
        nums = re.findall(r"[\d\.]+", rgbstr)
        return tuple(int(float(nums[i])) for i in range(3))
    def rgb_to_hex(rgb):
        return '#%02x%02x%02x' % rgb
    def lighten(rgb, percent):
        return tuple(min(255, int(c + (255-c)*percent)) for c in rgb)
    if main_color.startswith('#'):
        main_rgb = hex_to_rgb(main_color)
    elif main_color.startswith('rgb'):
        main_rgb = rgbstr_to_rgb(main_color)
    else:
        try:
            main_rgb = hex_to_rgb(main_color)
        except Exception:
            main_rgb = (25, 118, 210)
    light_rgb = lighten(main_rgb, 0.7)
    light_color = rgb_to_hex(light_rgb)
    logo_url = inst.get('logo') or 'https://ui-avatars.com/api/?name=' + (inst.get('name') or 'Institution')
    with ui.row().style(f'height: 100vh; width: 100vw; background: #fff; overflow: hidden;'):
        # Sidebar (fixed height, no scroll)
        with ui.column().style(f'background: #fff; min-width: 260px; height: 100vh; box-shadow: 2px 0 8px rgba(0,0,0,0.04); padding: 2rem 1rem; align-items: flex-start; overflow: visible; position: relative;'):
            ui.image(logo_url).style('width: 64px; height: 64px; object-fit: contain; margin-bottom: 1rem;')
            ui.label(inst.get('name', '')).style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
            def themed_btn(label, on_click, bold=False):
                btn = ui.button(label, on_click=on_click)
                # Use main theme color for both normal and hover states (solid style), white text always
                btn.style(f'width: 100%; margin-bottom: 0.5rem; background: {main_color}; color: #fff !important; font-weight: {"bold" if bold else "normal"}; border-radius: 8px; border: none; transition: background 0.2s;')
                btn.props('flat')
                btn.on('mouseenter', lambda e, b=btn: b.style(f'background: {main_color}; color: #fff !important; border-radius: 8px; border: none;'))
                btn.on('mouseleave', lambda e, b=btn: b.style(f'background: {main_color}; color: #fff !important; border-radius: 8px; border: none;'))
                return btn
            themed_btn('Institution Details', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/details'))
            themed_btn('Academic Years', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/academic_years'), bold=True)
            themed_btn('Institution Hierarchy', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy'))
            themed_btn('Extended Profiles', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/extended_profiles'))
            themed_btn('Criterias', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/criterias'))
            themed_btn('Spreadsheets', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/spreadsheets'))
            themed_btn('Audit Logs', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/audit_logs'))
            themed_btn('Manage Users', lambda: ui.navigate.to(f'/institution_admin/{inst_id}/users'))
            ui.separator()
            btn_logout = ui.button('Logout', on_click=lambda: ui.navigate.to('/'))
            btn_logout.style(f'width: 100%; margin-top: 2rem; background: #fff; color: {main_color}; font-weight: bold;')
            btn_logout.props('flat')
        # Main content with academic year dropdown at top right only for certain pages
        with ui.column().style(f'flex: 1; padding: 2rem; align-items: center; background: #fff; border-radius: 16px; margin: 2rem; box-shadow: 0 2px 16px rgba(0,0,0,0.08); position: relative; overflow-y: auto; max-height: calc(100vh - 4rem);'):
            import inspect
            # Only show dropdown for hierarchy, criterias, extended_profiles
            show_dropdown = False
            caller_name = main_content_func.__name__
            if caller_name in [
                'institution_admin_hierarchy',
                'institution_admin_criterias',
                'institution_admin_extended_profiles',
                'institution_admin_spreadsheets',
            ]:
                show_dropdown = True
            if show_dropdown:
                # Minimal, small dropdown: only unlocked years, no filter buttons
                unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
                if not hasattr(app.storage, 'user'):
                    app.storage.user = {}
                # Only show names in dropdown, keep id mapping in backend
                year_options = [y['name'] for y in unlocked_years]
                name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
                valid_option_ids = list(name_to_id.values())
                stored_inst_id = app.storage.user.get('selected_academic_year_inst_id')
                if stored_inst_id != inst_id:
                    app.storage.user['selected_academic_year_id'] = None
                    app.storage.user['selected_academic_year_inst_id'] = inst_id
                selected_year_id = app.storage.user.get('selected_academic_year_id')
                def on_year_change(e):
                    # e.value is the name, map to id
                    app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
                # Place label and dropdown in a row at the top right, styled as a small select
                with ui.row().style(f'position: absolute; top: 1.5rem; right: 2.5rem; min-width: 220px; z-index: 10; align-items: center; gap: 0.5rem; background: #fff; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); padding: 0.3rem 0.7rem; border: 2px solid {main_color}30;'):
                    ui.label('Academic Year:').style(f'font-size: 1rem; margin-right: 0.3rem; color: {main_color}; font-weight: bold; letter-spacing: 0.01em;')
                    if year_options:
                        # Find the name for the selected id
                        selected_name = None
                        for n, i in name_to_id.items():
                            if i == selected_year_id:
                                selected_name = n
                                break
                        year_select = ui.select(options=year_options, value=selected_name, on_change=lambda e: (on_year_change(e), ui.update()))
                        year_select.props('outlined')
                        year_select.style(f'background: {light_color}; color: #111; min-width: 120px; height: 32px; border-radius: 8px; font-weight: bold; border: 2px solid {main_color}; transition: background 0.2s; margin-left: 0.2rem; font-size: 0.95rem; padding: 0 0.5rem;')
                        # Shrink dropdown popup height and font size
                        year_select.classes('shrink-dropdown')
                        year_select.on('mouseenter', lambda e, s=year_select: s.style(f'background: {main_color}30; color: #111; min-width: 120px; height: 32px; border-radius: 8px; font-weight: bold; border: 2px solid {main_color}; margin-left: 0.2rem; font-size: 0.95rem; padding: 0 0.5rem;'))
                        year_select.on('mouseleave', lambda e, s=year_select: s.style(f'background: {light_color}; color: #111; min-width: 120px; height: 32px; border-radius: 8px; font-weight: bold; border: 2px solid {main_color}; margin-left: 0.2rem; font-size: 0.95rem; padding: 0 0.5rem;'))
                    else:
                        ui.label('No academic years created yet.').style('color: #c00; font-weight: bold; margin-left: 0.2rem; font-size: 1rem;')
            # Call the main content function inside the main content column
            main_content_func(inst, main_color)
# --- Academic Years Management Page ---
@ui.page('/institution_admin/{inst_id}/academic_years')
def institution_admin_academic_years(inst_id: str):
    def content(inst, main_color):
        ui.label('Academic Years').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
        years = list(academic_years_col.find({'institution_id': inst_id}))
        with ui.row().style('width: 100%; align-items: flex-start; gap: 2rem;'):
            with ui.column().style('min-width: 320px;'):
                ui.label('Create New Academic Year').style('font-size: 1.1rem; font-weight: bold; margin-bottom: 0.5rem;')
                year_name = ui.input('Academic Year Name (e.g. 2024-25)').style('width: 100%; margin-bottom: 0.5rem;')
                
                # Copy from previous year option
                copy_from_year = ui.select(
                    options=['None'] + [y['name'] for y in years],
                    value='None',
                    label='Copy structure from'
                ).style('width: 100%; margin-bottom: 0.5rem;')
                
                ui.label('Note: Copying will include hierarchy, criterias, and extended profiles').style('font-size: 0.8rem; color: #666; margin-bottom: 0.5rem;')
                
                def create_year():
                    if not year_name.value:
                        ui.notify('Year name required', color='negative')
                        return
                    # Check for duplicate
                    if academic_years_col.find_one({'institution_id': inst_id, 'name': year_name.value}):
                        ui.notify('Year already exists', color='warning')
                        return
                    
                    # Create new academic year
                    new_year_id = create_academic_year(year_name.value, inst_id, is_locked=False)
                    
                    # Copy from existing year if selected
                    if copy_from_year.value != 'None':
                        source_year = None
                        for y in years:
                            if y['name'] == copy_from_year.value:
                                source_year = y
                                break
                        
                        if source_year:
                            copy_year_data(inst_id, str(source_year['_id']), str(new_year_id))
                            ui.notify(f'Academic year created and copied structure from {source_year["name"]}!', color='positive')
                        else:
                            ui.notify('Academic year created!', color='positive')
                    else:
                        ui.notify('Academic year created!', color='positive')
                    
                    ui.navigate.to(f'/institution_admin/{inst_id}/academic_years')
                ui.button('Create Academic Year', on_click=create_year).style(f'background: {main_color}; color: #fff; width: 100%; margin-top: 0.5rem;')
            with ui.column().style('flex: 1;'):
                ui.label('Existing Academic Years').style('font-size: 1.1rem; font-weight: bold; margin-bottom: 0.5rem;')
                if years:
                    for year in years:
                        with ui.row().style('align-items: center; margin-bottom: 0.5rem;'):
                            lock_status = 'Locked' if year.get('is_locked') else 'Unlocked'
                            ui.label(f"{year.get('name','')} [{lock_status}]").style('font-size: 1rem; margin-right: 1rem;')
                            # --- Delete Academic Year Button ---
                            def delete_year(year_id=str(year['_id']), year_name=year.get('name','')):
                                # Check for related data
                                school_count = schools_col.count_documents({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                program_count = programs_col.count_documents({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                user_count = users_col.count_documents({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                # TODO: Add other collections if needed
                                total_related = school_count + program_count + user_count
                                msg = f"Are you sure you want to delete academic year '{year_name}'?"
                                if total_related > 0:
                                    msg += f"\nWARNING: All data filled in this academic year will be deleted! ({school_count} schools, {program_count} programs, {user_count} users)"
                                def do_delete():
                                    # Log academic year deletion
                                    log_audit_action(
                                        action='Deleted Academic Year',
                                        details=f'Academic year "{year.get("name", "Unknown")}" and all related data deleted ({school_count} schools, {program_count} programs, {user_count} users)',
                                        institution_id=inst_id,
                                        entity_type='academic_year',
                                        entity_id=year_id
                                    )
                                    
                                    academic_years_col.delete_one({'_id': year['_id']})
                                    schools_col.delete_many({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                    programs_col.delete_many({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                    users_col.delete_many({'institution_id': inst_id, 'academic_cycle_id': year_id})
                                    # TODO: Delete from other collections if needed
                                    ui.notify('Academic year and all related data deleted!', color='positive')
                                    ui.navigate.to(f'/institution_admin/{inst_id}/academic_years')
                                with ui.dialog() as dialog:
                                    ui.label(msg).style('color: #c00; font-weight: bold; margin-bottom: 1rem; white-space: pre-line;')
                                    with ui.row():
                                        ui.button('Delete', on_click=lambda: (do_delete(), dialog.close())).style('background: #c00; color: #fff;')
                                        ui.button('Cancel', on_click=dialog.close)
                                dialog.open()
                            ui.button('Delete', on_click=delete_year).style('background: #c00; color: #fff; margin-right: 0.5rem;')
                            if not year.get('is_locked'):
                                def lock_year(year_id=str(year['_id'])):
                                    academic_years_col.update_one({'_id': year['_id']}, {'$set': {'is_locked': True}})
                                    ui.notify('Year locked!', color='positive')
                                    ui.navigate.to(f'/institution_admin/{inst_id}/academic_years')
                                ui.button('Lock', on_click=lock_year).style('background: #c00; color: #fff; margin-right: 0.5rem;')
                            else:
                                def unlock_year(year_id=str(year['_id'])):
                                    academic_years_col.update_one({'_id': year['_id']}, {'$set': {'is_locked': False}})
                                    ui.notify('Year unlocked!', color='positive')
                                    ui.navigate.to(f'/institution_admin/{inst_id}/academic_years')
                                ui.button('Unlock', on_click=unlock_year).style('background: #1976d2; color: #fff; margin-right: 0.5rem;')
                else:
                    ui.label('No academic years created yet.').style('color: #888;')
    institution_admin_sidebar(inst_id, content)

# --- Institution Admin Dashboard ---
@ui.page('/institution_admin/{inst_id}')
def institution_admin_dashboard(inst_id: str):
    def content(inst, main_color):
        ui.label('Institution Admin Profile').style(f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
        ui.label('Select a section from the sidebar to begin.').style('font-size: 1.1rem; color: #555;')
    institution_admin_sidebar(inst_id, content)

# --- Placeholder pages for each section ---
@ui.page('/institution_admin/{inst_id}/details')
def institution_admin_details(inst_id: str):
    def content(inst, main_color):
        ui.label('Institution Details (Admin)').style('font-size: 1.5rem; font-weight: bold; margin-top: 2rem; margin-bottom: 1.5rem;')
        # Define fields to show/edit (exclude theme_color and logo)
        fields = [
            ('name', 'Institution Name'),
            ('website_url', 'Website URL'),
            ('establishment_year', 'Establishment Year'),
            ('address', 'Address'),
            ('city', 'City'),
            ('state', 'State'),
            ('country', 'Country'),
            ('pincode', 'Pincode'),
            ('contact_email', 'Contact Email'),
            ('contact_phone', 'Contact Phone'),
        ]
        input_widgets = {}
        with ui.column().style('width: 100%; max-width: 500px; align-items: flex-start;'):
            for key, label in fields:
                value = inst.get(key, '') if inst else ''
                input_widgets[key] = ui.input(label, value=value or '').style('width: 100%; margin-bottom: 1rem;')
            def save_details():
                update_data = {}
                for key, _ in fields:
                    val = input_widgets[key].value.strip() if input_widgets[key].value else None
                    if val:
                        update_data[key] = val
                if update_data:
                    institutions_col.update_one({'_id': inst['_id']}, {'$set': update_data})
                    ui.notify('Institution details updated!', color='positive')
                else:
                    ui.notify('No changes to save.', color='warning')
            ui.button('Save', on_click=save_details).style(f'background: {main_color}; color: #fff; width: 120px; margin-top: 1rem;')
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/hierarchy')
def institution_admin_hierarchy(inst_id: str):
    def content(inst, main_color):
        from nicegui import app
        # Theme colors (copied from sidebar logic)
        if main_color.startswith('#'):
            main_rgb = hex_to_rgb(main_color)
        elif main_color.startswith('rgb'):
            main_rgb = rgbstr_to_rgb(main_color)
        else:
            #             try:
                main_rgb = hex_to_rgb(main_color)
            except Exception:
                main_rgb = (25, 118, 210)
        light_rgb = lighten(main_rgb, 0.7)
        light_color = rgb_to_hex(light_rgb)
        
        # CSS temporarily removed to fix syntax error
        # <style>
        # .shrink-dropdown .q-menu {
            # min-width: 90px !important;
            #             max-width: 120px !important;
            #             min-height: 2px !important;
            #             max-height: 60px !important;
        # }
        # .shrink-dropdown .q-item {
            #             min-height: 14px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0px !important;
            #             padding-bottom: 0px !important;
        # }
        # .shrink-dropdown .q-item__section--main {
            #             padding-top: 0 !important;
            #             padding-bottom: 0 !important;
        # }
        # .shrink-dropdown .q-field__control, .shrink-dropdown .q-field__native, .shrink-dropdown .q-field__input {
            #             min-height: 18px !important;
            #             height: 18px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0 !important;
        
            def on_year_change(e):
                app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
                ui.update()
            
            with ui.row().style('width: 100%; align-items: center; justify-content: flex-end; margin-bottom: 1rem;'):
                ui.label('Academic Year:').style(f'font-size: 1rem; margin-right: 0.3rem; color: {main_color}; font-weight: bold; letter-spacing: 0.01em;')
                if year_options:
                    selected_name = None
                    for n, i in name_to_id.items():
                        if i == selected_year_id:
                            selected_name = n
                            break
                    year_select = ui.select(options=year_options, value=selected_name, on_change=lambda e: (on_year_change(e), ui.update()))
                    year_select.props('outlined')
                    year_select.style(f'background: {main_color}; color: #fff; min-width: 90px; height: 18px; border-radius: 8px; font-weight: bold; border: 2px solid {main_color}; margin-left: 0.2rem; font-size: 0.75rem; padding: 0 0.15rem;')
                    year_select.classes('shrink-dropdown')
                else:
                    ui.label('No academic years created yet.').style('color: #c00; font-weight: bold; margin-left: 0.2rem; font-size: 1rem;')
            
            ui.label('Institution Hierarchy').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-top: 2rem;')
            # Add card with single '+ Add' dropdown button
            with ui.card().style(f'width: 95%; margin-bottom: 2rem; background: {main_color}10; border-left: 8px solid {main_color};'):
                ui.label(inst.get('name', '')).style(f'font-size: 1.2rem; font-weight: bold; color: {main_color};')
                def themed_dropdown_btn(label, options, disabled=False):
                    from nicegui.events import ClickEventArguments
                    btn = ui.button(label)
                    if disabled:
                        btn.props('disabled')
                    # Use main theme color for both normal and hover states (original blue style)
                    btn.style(f'background: {main_color}; color: #111; margin-top: 1rem; border-radius: 8px; border: none; font-weight: bold; transition: background 0.2s; min-width: 140px;')
                    btn.props('flat')
                    btn.on('mouseenter', lambda e, b=btn: b.style(f'background: {main_color}; color: #111; margin-top: 1rem; border-radius: 8px; border: none; font-weight: bold; min-width: 140px;'))
                    btn.on('mouseleave', lambda e, b=btn: b.style(f'background: {main_color}; color: #111; margin-top: 1rem; border-radius: 8px; border: none; font-weight: bold; min-width: 140px;'))
                    def open_menu(e: ClickEventArguments):
                        with ui.menu() as menu:
                            for opt_label, opt_func in options:
                                ui.menu_item(opt_label, on_click=lambda f=opt_func: (f(), menu.close()))
                        menu.open()
                    btn.on('click', open_menu)
                    return btn
                # Dropdown options
                add_options = [
                    ('Add School', (lambda: ui.navigate.to(f'/institution_admin/{inst_id}/add_school?year_id={selected_year_id}')) if selected_year_id else (lambda: ui.notify("Select academic year first", color="warning"))),
                    ('Add Department', (lambda: ui.navigate.to(f'/institution_admin/{inst_id}/add_department?year_id={selected_year_id}')) if selected_year_id else (lambda: ui.notify("Select academic year first", color="warning"))),
                ]
                themed_dropdown_btn('+ Add', add_options, disabled=not selected_year_id)
            
            schools = list(schools_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id, 'type': {'$ne': 'department'}}))
            programs = list(programs_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id}))
            departments = list(schools_col.find({'institution_id': inst_id, 'type': 'department', 'academic_cycle_id': selected_year_id}))
            # Schools
            for school in schools:
                school_card_id = f"school-{school['_id']}"
                with ui.card().style(f'width: 90%; margin-bottom: 1rem; background: #fff; border-left: 6px solid {main_color}; margin-left: 2rem; min-height: 100px;').classes(f'drop-zone {school_card_id}'):
                    with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                        with ui.column().style('flex: 1;'):
                            ui.label(f"School: {school.get('name','')}").style('font-size: 1.1rem; font-weight: bold; color: #1976d2;')
                            
                            # Fix lambda closure issue by capturing the current school_id value
                            current_school_id = str(school['_id'])
                            current_school_name = school.get('name', '')
                            
                            def create_add_program_handler(school_id, school_name):
                                def handler():
                                    print(f"Debug - Add Program clicked for school: '{school_name}' (ID: {school_id})")
                                    
                                    # Store parameters in session as fallback
                                    if not hasattr(app.storage, 'user'):
                                        app.storage.user = {}
                                    app.storage.user['temp_nav_params'] = {
                                        'school_id': school_id,
                                        'year_id': selected_year_id
                                    }
                                    
                                    url = f'/institution_admin/{inst_id}/add_program?school_id={school_id}&year_id={selected_year_id}'
                                    print(f"Debug - Navigating to: {url}")
                                    print(f"Debug - Stored in session: {app.storage.user.get('temp_nav_params')}")
                                    ui.navigate.to(url)
                                return handler
                            
                            with ui.row().style('margin-top: 0.5rem;'):
                                ui.button('+ Add Program', on_click=create_add_program_handler(current_school_id, current_school_name)).style(f'background: {main_color}; color: #fff;')
                                ui.button('Create User Group', on_click=lambda s_id=current_school_id: ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?school_id={s_id}')).style(f'background: #1976d2; color: #fff; margin-left: 1rem;')
                        
                        # Delete button for school
                        def delete_school(school_id=str(school['_id']), school_name=school.get('name', '')):
                            # First check if school has any programs
                            school_programs = list(programs_col.find({'school_id': school_id}))
                            if school_programs:
                                ui.notify(f'Cannot delete school "{school_name}" - it has {len(school_programs)} program(s). Delete programs first.', color='warning')
                                return
                            
                            # Delete the school
                            # Log school deletion
                            log_audit_action(
                                action='Deleted School',
                                details=f'School "{school_name}" was deleted',
                                institution_id=inst_id,
                                entity_type='school',
                                entity_id=str(school['_id'])
                            )
                            
                            schools_col.delete_one({'_id': school['_id']})
                            ui.notify(f'School "{school_name}" deleted successfully!', color='positive')
                            ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                        
                        ui.button('Delete', on_click=delete_school).style('background: #dc3545; color: #fff; margin-left: 1rem;')
                    
                    # Programs under school
                    for program in programs:
                        if program.get('school_id') == str(school['_id']):
                            program_card_id = f"program-{program['_id']}"
                            with ui.card().style('width: 85%; margin-bottom: 0.5rem; background: #f5f5f5; margin-left: 2rem; cursor: move;').classes(f'draggable-program {program_card_id}'):
                                with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                                    with ui.column().style('flex: 1;'):
                                        program_name = program.get('name', '')
                                        program_code = program.get('code', 'N/A')
                                        program_type = program.get('type_full', program.get('type', 'N/A'))
                                        
                                        with ui.row().style('align-items: center;'):
                                            ui.icon('drag_indicator').style('color: #666; margin-right: 8px; cursor: grab;').classes('drag-handle')
                                            ui.label(f"Program: {program_name}").style('font-size: 1rem; font-weight: bold; color: #1976d2;')
                                        
                                        ui.label(f"Code: {program_code}").style('font-size: 0.85rem; color: #666; font-family: monospace;')
                                        ui.label(f"Type: {program_type}").style('font-size: 0.8rem; color: #888;')
                                        
                                        # Display duration if available
                                        program_duration = program.get('duration', 'N/A')
                                        ui.label(f"Duration: {program_duration}").style('font-size: 0.8rem; color: #888;')
                                        
                                        ui.button('Create User Group', on_click=lambda p_id=str(program['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?program_id={p_id}')).style(f'background: #1976d2; color: #fff; margin-top: 0.5rem;')
                                    
                                    # Delete button for program
                                    def delete_program(program_id=str(program['_id']), program_name=program.get('name', '')):
                                        # Log program deletion
                                        log_audit_action(
                                            action='Deleted Program',
                                            details=f'Program "{program_name}" with code "{program.get("code", "N/A")}" was deleted',
                                            institution_id=inst_id,
                                            entity_type='program',
                                            entity_id=program_id
                                        )
                                        
                                        programs_col.delete_one({'_id': program['_id']})
                                        ui.notify(f'Program "{program_name}" deleted successfully!', color='positive')
                                        ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                                    
                                    ui.button('Delete', on_click=delete_program).style('background: #dc3545; color: #fff; margin-left: 1rem; margin-top: 0.5rem;')
            # Departments
            for dept in departments:
                with ui.card().style(f'width: 90%; margin-bottom: 1rem; background: #fff; border-left: 6px solid {main_color}; margin-left: 2rem;'):
                    with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                        with ui.column().style('flex: 1;'):
                            ui.label(f"Department: {dept.get('name','')}").style('font-size: 1.1rem; font-weight: bold; color: #1976d2;')
                            ui.button('Create User Group', on_click=lambda d_id=str(dept['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?department_id={d_id}')).style(f'background: #1976d2; color: #fff; margin-top: 0.5rem;')
                        
                        # Delete button for department
                        def delete_department(dept_id=str(dept['_id']), dept_name=dept.get('name', '')):
                            schools_col.delete_one({'_id': dept['_id']})
                            ui.notify(f'Department "{dept_name}" deleted successfully!', color='positive')
                            ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                        
                        ui.button('Delete', on_click=delete_department).style('background: #dc3545; color: #fff; margin-left: 1rem;')
    
    # CSS and JavaScript temporarily removed to fix syntax error
    
    institution_admin_sidebar(inst_id, content)
    // Initialize drag and drop for programs
    function initializeDragAndDrop() {{
        const programCards = document.querySelectorAll('.draggable-program');
        const dropZones = document.querySelectorAll('.drop-zone');
        
        // Add drag event listeners to program cards
        programCards.forEach(card => {{
            card.draggable = true;
            
            card.addEventListener('dragstart', function(e) {{
                e.dataTransfer.setData('text/plain', card.className.split(' ').find(cls => cls.startsWith('program-')));
                card.style.opacity = '0.5';
                card.style.transform = 'scale(0.95)';
            }});
            
            card.addEventListener('dragend', function(e) {{
                card.style.opacity = '1';
                card.style.transform = 'scale(1)';
            }});
        # }});
        
        // Add drop event listeners to school zones
        dropZones.forEach(zone => {{
            zone.addEventListener('dragover', function(e) {{
                e.preventDefault();
                zone.style.background = '#e3f2fd';
                zone.style.borderLeft = '6px solid #2196f3';
            }});
            
            zone.addEventListener('dragleave', function(e) {{
                zone.style.background = '#fff';
                zone.style.borderLeft = '6px solid #1976d2';
            }});
            
            zone.addEventListener('drop', function(e) {{
                e.preventDefault();
                zone.style.background = '#fff';
                zone.style.borderLeft = '6px solid #1976d2';
                
                const programClass = e.dataTransfer.getData('text/plain');
                const programId = programClass.replace('program-', '');
                const schoolClass = zone.className.split(' ').find(cls => cls.startsWith('school-'));
                const schoolId = schoolClass.replace('school-', '');
                
                // Don't move if dropped on same school
                const programCard = document.querySelector('.' + programClass);
                const currentSchoolCard = programCard.closest('.drop-zone');
                if (currentSchoolCard === zone) {{
                    return;
                }}
                
                // Make API call to move program
                fetch('/api/move_program', {{
                    method: 'POST',
                    headers: {{
                        'Content-Type': 'application/json',
                    }},
                    body: JSON.stringify({{
                        program_id: programId,
                        new_school_id: schoolId,
                        institution_id: '{inst_id}'
                    }})
                }})
                .then(response => response.json())
                .then(data => {{
                    if (data.success) {{
                        // Show success message and reload page
                        alert('✓ ' + data.message);
                        setTimeout(() => {{
                            window.location.reload();
                        }}, 500);
                    }} else {{
                        alert('✗ ' + (data.message || 'Failed to move program'));
                    }}
                }})
                .catch(error => {{
                    console.error('Error:', error);
                    alert('✗ Error moving program');
                }});
            }});
        # }});
    }}
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {{
        document.addEventListener('DOMContentLoaded', initializeDragAndDrop);
    }} else {{
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/extended_profiles')
def institution_admin_extended_profiles(inst_id: str):
    def content(inst, main_color):
        from nicegui import app
        # Minimal, small academic year dropdown at top
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        def on_year_change(e):
            app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
            ui.update()
        # Add custom CSS for shrinking the dropdown popup (menu)
        # ui.add_head_html("""
        # <style>
        # .shrink-dropdown .q-menu {
            # min-width: 90px !important;
            #             max-width: 120px !important;
            #             min-height: 2px !important;
            #             max-height: 60px !important;
        # }
        # .shrink-dropdown .q-item {
            #             min-height: 14px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0px !important;
            #             padding-bottom: 0px !important;
        # }
        # .shrink-dropdown .q-item__section--main {
            #             padding-top: 0 !important;
            #             padding-bottom: 0 !important;
        # }
        # .shrink-dropdown .q-field__control, .shrink-dropdown .q-field__native, .shrink-dropdown .q-field__input {
            #             min-height: 18px !important;
            #             height: 18px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0 !important;
            #             padding-bottom: 0 !important;
            #             padding-left: 2px !important;
            #             padding-right: 2px !important;
        # }
        # </style>
        # # """)
            def open_create_dialog():
                if not selected_year_id:
                    ui.notify('Select an academic year first', color='negative')
                    return
                with ui.dialog() as dialog:
                    with ui.card().style('min-width: 700px; max-width: 900px; padding: 2.5rem; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);'):
                        # Main Header
                        ui.label('Create Extended Profile').style('font-size: 2rem; font-weight: bold; margin-bottom: 2rem; color: #2c3e50; text-align: center; border-bottom: 3px solid #9b59b6; padding-bottom: 1rem;')
                        
                        with ui.column().style('width: 100%; gap: 2rem;'):
                            # Basic Information Section
                            with ui.column().style('width: 100%; gap: 1.5rem;'):
                                ui.label('Basic Information').style('font-size: 1.3rem; font-weight: bold; color: #2c3e50; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #9b59b6;')
                                
                                with ui.column().style('width: 100%; gap: 1rem;'):
                                    profile_name = ui.input('Extended Profile Name', placeholder='Enter profile name').style('width: 100%; padding: 0.8rem; border-radius: 6px; border: 2px solid #ddd; font-size: 1rem;')
                                    profile_description = ui.textarea('Description', placeholder='Enter detailed description of this profile').style('width: 100%; padding: 0.8rem; border-radius: 6px; border: 2px solid #ddd; font-size: 1rem; min-height: 100px;')
                            
                            # Spreadsheet Headers Section
                            with ui.column().style('width: 100%; gap: 1.5rem;'):
                                ui.label('Spreadsheet Headers').style('font-size: 1.3rem; font-weight: bold; color: #2c3e50; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #e74c3c;')
                                
                                with ui.column().style('width: 100%; gap: 1rem;'):
                                    ui.label('Enter column headers separated by commas').style('font-size: 1rem; color: #555; margin-bottom: 0.5rem; font-weight: 500;')
                                    ui.label('Example: "Name, Position, Department, Email, Phone"').style('font-size: 0.9rem; color: #7f8c8d; margin-bottom: 0.5rem; font-style: italic;')
                                    header_input = ui.input(placeholder='Name, Position, Department, Email, Phone').style('width: 100%; padding: 0.8rem; border-radius: 6px; border: 2px solid #ddd; font-size: 1rem;')
                                    
                                    ui.label('Or upload a spreadsheet file to extract headers:').style('font-size: 1rem; color: #555; margin: 1rem 0 0.5rem 0; font-weight: 500;')
                                    
                                    def on_file_upload(e):
                                        ui.notify(f'File "{e.name}" uploaded successfully!', color='positive')
                                        # Clear manual header input since we're using file
                                        header_input.value = ''
                                        # Process the uploaded file immediately and show preview
                                        try:
                                            import pandas as pd
                                            import io
                                            
                                            # Get the uploaded file content directly
                                            file_content = e.content.read()
                                            file_name = e.name.lower()
                                            
                                            headers = []
                                            if file_name.endswith('.xlsx') or file_name.endswith('.xls'):
                                                # Read Excel file
                                                df = pd.read_excel(io.BytesIO(file_content), nrows=0)  # Just get headers
                                                headers = list(df.columns)
                                            elif file_name.endswith('.csv'):
                                                # Read CSV file
                                                df = pd.read_csv(io.StringIO(file_content.decode('utf-8')), nrows=0)
                                                headers = list(df.columns)
                                            else:
                                                ui.notify('Please upload an Excel (.xlsx, .xls) or CSV file', color='warning')
                                                return
                                            
                                            # Clean up headers (remove unnamed columns, strip whitespace)
                                            headers = [str(h).strip() for h in headers if not str(h).startswith('Unnamed')]
                                            
                                            # Store headers for use in create function
                                            file_upload.extracted_headers = headers
                                            
                                            if headers:
                                                ui.notify(f'Extracted {len(headers)} headers from {e.name}', color='info')
                                                
                                                # Clear existing preview and show new one
                                                preview_container.clear()
                                                with preview_container:
                                                    ui.label('Preview (from uploaded file):').style(f'font-weight: bold; color: {main_color}; margin: 1.5rem 0 0.5rem 0; font-size: 1.1rem;')
                                                    with ui.card().style('width: 100%; background: #f8f9fa; border: 1px solid #ddd; padding: 1rem;'):
                                                        with ui.row().style('width: 100%; background: #e9ecef; padding: 0.8rem; margin-bottom: 0.5rem; border-radius: 4px;'):
                                                            for header in headers:
                                                                ui.label(header).style(f'flex: 1; text-align: center; font-weight: bold; color: {main_color}; font-size: 0.9rem;')
                                                        for i in range(3):
                                                            with ui.row().style('width: 100%; padding: 0.5rem; border-bottom: 1px solid #eee;'):
                                                                for j, header in enumerate(headers):
                                                                    ui.label(f'Data {i+1}-{j+1}').style('flex: 1; text-align: center; font-size: 0.8rem; color: #666;')
                                            else:
                                                ui.notify('No valid headers found in the file', color='warning')
                                                
                                        except Exception as ex:
                                            ui.notify(f'Error reading file: {str(ex)}', color='negative')
                                    
                                    file_upload = ui.upload(
                                        on_upload=on_file_upload,
                                        label='Upload Blank Spreadsheet to Extract Headers',
                                        multiple=False,
                                        auto_upload=True
                                    ).props('accept=".xlsx,.xls,.csv"').style('width: 100%; padding: 1rem; border: 2px dashed #e74c3c; border-radius: 8px; background: #fdf2f2;')
                            
                            # Preview container
                            preview_container = ui.column().style('width: 100%; margin-top: 1rem;')
                            
                            # Supporting Documents Section
                            with ui.column().style('width: 100%; gap: 1.5rem;'):
                                ui.label('Supporting Documents').style('font-size: 1.3rem; font-weight: bold; color: #2c3e50; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #f39c12;')
                                
                                with ui.column().style('width: 100%; gap: 1rem;'):
                                    needs_docs = ui.checkbox('Requires supporting documents upload', value=False).style('font-size: 1rem; color: #555;')
                                    supporting_upload = ui.upload(
                                        label='Upload Supporting Document Template',
                                        multiple=False,
                                        auto_upload=True
                                    ).style('width: 100%; padding: 1rem; border: 2px dashed #f39c12; border-radius: 8px; background: #fef9e7;')
                                    supporting_upload.set_visibility(False)
                        
                        def toggle_docs():
                            supporting_upload.set_visibility(needs_docs.value)
                        needs_docs.on('change', toggle_docs)
                        
                        def update_preview():
                            if not header_input.value:  # Only update if manual input has content
                                return
                                
                            preview_container.clear()
                            headers = [h.strip() for h in header_input.value.split(',') if h.strip()]
                            
                            if headers:
                                with preview_container:
                                    ui.label('Preview (from manual input):').style(f'font-weight: bold; color: {main_color}; margin: 1.5rem 0 0.5rem 0; font-size: 1.1rem;')
                                    with ui.card().style('width: 100%; background: #f8f9fa; border: 1px solid #ddd; padding: 1rem;'):
                                        with ui.row().style('width: 100%; background: #e9ecef; padding: 0.8rem; margin-bottom: 0.5rem; border-radius: 4px;'):
                                            for header in headers:
                                                ui.label(header).style(f'flex: 1; text-align: center; font-weight: bold; color: {main_color}; font-size: 0.9rem;')
                                        for i in range(3):
                                            with ui.row().style('width: 100%; padding: 0.5rem; border-bottom: 1px solid #eee;'):
                                                for j, header in enumerate(headers):
                                                    ui.label(f'Data {i+1}-{j+1}').style('flex: 1; text-align: center; font-size: 0.8rem; color: #666;')
                        
                        # Update preview when header input changes
                        header_input.on('change', lambda: update_preview())
                        file_upload.on('upload', lambda: update_preview())
                        
                        # Action Buttons
                        with ui.row().style('width: 100%; justify-content: space-between; gap: 1rem; margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #eee;'):
                            ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: #fff; padding: 1rem 2.5rem; border-radius: 8px; font-size: 1rem;')
                            
                            def create_profile():
                                if not profile_name.value:
                                    ui.notify('Extended Profile name is required', color='negative')
                                    return
                                
                                headers = []
                                if header_input.value:
                                    headers = [h.strip() for h in header_input.value.split(',') if h.strip()]
                                elif hasattr(file_upload, 'extracted_headers'):
                                    # Use headers extracted from the uploaded file
                                    headers = file_upload.extracted_headers
                                
                                if not headers:
                                    ui.notify('Please provide headers either by typing or uploading a file', color='negative')
                                    return
                                
                                profile_doc = {
                                    'name': profile_name.value,
                                    'description': profile_description.value,
                                    'institution_id': inst_id,
                                    'academic_cycle_id': selected_year_id,
                                    'headers': headers,
                                    'needs_supporting_docs': needs_docs.value,
                                    'created_at': datetime.datetime.utcnow(),
                                    'updated_at': datetime.datetime.utcnow(),
                                    'created_by': inst.get('created_by', 'admin')
                                }
                                
                                extended_profiles_col = db['extended_profiles']
                                result = extended_profiles_col.insert_one(profile_doc)
                                
                                # Log extended profile creation
                                log_audit_action(
                                    action='Created Extended Profile',
                                    details=f'Extended Profile "{profile_name.value}" created with {len(headers)} columns',
                                    institution_id=inst_id,
                                    entity_type='extended_profile',
                                    entity_id=str(result.inserted_id)
                                )
                                
                                ui.notify(f'Extended Profile "{profile_name.value}" created with {len(headers)} columns!', color='positive')
                                dialog.close()
                                ui.navigate.to(f'/institution_admin/{inst_id}/extended_profiles')
                            
                            ui.button('Create Extended Profile', on_click=create_profile).style(f'background: {main_color}; color: #fff; padding: 1rem 2.5rem; border-radius: 8px; font-weight: bold; font-size: 1rem;')
                dialog.open()
            ui.button('Create Extended Profile', on_click=open_create_dialog).style(f'background: {main_color}; color: #fff; margin-top: 2rem;')
        
        # Display existing extended profiles
        if selected_year_id:
            existing_profiles = list(extended_profiles_col.find({
                'institution_id': inst_id, 
                'academic_cycle_id': selected_year_id
            }))
            
            if existing_profiles:
                ui.label('Existing Extended Profiles').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-top: 2rem; margin-bottom: 1rem;')
                
                for profile in existing_profiles:
                    with ui.card().style('width: 95%; margin-bottom: 1rem; padding: 1rem; background: #f8f9fa;'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column().style('flex: 1;'):
                                # Display name and description
                                profile_name = profile.get('name', 'Unnamed Profile')
                                ui.label(f'{profile_name}').style('font-weight: bold; font-size: 1.1rem; margin-bottom: 0.5rem;')
                                
                                if profile.get('description'):
                                    ui.label(f'Description: {profile.get("description")}').style('color: #666; margin-bottom: 0.5rem;')
                                
                                headers_text = ', '.join(profile.get('headers', []))
                                ui.label(f'Headers: {headers_text}').style('color: #666; margin-bottom: 0.5rem;')
                                
                                needs_docs = 'Yes' if profile.get('needs_supporting_docs', False) else 'No'
                                ui.label(f'Supporting Documents: {needs_docs}').style('color: #666; font-size: 0.9rem;')
                                
                                created_at = profile.get('created_at')
                                if created_at:
                                    ui.label(f'Created: {created_at.strftime("%Y-%m-%d %H:%M")}').style('color: #666; font-size: 0.8rem;')
                            
                            def delete_profile(profile_id=str(profile['_id'])):
                                # Log extended profile deletion
                                log_audit_action(
                                    action='Deleted Extended Profile',
                                    details=f'Extended Profile "{profile.get("name", "Unknown")}" was deleted',
                                    institution_id=inst_id,
                                    entity_type='extended_profile',
                                    entity_id=profile_id
                                )
                                
                                extended_profiles_col.delete_one({'_id': profile['_id']})
                                ui.notify('Extended Profile deleted!', color='positive')
                                ui.navigate.to(f'/institution_admin/{inst_id}/extended_profiles')
                            
                            ui.button('Delete', on_click=delete_profile).style('background: #dc3545; color: #fff; margin-left: 1rem;')
            #             else:
                ui.label('No extended profiles created yet for this academic year.').style('color: #666; margin-top: 2rem; font-style: italic;')
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/criterias')
def institution_admin_criterias(inst_id: str):
    def content(inst, main_color):
        from nicegui import app
        # Minimal, small academic year dropdown at top
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        def on_year_change(e):
            app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
            ui.update()
        # Add custom CSS for shrinking the dropdown popup (menu)
        # ui.add_head_html("""
        # <style>
        # .shrink-dropdown .q-menu {
            # min-width: 90px !important;
            #             max-width: 120px !important;
            #             min-height: 2px !important;
            #             max-height: 60px !important;
        # }
        # .shrink-dropdown .q-item {
            #             min-height: 14px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0px !important;
            #             padding-bottom: 0px !important;
        # }
        # .shrink-dropdown .q-item__section--main {
            #             padding-top: 0 !important;
            #             padding-bottom: 0 !important;
        # }
        # .shrink-dropdown .q-field__control, .shrink-dropdown .q-field__native, .shrink-dropdown .q-field__input {
            #             min-height: 18px !important;
            #             height: 18px !important;
            #             font-size: 0.75rem !important;
            #             padding-top: 0 !important;
            #             padding-bottom: 0 !important;
            #             padding-left: 2px !important;
            #             padding-right: 2px !important;
        # }
        # </style>
        # # """)
            def open_create_dialog():
                if not selected_year_id:
                    ui.notify('Select an academic year first', color='negative')
                    return
                with ui.dialog() as dialog:
                    with ui.card().style(f'padding: 3rem; background: #fff; border-radius: 18px; box-shadow: 0 4px 32px rgba(0,0,0,0.18); min-width: 900px; max-width: 1200px; max-height: 90vh; overflow-y: auto;'):
                        ui.label('Create Advanced Criteria').style(f'font-size: 1.8rem; font-weight: bold; color: {main_color}; margin-bottom: 2.5rem; text-align: center;')
                        
                        with ui.column().style('width: 100%; gap: 1.5rem;'):
                            # Basic Information Section
                            ui.label('Basic Information').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; border-bottom: 2px solid {main_color}20; padding-bottom: 0.5rem;')
                            criteria_name = ui.input('Criteria Name').style('width: 100%;')
                            criteria_description = ui.textarea('Description').style('width: 100%; min-height: 100px;')
                            
                            # Data Integration Section
                            ui.label('Data Integration').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; border-bottom: 2px solid {main_color}20; padding-bottom: 0.5rem; margin-top: 2rem;')
                            
                            with ui.row().style('width: 100%; gap: 2rem;'):
                                with ui.column().style('flex: 1;'):
                                    ui.label('Program Data Fields').style('font-weight: bold; margin-bottom: 0.5rem;')
                                    include_program_codes = ui.checkbox('Program Codes', value=False)
                                    include_program_names = ui.checkbox('Program Names', value=False)
                                    include_program_types = ui.checkbox('Program Types', value=False)
                                    include_program_durations = ui.checkbox('Program Durations', value=False)
                                
                                with ui.column().style('flex: 1;'):
                                    ui.label('School Data Fields').style('font-weight: bold; margin-bottom: 0.5rem;')
                                    include_school_names = ui.checkbox('School Names', value=False)
                                    include_school_codes = ui.checkbox('School Codes', value=False)
                                
                                with ui.column().style('flex: 1;'):
                                    ui.label('Submission Tracking').style('font-weight: bold; margin-bottom: 0.5rem;')
                                    include_submission_date = ui.checkbox('Submission Date', value=True)
                                    include_submitted_by = ui.checkbox('Submitted By', value=True)
                                    include_last_modified = ui.checkbox('Last Modified', value=False)
                            
                            # Advanced Field Builder Section
                            ui.label('Custom Fields Builder').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; border-bottom: 2px solid {main_color}20; padding-bottom: 0.5rem; margin-top: 2rem;')
                            
                            # Container for dynamic field list
                            fields_container = ui.column().style('width: 100%; gap: 1rem; margin-bottom: 1rem;')
                            field_list = []  # Store field definitions
                            
                            def add_field():
                                field_index = len(field_list)
                                field_data = {
                                    'name': '',
                                    'type': 'text',
                                    'required': False,
                                    'description': '',
                                    'options': [],
                                    'conditions': [],
                                    'validation': {}
                                }
                                field_list.append(field_data)
                                
                                with fields_container:
                                    with ui.card().style('width: 100%; padding: 1.5rem; background: #f8f9fa; border-left: 4px solid #007bff;'):
                                        with ui.row().style('width: 100%; align-items: center; margin-bottom: 1rem;'):
                                            ui.label(f'Field {field_index + 1}').style('font-weight: bold; font-size: 1.1rem; color: #007bff;')
                                            ui.button('Remove', on_click=lambda idx=field_index: remove_field(idx)).style('background: #dc3545; color: white; margin-left: auto;')
                                        
                                        with ui.row().style('width: 100%; gap: 1rem; margin-bottom: 1rem;'):
                                            field_name = ui.input('Field Name', placeholder='e.g., Academic Score').style('flex: 2;')
                                            field_type = ui.select(
                                                options=['text', 'number', 'email', 'date', 'select', 'multiselect', 'checkbox', 'textarea', 'file'],
                                                value='text',
                                                label='Field Type'
                                            ).style('flex: 1;')
                                            required_checkbox = ui.checkbox('Required', value=False).style('margin-top: 1rem;')
                                        
                                        field_description = ui.textarea('Field Description/Help Text', placeholder='Optional description or instructions for this field').style('width: 100%; margin-bottom: 1rem;')
                                        
                                        # Dynamic options container
                                        options_container = ui.column().style('width: 100%; margin-bottom: 1rem;')
                                        
                                        # Validation container
                                        validation_container = ui.column().style('width: 100%; margin-bottom: 1rem;')
                                        
                                        # Conditional logic container
                                        conditions_container = ui.column().style('width: 100%;')
                                        
                                        def update_field_options():
                                            options_container.clear()
                                            validation_container.clear()
                                            
                                            # Show options for select/multiselect
                                            if field_type.value in ['select', 'multiselect']:
                                                with options_container:
                                                    ui.label('Options (one per line):').style('font-weight: bold; margin-bottom: 0.5rem;')
                                                    options_input = ui.textarea('', placeholder='Option 1\nOption 2\nOption 3').style('width: 100%; min-height: 80px;')
                                                    field_data['options_input'] = options_input
                                            
                                            # Show validation for different types
                                            with validation_container:
                                                if field_type.value == 'number':
                                                    ui.label('Number Validation:').style('font-weight: bold; margin-bottom: 0.5rem;')
                                                    with ui.row().style('gap: 1rem;'):
                                                        min_val = ui.input('Min Value', placeholder='0').style('flex: 1;')
                                                        max_val = ui.input('Max Value', placeholder='100').style('flex: 1;')
                                                        decimal_places = ui.input('Decimal Places', placeholder='2').style('flex: 1;')
                                                    field_data['validation'] = {'min_val': min_val, 'max_val': max_val, 'decimal_places': decimal_places}
                                                
                                                elif field_type.value == 'text':
                                                    ui.label('Text Validation:').style('font-weight: bold; margin-bottom: 0.5rem;')
                                                    with ui.row().style('gap: 1rem;'):
                                                        min_length = ui.input('Min Length', placeholder='0').style('flex: 1;')
                                                        max_length = ui.input('Max Length', placeholder='255').style('flex: 1;')
                                                        pattern = ui.input('Pattern (regex)', placeholder='Optional regex pattern').style('flex: 2;')
                                                    field_data['validation'] = {'min_length': min_length, 'max_length': max_length, 'pattern': pattern}
                                        
                                        def add_condition():
                                            with conditions_container:
                                                with ui.card().style('width: 100%; padding: 1rem; background: #fff3cd; border: 1px solid #ffeaa7; margin-bottom: 0.5rem;'):
                                                    ui.label('Conditional Logic').style('font-weight: bold; margin-bottom: 0.5rem;')
                                                    with ui.row().style('gap: 1rem; align-items: center;'):
                                                        ui.label('Show this field when:')
                                                        condition_field = ui.select(
                                                            options=[f['name'] for f in field_list if f.get('name')],
                                                            label='Field'
                                                        ).style('flex: 1;')
                                                        condition_operator = ui.select(
                                                            options=['equals', 'not equals', 'contains', 'greater than', 'less than'],
                                                            label='Condition'
                                                        ).style('flex: 1;')
                                                        condition_value = ui.input('Value').style('flex: 1;')
                                                        ui.button('Remove', on_click=lambda: conditions_container.remove(conditions_container.children[-1])).style('background: #dc3545; color: white;')
                                        
                                        # Update field data when inputs change
                                        field_name.on('change', lambda e, idx=field_index: setattr(field_list[idx], 'name', e.value))
                                        field_type.on('change', lambda e, idx=field_index: (setattr(field_list[idx], 'type', e.value), update_field_options()))
                                        required_checkbox.on('change', lambda e, idx=field_index: setattr(field_list[idx], 'required', e.value))
                                        field_description.on('change', lambda e, idx=field_index: setattr(field_list[idx], 'description', e.value))
                                        
                                        # Store references
                                        field_data.update({
                                            'name_input': field_name,
                                            'type_input': field_type,
                                            'required_input': required_checkbox,
                                            'description_input': field_description
                                        })
                                        
                                        update_field_options()
                                        
                                        with ui.row().style('margin-top: 1rem;'):
                                            ui.button('Add Condition', on_click=add_condition).style('background: #ffc107; color: black;')
                            
                            def remove_field(index):
                                if 0 <= index < len(field_list):
                                    field_list.pop(index)
                                    fields_container.clear()
                                    # Rebuild all fields
                                    for i, field in enumerate(field_list):
                                        # Re-render field (simplified for now)
                                        pass
                            
                            with ui.row().style('margin-bottom: 2rem;'):
                                ui.button('+ Add Field', on_click=add_field).style(f'background: {main_color}; color: white; padding: 0.8rem 1.5rem;')
                                ui.button('Add from Template', on_click=lambda: add_template_fields()).style('background: #28a745; color: white; padding: 0.8rem 1.5rem; margin-left: 1rem;')
                            
                            def add_template_fields():
                                # Add common academic fields
                                templates = [
                                    {'name': 'Academic Score', 'type': 'number', 'required': True, 'description': 'Academic performance score (0-100)'},
                                    {'name': 'Grade', 'type': 'select', 'required': True, 'options': ['A+', 'A', 'B+', 'B', 'C+', 'C', 'D', 'F']},
                                    {'name': 'Attendance Percentage', 'type': 'number', 'required': True, 'description': 'Student attendance percentage'},
                                    {'name': 'Remarks', 'type': 'textarea', 'required': False, 'description': 'Additional comments or observations'},
                                    {'name': 'Certification Status', 'type': 'select', 'required': True, 'options': ['Certified', 'Pending', 'Not Certified']}
                                ]
                                
                                for template in templates:
                                    field_list.append(template)
                                    add_field()  # This will render the field
                            
                            # Preview Section
                            ui.label('Live Preview').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; border-bottom: 2px solid {main_color}20; padding-bottom: 0.5rem; margin-top: 2rem;')
                            preview_container = ui.column().style('width: 100%; margin-top: 1rem; background: #f8f9fa; padding: 1.5rem; border-radius: 8px; border: 1px solid #dee2e6;')
                            
                            def update_preview():
                                preview_container.clear()
                                with preview_container:
                                    if not field_list:
                                        ui.label('Add fields above to see preview').style('color: #666; font-style: italic;')
                                        return
                                    
                                    ui.label('Form Preview:').style('font-weight: bold; margin-bottom: 1rem;')
                                    
                                    # Show data integration fields first
                                    data_fields = []
                                    if include_program_codes.value:
                                        data_fields.append('Program Code')
                                    if include_program_names.value:
                                        data_fields.append('Program Name')
                                    if include_school_names.value:
                                        data_fields.append('School Name')
                                    if include_submission_date.value:
                                        data_fields.append('Submission Date')
                                    if include_submitted_by.value:
                                        data_fields.append('Submitted By')
                                    
                                    if data_fields:
                                        ui.label('Auto-filled Fields:').style('font-weight: bold; color: #007bff; margin-bottom: 0.5rem;')
                                        for field in data_fields:
                                            ui.label(f'• {field} (auto-filled)').style('color: #6c757d; margin-left: 1rem; font-size: 0.9rem;')
                                        ui.separator().style('margin: 1rem 0;')
                                    
                                    ui.label('Custom Fields:').style('font-weight: bold; color: #28a745; margin-bottom: 0.5rem;')
                                    for field in field_list:
                                        field_name = field.get('name_input', {}).get('value', 'Unnamed Field') if hasattr(field.get('name_input', {}), 'value') else field.get('name', 'Unnamed Field')
                                        field_type = field.get('type_input', {}).get('value', 'text') if hasattr(field.get('type_input', {}), 'value') else field.get('type', 'text')
                                        required = field.get('required_input', {}).get('value', False) if hasattr(field.get('required_input', {}), 'value') else field.get('required', False)
                                        
                                        required_text = ' *' if required else ''
                                        type_icon = {
                                            'text': '📝', 'number': '🔢', 'email': '📧', 'date': '📅',
                                            'select': '📋', 'multiselect': '☑️', 'checkbox': '✅', 'textarea': '📄', 'file': '📎'
                                        }.get(field_type, '📝')
                                        
                                        ui.label(f'• {type_icon} {field_name} ({field_type}){required_text}').style('margin-left: 1rem; margin-bottom: 0.3rem;')
                            
                            # Update preview when data integration checkboxes change
                            for checkbox in [include_program_codes, include_program_names, include_school_names, include_submission_date, include_submitted_by]:
                                checkbox.on('change', lambda: update_preview())
                            
                            update_preview()  # Initial preview
                        
                        # Action Buttons
                        with ui.row().style('width: 100%; justify-content: space-between; gap: 1rem; margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #eee;'):
                            ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: #fff; padding: 1rem 2.5rem; border-radius: 8px; font-size: 1rem;')
                            
                            def create_criteria():
                                global current_user
                                if not criteria_name.value:
                                    ui.notify('Criteria name is required', color='negative')
                                    return
                                
                                # Prepare field definitions
                                fields_definition = []
                                
                                # Add data integration fields
                                if include_program_codes.value:
                                    fields_definition.append({
                                        'name': 'Program Code',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'program.code',
                                        'editable': False
                                    })
                                
                                if include_program_names.value:
                                    fields_definition.append({
                                        'name': 'Program Name',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'program.name',
                                        'editable': False
                                    })
                                
                                if include_program_types.value:
                                    fields_definition.append({
                                        'name': 'Program Type',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'program.type_full',
                                        'editable': False
                                    })
                                
                                if include_program_durations.value:
                                    fields_definition.append({
                                        'name': 'Program Duration',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'program.duration',
                                        'editable': False
                                    })
                                
                                if include_school_names.value:
                                    fields_definition.append({
                                        'name': 'School Name',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'school.name',
                                        'editable': False
                                    })
                                
                                if include_submission_date.value:
                                    fields_definition.append({
                                        'name': 'Submission Date',
                                        'type': 'date',
                                        'auto_fill': True,
                                        'source': 'system.submission_date',
                                        'editable': False
                                    })
                                
                                if include_submitted_by.value:
                                    fields_definition.append({
                                        'name': 'Submitted By',
                                        'type': 'text',
                                        'auto_fill': True,
                                        'source': 'system.submitted_by',
                                        'editable': False
                                    })
                                
                                # Add custom fields
                                for field in field_list:
                                    field_name = field.get('name_input', {}).value if hasattr(field.get('name_input', {}), 'value') else field.get('name', '')
                                    if not field_name:
                                        continue
                                    
                                    field_def = {
                                        'name': field_name,
                                        'type': field.get('type_input', {}).value if hasattr(field.get('type_input', {}), 'value') else field.get('type', 'text'),
                                        'required': field.get('required_input', {}).value if hasattr(field.get('required_input', {}), 'value') else field.get('required', False),
                                        'description': field.get('description_input', {}).value if hasattr(field.get('description_input', {}), 'value') else field.get('description', ''),
                                        'auto_fill': False,
                                        'editable': True
                                    }
                                    
                                    # Add validation rules
                                    if field_def['type'] == 'number' and 'validation' in field:
                                        validation = field['validation']
                                        field_def['validation'] = {
                                            'min': validation.get('min_val', {}).value if hasattr(validation.get('min_val', {}), 'value') else '',
                                            'max': validation.get('max_val', {}).value if hasattr(validation.get('max_val', {}), 'value') else '',
                                            'decimal_places': validation.get('decimal_places', {}).value if hasattr(validation.get('decimal_places', {}), 'value') else ''
                                        }
                                    
                                    # Add options for select fields
                                    if field_def['type'] in ['select', 'multiselect'] and 'options_input' in field:
                                        options_text = field['options_input'].value if hasattr(field['options_input'], 'value') else ''
                                        field_def['options'] = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
                                    
                                    fields_definition.append(field_def)
                                
                                if not fields_definition:
                                    ui.notify('Please add at least one field', color='negative')
                                    return
                                
                                # Create criteria document
                                criteria_doc = {
                                    'name': criteria_name.value,
                                    'description': criteria_description.value,
                                    'institution_id': inst_id,
                                    'academic_cycle_id': selected_year_id,
                                    'fields': fields_definition,
                                    'created_at': datetime.datetime.utcnow(),
                                    'created_by': current_user.get('email', 'admin'),
                                    'type': 'criteria',
                                    'version': '2.0',  # Enhanced version
                                    'settings': {
                                        'allow_program_filtering': True,
                                        'allow_school_filtering': True,
                                        'enable_data_export': True,
                                        'enable_analytics': True
                                    }
                                }
                                
                                try:
                                    result = criterias_col.insert_one(criteria_doc)
                                    
                                    # Log criteria creation
                                    log_audit_action(
                                        action='Created Enhanced Criteria',
                                        details=f'Advanced criteria "{criteria_name.value}" created with {len(fields_definition)} fields',
                                        institution_id=inst_id,
                                        entity_type='criteria',
                                        entity_id=str(result.inserted_id)
                                    )
                                    
                                    ui.notify(f'Enhanced criteria "{criteria_name.value}" created successfully!', color='positive')
                                    dialog.close()
                                    ui.navigate.to(f'/institution_admin/{inst_id}/criterias')
                                
                                except Exception as e:
                                    ui.notify(f'Error creating criteria: {str(e)}', color='negative')
                            
                            ui.button('Create Enhanced Criteria', on_click=create_criteria).style(f'background: {main_color}; color: #fff; padding: 1rem 2.5rem; border-radius: 8px; font-weight: bold; font-size: 1rem;')
                
                dialog.open()
                
            ui.button('Create Enhanced Criteria', on_click=open_create_dialog).style(f'background: {main_color}; color: #fff; margin-top: 2rem;')
        
        # Display existing criterias
        if selected_year_id:
            existing_criterias = list(criterias_col.find({
                'institution_id': inst_id, 
                'academic_cycle_id': selected_year_id
            }))
            
            if existing_criterias:
                ui.label(f'Existing Criterias ({len(existing_criterias)} found)').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-top: 3rem; margin-bottom: 1rem;')
                
                for criteria in existing_criterias:
                    with ui.card().style('width: 100%; margin-bottom: 1rem; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column().style('flex: 1;'):
                                criteria_name = criteria.get('name', 'Unnamed Criteria')
                                criteria_type = criteria.get('version', '1.0')
                                type_label = 'Enhanced' if criteria_type == '2.0' else 'Basic'
                                
                                ui.label(f"📋 {criteria_name}").style('font-size: 1.2rem; font-weight: bold; color: #2c3e50; margin-bottom: 0.5rem;')
                                ui.label(f"Type: {type_label} Criteria").style('font-size: 0.9rem; color: #007bff; margin-bottom: 0.3rem;')
                                
                                # Show field count and types
                                fields = criteria.get('fields', criteria.get('headers', []))
                                if fields:
                                    if isinstance(fields, list) and len(fields) > 0 and isinstance(fields[0], dict):
                                        # Enhanced criteria with field definitions
                                        auto_fill_count = len([f for f in fields if f.get('auto_fill', False)])
                                        custom_count = len(fields) - auto_fill_count
                                        ui.label(f"Fields: {len(fields)} total ({auto_fill_count} auto-filled, {custom_count} custom)").style('font-size: 0.8rem; color: #666;')
                                        
                                        # Show field types
                                        field_types = {}
                                        for field in fields:
                                            field_type = field.get('type', 'text')
                                            field_types[field_type] = field_types.get(field_type, 0) + 1
                                        
                                        type_summary = ', '.join([f"{count} {type}" for type, count in field_types.items()])
                                        ui.label(f"Types: {type_summary}").style('font-size: 0.8rem; color: #666;')
                                    else:
                                        # Basic criteria with simple headers
                                        ui.label(f"Columns: {len(fields)}").style('font-size: 0.8rem; color: #666;')
                                
                                created_at = criteria.get('created_at')
                                if created_at:
                                    ui.label(f"Created: {created_at.strftime('%Y-%m-%d %H:%M')}").style('font-size: 0.8rem; color: #888;')
                            
                            with ui.row().style('gap: 0.5rem;'):
                                # View/Edit button
                                ui.button('📊 View Data', on_click=lambda c_id=str(criteria['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/spreadsheets?criteria_id={c_id}')).style('background: #28a745; color: white; padding: 0.5rem 1rem;')
                                
                                # Edit button for enhanced criteria
                                if criteria.get('version') == '2.0':
                                    ui.button('✏️ Edit', on_click=lambda c_id=str(criteria['_id']): edit_criteria(c_id)).style('background: #ffc107; color: black; padding: 0.5rem 1rem;')
                                
                                # Delete button
                                def delete_criteria(criteria_id=str(criteria['_id']), criteria_name=criteria.get('name', '')):
                                    # Log criteria deletion
                                    log_audit_action(
                                        action='Deleted Criteria',
                                        details=f'Criteria "{criteria_name}" was deleted',
                                        institution_id=inst_id,
                                        entity_type='criteria',
                                        entity_id=criteria_id
                                    )
                                    
                                    criterias_col.delete_one({'_id': criteria['_id']})
                                    ui.notify(f'Criteria "{criteria_name}" deleted successfully!', color='positive')
                                    ui.navigate.to(f'/institution_admin/{inst_id}/criterias')
                                
                                ui.button('🗑️ Delete', on_click=delete_criteria).style('background: #dc3545; color: white; padding: 0.5rem 1rem;')
            #             else:
                ui.label('No criterias created yet for this academic year.').style('color: #888; margin-top: 2rem; font-style: italic;')
        else:
            ui.label('Please select an academic year to view criterias.').style('color: #c00; margin-top: 2rem; font-weight: bold;')
    
    def edit_criteria(criteria_id):
        # TODO: Implement criteria editing functionality
        ui.notify('Criteria editing functionality coming soon!', color='info')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/audit_logs')
def institution_admin_audit_logs(inst_id: str):
    def content(inst, main_color):
        global current_user
        ui.label('Audit Logs').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
        
        # Get current user's context to determine filtering
        current_user_data = users_col.find_one({'email': current_user['email']}) if current_user else None
        
        # Build context info and filter based on user's role
        context_info = "All Institution Activities"
        audit_filter = {'institution_id': inst_id}
        
        if current_user_data:
            role = current_user_data.get('role', '')
            
            if role == 'School Admin' and current_user_data.get('school_id'):
                school_doc = schools_col.find_one({'_id': current_user_data['school_id']})
                school_name = school_doc.get('name', 'Unknown') if school_doc else 'Unknown'
                context_info = f"Audit Logs for School: {school_name}"
                # Filter logs related to this school
                audit_filter['$or'] = [
                    {'entity_type': 'school', 'entity_id': str(current_user_data['school_id'])},
                    {'entity_type': 'program', 'details': {'$regex': school_name, '$options': 'i'}}
                ]
                
            elif role == 'Program Admin' and current_user_data.get('program_id'):
                program_doc = programs_col.find_one({'_id': current_user_data['program_id']})
                program_name = program_doc.get('name', 'Unknown') if program_doc else 'Unknown'
                context_info = f"Audit Logs for Program: {program_name}"
                # Filter logs related to this program
                audit_filter['$or'] = [
                    {'entity_type': 'program', 'entity_id': str(current_user_data['program_id'])},
                    {'details': {'$regex': program_name, '$options': 'i'}}
                ]
                
            elif role == 'Department Admin' and current_user_data.get('department_id'):
                dept_doc = schools_col.find_one({'_id': current_user_data['department_id']})
                dept_name = dept_doc.get('name', 'Unknown') if dept_doc else 'Unknown'
                context_info = f"Audit Logs for Department: {dept_name}"
                # Filter logs related to this department
                audit_filter['$or'] = [
                    {'entity_type': 'department', 'entity_id': str(current_user_data['department_id'])},
                    {'details': {'$regex': dept_name, '$options': 'i'}}
                ]
        
        # Show context information
        ui.label(context_info).style(f'font-size: 1.1rem; color: {main_color}; margin-bottom: 1.5rem; font-weight: 500;')
        
        # Add date filter controls
        with ui.row().style('width: 100%; margin-bottom: 1rem; gap: 1rem; align-items: center;'):
            ui.label('Filter by date:').style('font-weight: bold;')
            from_date = ui.date('From Date').style('max-width: 150px;')
            to_date = ui.date('To Date').style('max-width: 150px;')
            
            def apply_date_filter():
                # Refresh the logs with date filter
                ui.update()
            
            ui.button('Filter', on_click=apply_date_filter).style(f'background: {main_color}; color: #fff;')
            ui.button('Clear', on_click=lambda: (setattr(from_date, 'value', None), setattr(to_date, 'value', None), ui.update())).style('background: #666; color: #fff;')
        
        # Add date filter to query if dates are selected
        if hasattr(from_date, 'value') and from_date.value:
            import datetime
            #             try:
                # Convert string to date if needed
                if isinstance(from_date.value, str):
                    from datetime import datetime as dt
                    from_date_obj = dt.strptime(from_date.value, '%Y-%m-%d').date()
                else:
                    from_date_obj = from_date.value
                from_datetime = datetime.datetime.combine(from_date_obj, datetime.time.min)
                audit_filter['timestamp'] = {'$gte': from_datetime}
            except (ValueError, TypeError):
                pass  # Skip invalid dates
        
        if hasattr(to_date, 'value') and to_date.value:
            import datetime
            #             try:
                # Convert string to date if needed
                if isinstance(to_date.value, str):
                    from datetime import datetime as dt
                    to_date_obj = dt.strptime(to_date.value, '%Y-%m-%d').date()
                else:
                    to_date_obj = to_date.value
                to_datetime = datetime.datetime.combine(to_date_obj, datetime.time.max)
                if 'timestamp' in audit_filter:
                    audit_filter['timestamp']['$lte'] = to_datetime
                else:
                    audit_filter['timestamp'] = {'$lte': to_datetime}
            except (ValueError, TypeError):
                pass  # Skip invalid dates
        
        # Get audit logs from database
        audit_logs = list(audit_logs_col.find(audit_filter).sort('timestamp', -1).limit(100))
        
        if audit_logs:
            # Show total count
            total_logs = audit_logs_col.count_documents(audit_filter)
            ui.label(f'Showing latest {len(audit_logs)} of {total_logs} total logs').style('color: #666; margin-bottom: 1rem; font-style: italic;')
            
            # Create table headers
            with ui.card().style('width: 100%; margin-bottom: 1rem;'):
                with ui.row().style(f'width: 100%; background: {main_color}; color: #fff; padding: 1rem; font-weight: bold;'):
                    ui.label('Timestamp').style('flex: 2; font-size: 1rem;')
                    ui.label('User').style('flex: 2; font-size: 1rem;')
                    ui.label('Action').style('flex: 1.5; font-size: 1rem;')
                    ui.label('Details').style('flex: 3; font-size: 1rem;')
                    ui.label('IP Address').style('flex: 1.5; font-size: 1rem;')
            
            # Display audit logs
            for log in audit_logs:
                with ui.card().style('width: 100%; margin-bottom: 0.5rem; background: #f8f9fa;'):
                    with ui.row().style('width: 100%; padding: 1rem; align-items: center;'):
                        # Format timestamp
                        timestamp = log.get('timestamp', '')
                        if timestamp:
                            timestamp_str = timestamp.strftime('%Y-%m-%d %H:%M:%S') if hasattr(timestamp, 'strftime') else str(timestamp)
                        else:
                            timestamp_str = 'Unknown'
                        
                        ui.label(timestamp_str).style('flex: 2; font-size: 0.9rem;')
                        ui.label(log.get('user_email', 'Unknown')).style('flex: 2; font-size: 0.9rem;')
                        
                        # Action with color coding
                        action = log.get('action', 'Unknown')
                        action_color = '#666'
                        if 'Create' in action:
                            action_color = '#2e7d32'
                        elif 'Delete' in action:
                            action_color = '#d32f2f'
                        elif 'Update' in action or 'Edit' in action:
                            action_color = '#f57c00'
                        elif 'Login' in action:
                            action_color = '#1976d2'
                        
                        ui.label(action).style(f'flex: 1.5; font-size: 0.9rem; font-weight: bold; color: {action_color};')
                        ui.label(log.get('details', '')).style('flex: 3; font-size: 0.9rem; color: #666;')
                        ui.label(log.get('ip_address', '')).style('flex: 1.5; font-size: 0.9rem; color: #888;')
        else:
            ui.label('No audit logs found for the selected criteria.').style('color: #666; margin-top: 2rem; font-style: italic; text-align: center;')
        
        # Export functionality
        with ui.row().style('width: 100%; justify-content: center; margin-top: 2rem;'):
            def export_logs():
                # In a real implementation, you would generate CSV/Excel file
                ui.notify('Audit logs export functionality would be implemented here', color='info')
            
            ui.button('Export Logs', icon='download', on_click=export_logs).style(f'background: {main_color}; color: #fff;')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/users')
def institution_admin_users(inst_id: str):
    def content(inst, main_color):
        global current_user
        ui.label('Manage Users').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
        
        # Get current user's context to determine filtering
        current_user_data = users_col.find_one({'email': current_user['email']}) if current_user else None
        
        # Build filter based on user's role and context
        user_filter = {'institution_id': inst_id}
        context_info = "All Users in Institution"
        
        if current_user_data:
            role = current_user_data.get('role', '')
            
            if role == 'School Admin' and current_user_data.get('school_id'):
                user_filter['school_id'] = current_user_data['school_id']
                school_doc = schools_col.find_one({'_id': current_user_data['school_id']})
                school_name = school_doc.get('name', 'Unknown') if school_doc else 'Unknown'
                context_info = f"Users in School: {school_name}"
                
            elif role == 'Program Admin' and current_user_data.get('program_id'):
                user_filter['program_id'] = current_user_data['program_id']
                program_doc = programs_col.find_one({'_id': current_user_data['program_id']})
                program_name = program_doc.get('name', 'Unknown') if program_doc else 'Unknown'
                context_info = f"Users in Program: {program_name}"
                
            elif role == 'Department Admin' and current_user_data.get('department_id'):
                user_filter['department_id'] = current_user_data['department_id']
                dept_doc = schools_col.find_one({'_id': current_user_data['department_id']})
                dept_name = dept_doc.get('name', 'Unknown') if dept_doc else 'Unknown'
                context_info = f"Users in Department: {dept_name}"
        
        # Show context information
        ui.label(context_info).style(f'font-size: 1.1rem; color: {main_color}; margin-bottom: 1.5rem; font-weight: 500;')
        
        # Get filtered users (exclude platform owners)
        users = list(users_col.find({
            **user_filter,
            'role': {'$ne': 'Platform Owner'}
        # }))
        
        if users:
            # Create table headers
            with ui.card().style('width: 100%; margin-bottom: 1rem;'):
                with ui.row().style(f'width: 100%; background: {main_color}; color: #fff; padding: 1rem; font-weight: bold;'):
                    ui.label('Name').style('flex: 2; font-size: 1rem;')
                    ui.label('Email').style('flex: 3; font-size: 1rem;')
                    ui.label('Role').style('flex: 2; font-size: 1rem;')
                    ui.label('Context').style('flex: 2; font-size: 1rem;')
                    ui.label('Actions').style('flex: 1; font-size: 1rem;')
            
            # Display users
            for user in users:
                with ui.card().style('width: 100%; margin-bottom: 0.5rem; background: #f8f9fa;'):
                    with ui.row().style('width: 100%; padding: 1rem; align-items: center;'):
                        # Name
                        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                        if not full_name:
                            full_name = 'No name set'
                        ui.label(full_name).style('flex: 2; font-size: 0.9rem;')
                        
                        # Email
                        ui.label(user.get('email', '')).style('flex: 3; font-size: 0.9rem;')
                        
                        # Role
                        ui.label(user.get('role', '')).style('flex: 2; font-size: 0.9rem;')
                        
                        # Context (show school/program/department)
                        context_text = 'Institution'
                        if user.get('school_id'):
                            school_doc = schools_col.find_one({'_id': user['school_id']})
                            context_text = f"School: {school_doc.get('name', 'Unknown') if school_doc else 'Unknown'}"
                        elif user.get('program_id'):
                            program_doc = programs_col.find_one({'_id': user['program_id']})
                            context_text = f"Program: {program_doc.get('name', 'Unknown') if program_doc else 'Unknown'}"
                        elif user.get('department_id'):
                            dept_doc = schools_col.find_one({'_id': user['department_id']})
                            context_text = f"Dept: {dept_doc.get('name', 'Unknown') if dept_doc else 'Unknown'}"
                        
                        ui.label(context_text).style('flex: 2; font-size: 0.9rem; color: #666;')
                        
                        # Actions
                        def delete_user(user_id=str(user['_id']), user_email=user.get('email', '')):
                            # Log user deletion before deleting
                            user_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                            if not user_name:
                                user_name = user_email
                            
                            log_audit_action(
                                action='Deleted User',
                                details=f'User "{user_name}" ({user_email}) with role "{user.get("role", "Unknown")}" was deleted',
                                institution_id=inst_id,
                                entity_type='user',
                                entity_id=user_id
                            )
                            
                            users_col.delete_one({'_id': user['_id']})
                            ui.notify(f'User "{user_email}" deleted successfully!', color='positive')
                            ui.navigate.to(f'/institution_admin/{inst_id}/users')
                        
                        ui.button('Delete', on_click=delete_user).style('background: #dc3545; color: #fff; font-size: 0.8rem; padding: 0.3rem 0.8rem;')
        else:
            ui.label('No users found in this context.').style('color: #666; margin-top: 2rem; font-style: italic;')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/spreadsheets')
def institution_admin_spreadsheets(inst_id: str):
    def content(inst, main_color):
        from nicegui import app
        from bson import ObjectId
        import json
        
        # Get query parameters for specific criteria
        try:
            from nicegui import context
            query_params = context.get().request.query_params
            criteria_id = query_params.get('criteria_id', '')
        except:
            criteria_id = ''
        
        # Enhanced CSS for modern spreadsheet interface
        # ui.add_head_html("""
        # <style>
        # .enhanced-spreadsheet {
            #             width: 100%;
            #             height: 80vh;
            #             border: 1px solid #ddd;
            #             border-radius: 8px;
            #             overflow: hidden;
            #             background: white;
            #             box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        # }
        # .spreadsheet-toolbar {
            #             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            #             padding: 1rem;
            #             color: white;
            #             display: flex;
            #             align-items: center;
            #             justify-content: space-between;
            #             gap: 1rem;
        # }
        # .toolbar-section {
            #             display: flex;
            #             align-items: center;
            #             gap: 0.5rem;
        # }
        # .toolbar-btn {
            #             background: rgba(255,255,255,0.2);
            #             color: white;
            #             border: 1px solid rgba(255,255,255,0.3);
            #             padding: 0.5rem 1rem;
            #             border-radius: 4px;
            #             cursor: pointer;
            #             transition: all 0.2s;
            #             font-size: 0.9rem;
        # }
        # .toolbar-btn:hover {
            #             background: rgba(255,255,255,0.3);
            #             border-color: rgba(255,255,255,0.5);
        # }
        # .sheet-tabs-container {
            #             background: #f8f9fa;
            #             border-bottom: 1px solid #dee2e6;
            #             padding: 0.5rem 1rem;
            #             display: flex;
            #             align-items: center;
            #             gap: 0.5rem;
            #             overflow-x: auto;
        # }
        # .sheet-tab {
            #             padding: 0.5rem 1.5rem;
            #             background: white;
            #             border: 1px solid #dee2e6;
            #             border-radius: 6px 6px 0 0;
            #             cursor: pointer;
            #             white-space: nowrap;
            #             font-weight: 500;
            #             transition: all 0.2s;
            #             min-width: 120px;
            #             text-align: center;
            #             position: relative;
        # }
        # .sheet-tab:hover {
            #             background: #e9ecef;
            #             transform: translateY(-2px);
        # }
        # .sheet-tab.active {
            #             background: #007bff;
            #             color: white;
            #             border-color: #007bff;
            #             box-shadow: 0 -2px 8px rgba(0,123,255,0.3);
        # }
        # .sheet-tab .tab-type {
            #             font-size: 0.75rem;
            #             opacity: 0.8;
            #             display: block;
            #             margin-top: 0.2rem;
        # }
        # .grid-container {
            #             height: calc(100% - 140px);
            #             overflow: auto;
            #             position: relative;
        # }
        # .data-grid {
            #             border-collapse: collapse;
            #             width: 100%;
            #             font-size: 0.9rem;
        # }
        # .data-grid th,
        # .data-grid td {
            #             border: 1px solid #e9ecef;
            #             padding: 0.5rem;
            #             text-align: left;
            #             vertical-align: middle;
            #             min-width: 120px;
            #             max-width: 200px;
        # }
        # .data-grid th {
            #             background: #f8f9fa;
            #             font-weight: 600;
            #             text-align: center;
            #             position: sticky;
            #             top: 0;
            #             z-index: 10;
            #             border-bottom: 2px solid #dee2e6;
        # }
        # .data-grid .row-index {
            #             background: #f8f9fa;
            #             text-align: center;
            #             font-weight: 600;
            #             min-width: 50px;
            #             position: sticky;
            #             left: 0;
            #             z-index: 5;
        # }
        # .field-input {
            #             width: 100%;
            #             border: none;
            #             background: transparent;
            #             padding: 0.25rem;
            #             font-size: 0.9rem;
        # }
        # .field-input:focus {
            #             background: white;
            #             border: 2px solid #007bff;
            #             border-radius: 4px;
            #             outline: none;
        # }
        # .auto-fill-cell {
            #             background: #e8f5e9 !important;
            #             color: #2e7d32;
            #             font-weight: 500;
        # }
        # .required-field {
            #             border-left: 4px solid #dc3545;
        # }
        # .field-number {
            #             text-align: right;
        # }
        # .field-date {
            #             min-width: 140px;
        # }
        # .field-select {
            #             background: white;
            #             border: 1px solid #ced4da;
            #             border-radius: 4px;
            #             padding: 0.25rem;
            #             width: 100%;
        # }
        # .validation-error {
            #             background: #ffebee !important;
            #             border: 2px solid #f44336 !important;
        # }
        # .data-summary {
            #             background: #f8f9fa;
            #             padding: 1rem;
            #             border-top: 1px solid #dee2e6;
            #             display: flex;
            #             align-items: center;
            #             justify-content: space-between;
            #             font-size: 0.9rem;
        # }
        # .summary-item {
            #             display: flex;
            #             align-items: center;
            #             gap: 0.5rem;
        # }
        # .status-indicator {
            #             width: 12px;
            #             height: 12px;
            #             border-radius: 50%;
            #             display: inline-block;
        # }
        # .status-auto { background: #4caf50; }
        # .status-filled { background: #2196f3; }
        # .status-empty { background: #f44336; }
        # .status-pending { background: #ff9800; }
        # </style>
        # # """)
        
        # Get academic year
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        
        def on_year_change(e):
            app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
            ui.update()
        
        # Header with title and controls
        with ui.row().style('width: 100%; align-items: center; justify-content: space-between; margin-bottom: 1.5rem;'):
            ui.label('📊 Enhanced Spreadsheets').style(f'font-size: 1.8rem; font-weight: bold; color: {main_color};')
            
            with ui.row().style('align-items: center; gap: 1rem;'):
                ui.label('Academic Year:').style(f'font-weight: bold; color: {main_color};')
                if year_options:
                    selected_name = None
                    for n, i in name_to_id.items():
                        if i == selected_year_id:
                            selected_name = n
                            break
                    year_select = ui.select(options=year_options, value=selected_name, on_change=lambda e: (on_year_change(e), ui.update()))
                    year_select.style(f'background: {main_color}; color: white; min-width: 150px; border-radius: 6px;')
        
        if not selected_year_id:
            with ui.card().style('width: 100%; padding: 3rem; text-align: center; background: #f8f9fa;'):
                ui.icon('table_chart', size='4rem').style('color: #ccc; margin-bottom: 1rem;')
                ui.label('Please select an academic year to view spreadsheets.').style('font-size: 1.2rem; color: #666;')
            return
        
        # Get criterias and extended profiles for tabs
        criterias = list(criterias_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id}))
        extended_profiles = list(extended_profiles_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id}))
        
        if not criterias and not extended_profiles:
            with ui.card().style('width: 100%; padding: 3rem; text-align: center; background: #f8f9fa;'):
                ui.icon('note_add', size='4rem').style('color: #ccc; margin-bottom: 1rem;')
                ui.label('No criterias or extended profiles found.').style('font-size: 1.2rem; color: #666; margin-bottom: 1rem;')
                ui.label('Create criterias or extended profiles first to generate spreadsheets.').style('color: #888;')
                with ui.row().style('gap: 1rem; margin-top: 2rem;'):
                    ui.button('Create Criteria', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/criterias')).style(f'background: {main_color}; color: white; padding: 1rem 2rem;')
                    ui.button('Create Extended Profile', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/extended_profiles')).style('background: #28a745; color: white; padding: 1rem 2rem;')
            return
        
        # Initialize active sheet
        all_sheets = []
        for criteria in criterias:
            all_sheets.append({
                'id': str(criteria['_id']),
                'name': criteria['name'],
                'type': 'criteria',
                'enhanced': criteria.get('version') == '2.0',
                'data': criteria
            })
        
        for profile in extended_profiles:
            all_sheets.append({
                'id': str(profile['_id']),
                'name': profile['name'],
                'type': 'profile',
                'enhanced': True,
                'data': profile
            })
        
        # Determine active sheet
        active_sheet = None
        if criteria_id:
            active_sheet = next((s for s in all_sheets if s['id'] == criteria_id), None)
        
        if not active_sheet and all_sheets:
            active_sheet = all_sheets[0]
        
        # Spreadsheet interface
        with ui.card().style('width: 100%; padding: 0; margin: 0;').classes('enhanced-spreadsheet'):
            # Toolbar
            with ui.row().style('width: 100%;').classes('spreadsheet-toolbar'):
                with ui.row().classes('toolbar-section'):
                    ui.icon('save', size='1.2rem')
                    ui.label('Auto-Save: ON').style('font-size: 0.9rem;')
                
                if active_sheet:
                    ui.label(f"📋 {active_sheet['name']}").style('font-size: 1.1rem; font-weight: bold;')
                
                with ui.row().classes('toolbar-section'):
                    ui.button('🔄 Refresh', on_click=lambda: refresh_data()).classes('toolbar-btn')
                    ui.button('📊 Analytics', on_click=lambda: show_analytics()).classes('toolbar-btn')
                    ui.button('📤 Export', on_click=lambda: export_data()).classes('toolbar-btn')
            
            # Sheet tabs
            tabs_container = ui.row().style('width: 100%;').classes('sheet-tabs-container')
            
            with tabs_container:
                for sheet in all_sheets:
                    is_active = active_sheet and sheet['id'] == active_sheet['id']
                    tab_class = 'sheet-tab active' if is_active else 'sheet-tab'
                    
                    with ui.column().classes(tab_class).on('click', lambda s=sheet: switch_sheet(s)):
                        ui.label(sheet['name']).style('font-weight: 600; margin: 0;')
                        type_label = 'Enhanced' if sheet['enhanced'] else 'Basic'
                        sheet_type = sheet['type'].title()
                        ui.label(f'{sheet_type} • {type_label}').classes('tab-type')
            
            # Grid container
            grid_container = ui.column().style('width: 100%; height: 100%;').classes('grid-container')
            
            def render_sheet_data():
                grid_container.clear()
                
                if not active_sheet:
                    with grid_container:
                        ui.label('No sheet selected').style('padding: 2rem; text-align: center; color: #666;')
                    return
                
                sheet_data = active_sheet['data']
                
                if active_sheet['enhanced'] and active_sheet['type'] == 'criteria':
                    render_enhanced_criteria_sheet(sheet_data, grid_container, main_color)
                elif active_sheet['type'] == 'criteria':
                    render_basic_criteria_sheet(sheet_data, grid_container, main_color)
                else:  # extended profile
                    render_profile_sheet(sheet_data, grid_container, main_color)
            
            def switch_sheet(sheet):
                nonlocal active_sheet
                active_sheet = sheet
                ui.navigate.to(f'/institution_admin/{inst_id}/spreadsheets?criteria_id={sheet["id"]}')
            
            def refresh_data():
                ui.notify('Data refreshed successfully!', color='positive')
                render_sheet_data()
            
            def show_analytics():
                ui.notify('Analytics feature coming soon!', color='info')
            
            def export_data():
                ui.notify('Export feature coming soon!', color='info')
            
            render_sheet_data()
        
        # Data summary footer
        with ui.row().style('width: 100%; margin-top: 1rem;').classes('data-summary'):
            with ui.row().classes('summary-item'):
                ui.element('span').classes('status-indicator status-auto')
                ui.label('Auto-filled: 0')
            
            with ui.row().classes('summary-item'):
                ui.element('span').classes('status-indicator status-filled')
                ui.label('Completed: 0')
            
            with ui.row().classes('summary-item'):
                ui.element('span').classes('status-indicator status-pending')
                ui.label('Pending: 0')
            
            with ui.row().classes('summary-item'):
                ui.element('span').classes('status-indicator status-empty')
                ui.label('Empty: 0')
    
    def render_enhanced_criteria_sheet(criteria_data, container, main_color):
        """Render enhanced criteria with typed fields and validation"""
        fields = criteria_data.get('fields', [])
        criteria_id = str(criteria_data['_id'])
        
        with container:
            # Enhanced toolbar for sheet management
            with ui.row().style('width: 100%; padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #dee2e6; gap: 1rem; align-items: center;'):
                ui.label(f"📋 {criteria_data.get('name', 'Untitled Criteria')}").style('font-size: 1.2rem; font-weight: bold; color: #333;')
                
                with ui.row().style('gap: 0.5rem; margin-left: auto;'):
                    ui.button('➕ Add Row', on_click=lambda: add_new_row()).style(f'background: {main_color}; color: white; padding: 0.5rem 1rem;')
                    ui.button('🗑️ Remove Last Row', on_click=lambda: remove_last_row()).style('background: #dc3545; color: white; padding: 0.5rem 1rem;')
                    ui.button('💾 Save All', on_click=lambda: save_all_data()).style('background: #28a745; color: white; padding: 0.5rem 1rem;')
                    ui.button('🔄 Reset to Programs', on_click=lambda: reset_to_programs()).style('background: #ffc107; color: black; padding: 0.5rem 1rem;')
            
            # Get programs for this academic year to populate initial rows
            programs = list(programs_col.find({
                'institution_id': inst_id, 
                'academic_cycle_id': criteria_data.get('academic_cycle_id')
            }))
            
            # Initialize spreadsheet data if not exists
            if not hasattr(app.storage, 'spreadsheet_data'):
                app.storage.spreadsheet_data = {}
            
            spreadsheet_key = f"{criteria_id}_{inst_id}"
            if spreadsheet_key not in app.storage.spreadsheet_data:
                # Initialize with program data
                initial_rows = []
                for idx, program in enumerate(programs):
                    row_data = {'_row_id': f"program_{program['_id']}", '_program_id': str(program['_id'])}
                    for field in fields:
                        if field.get('auto_fill'):
                            row_data[field['name']] = get_auto_fill_value(field, program)
                        else:
                            row_data[field['name']] = ''
                    initial_rows.append(row_data)
                
                # Add some empty rows for manual entry
                for i in range(5):  # Add 5 empty rows
                    row_data = {'_row_id': f"manual_{i}", '_program_id': None}
                    for field in fields:
                        row_data[field['name']] = ''
                    initial_rows.append(row_data)
                
                app.storage.spreadsheet_data[spreadsheet_key] = {
                    'rows': initial_rows,
                    'field_definitions': fields
                }
            
            current_data = app.storage.spreadsheet_data[spreadsheet_key]
            
            # Scrollable grid container
            with ui.scroll_area().style('width: 100%; height: 600px; border: 1px solid #dee2e6;'):
                with ui.element('table').classes('data-grid').style('width: 100%; border-collapse: collapse;'):
                    # Enhanced header row
                    with ui.element('thead'):
                        with ui.element('tr').style('background: #f8f9fa; position: sticky; top: 0; z-index: 10;'):
                            with ui.element('th').style('min-width: 60px; padding: 0.75rem; border: 1px solid #dee2e6; text-align: center; font-weight: bold;'):
                                ui.label('Row')
                            with ui.element('th').style('min-width: 100px; padding: 0.75rem; border: 1px solid #dee2e6; text-align: center; font-weight: bold;'):
                                ui.label('Type')
                            
                            for field in fields:
                                field_name = field.get('name', 'Unnamed')
                                field_type = field.get('type', 'text')
                                required_indicator = ' *' if field.get('required') else ''
                                auto_fill_indicator = ' 🔒' if field.get('auto_fill') else ''
                                
                                header_style = 'min-width: 150px; padding: 0.75rem; border: 1px solid #dee2e6; text-align: center; font-weight: bold;'
                                if field.get('auto_fill'):
                                    header_style += ' background: #e8f5e9; color: #2e7d32;'
                                
                                header_text = f"{field_name}{required_indicator}{auto_fill_indicator}"
                                type_text = f"({field_type})"
                                
                                with ui.element('th').style(header_style):
                                    ui.label(header_text).style('font-weight: bold; margin: 0;')
                                    ui.label(type_text).style('font-size: 0.75rem; opacity: 0.7; margin: 0;')
                    
                    # Data rows
                    with ui.element('tbody'):
                        rows_container = ui.column().style('width: 100%;')
                        
                        def render_all_rows():
                            rows_container.clear()
                            
                            with rows_container:
                                for row_idx, row_data in enumerate(current_data['rows']):
                                    render_data_row(row_idx, row_data, fields, programs, main_color)
                        
                        def render_data_row(row_idx, row_data, fields, programs, main_color):
                            row_type = "Auto-filled" if row_data.get('_program_id') else "Manual Entry"
                            row_style = 'border-bottom: 1px solid #dee2e6;'
                            
                            if row_data.get('_program_id'):
                                row_style += ' background: rgba(76, 175, 80, 0.05);'  # Light green for program rows
                            
                            with ui.element('tr').style(row_style):
                                # Row number
                                with ui.element('td').style('padding: 0.5rem; border: 1px solid #dee2e6; text-align: center; font-weight: bold; background: #f8f9fa;'):
                                    ui.label(str(row_idx + 1))
                                
                                # Row type
                                type_color = '#2e7d32' if row_data.get('_program_id') else '#1976d2'
                                with ui.element('td').style(f'padding: 0.5rem; border: 1px solid #dee2e6; text-align: center; color: {type_color}; font-size: 0.8rem;'):
                                    ui.label(row_type)
                                
                                # Field cells
                                for field in fields:
                                    render_enhanced_field_cell(field, row_data, row_idx, programs, main_color)
                        
                        def render_enhanced_field_cell(field, row_data, row_idx, programs, main_color):
                            field_name = field.get('name', '')
                            field_type = field.get('type', 'text')
                            cell_value = row_data.get(field_name, '')
                            
                        def render_editable_field(field, row_data, row_idx, field_name, cell_value):
                            field_type = field.get('type', 'text')
                            
                            if field_type == 'number':
                                number_input = ui.input(
                                    value=str(cell_value) if cell_value else '',
                                    placeholder='0'
                                ).style('width: 100%; border: none; background: transparent; text-align: right;').props('type=number')
                                
                                def on_number_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                number_input.on('change', on_number_change)
                            
                            elif field_type == 'select':
                                options = field.get('options', [])
                                select_input = ui.select(
                                    options=options,
                                    value=cell_value if cell_value in options else None
                                ).style('width: 100%; background: transparent; border: none;')
                                
                                def on_select_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                select_input.on('change', on_select_change)
                            
                            elif field_type == 'checkbox':
                                checkbox_input = ui.checkbox(value=bool(cell_value)).style('margin: 0;')
                                
                                def on_checkbox_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                checkbox_input.on('change', on_checkbox_change)
                            
                            elif field_type == 'date':
                                date_input = ui.input(
                                    value=str(cell_value) if cell_value else '',
                                    placeholder='YYYY-MM-DD'
                                ).style('width: 100%; border: none; background: transparent;').props('type=date')
                                
                                def on_date_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                date_input.on('change', on_date_change)
                            
                            elif field_type == 'textarea':
                                textarea_input = ui.textarea(
                                    value=str(cell_value) if cell_value else '',
                                    placeholder='Enter text...'
                                ).style('width: 100%; border: none; background: transparent; min-height: 40px; resize: vertical;')
                                
                                def on_textarea_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                textarea_input.on('change', on_textarea_change)
                            
                            else:  # text, email, etc.
                                text_input = ui.input(
                                    value=str(cell_value) if cell_value else '',
                                    placeholder=f'Enter {field_type}...'
                                ).style('width: 100%; border: none; background: transparent;')
                                
                                if field_type == 'email':
                                    text_input.props('type=email')
                                
                                def on_text_change(e, row=row_idx, fname=field_name):
                                    current_data['rows'][row][fname] = e.value
                                    auto_save_data()
                                
                                text_input.on('change', on_text_change)
                        
                        # Row management functions
                        def add_new_row():
                            new_row = {'_row_id': f"manual_{len(current_data['rows'])}", '_program_id': None}
                            for field in fields:
                                new_row[field['name']] = ''
                            current_data['rows'].append(new_row)
                            render_all_rows()
                            ui.notify('New row added!', color='positive')
                        
                        def remove_last_row():
                            if current_data['rows']:
                                removed_row = current_data['rows'].pop()
                                render_all_rows()
                                row_type = "program" if removed_row.get('_program_id') else "manual"
                                ui.notify(f'Last {row_type} row removed!', color='info')
                            else:
                                ui.notify('No rows to remove!', color='warning')
                        
                        def save_all_data():
                            # Save to database
                            try:
                                save_spreadsheet_data_to_db(criteria_id, current_data)
                                ui.notify('All data saved successfully!', color='positive')
                            except Exception as e:
                                ui.notify(f'Error saving data: {str(e)}', color='negative')
                        
                        def reset_to_programs():
                            # Reset to program-based rows only
                            initial_rows = []
                            for idx, program in enumerate(programs):
                                row_data = {'_row_id': f"program_{program['_id']}", '_program_id': str(program['_id'])}
                                for field in fields:
                                    if field.get('auto_fill'):
                                        row_data[field['name']] = get_auto_fill_value(field, program)
                                    else:
                                        row_data[field['name']] = ''
                                initial_rows.append(row_data)
                            
                            current_data['rows'] = initial_rows
                            render_all_rows()
                            ui.notify('Reset to program-based rows!', color='info')
                        
                        def auto_save_data():
                            # Auto-save functionality (you can implement database saving here)
                            pass  # For now, just keep in memory
                        
                        # Initial render
                        render_all_rows()
            
            # Summary statistics
            with ui.row().style('width: 100%; padding: 1rem; background: #f8f9fa; border-top: 1px solid #dee2e6; gap: 2rem;'):
                total_rows = len(current_data['rows'])
                program_rows = len([r for r in current_data['rows'] if r.get('_program_id')])
                manual_rows = total_rows - program_rows
                
                with ui.column().style('text-align: center;'):
                    ui.label(str(total_rows)).style('font-size: 1.5rem; font-weight: bold; color: #333;')
                    ui.label('Total Rows').style('font-size: 0.9rem; color: #666;')
                
                with ui.column().style('text-align: center;'):
                    ui.label(str(program_rows)).style('font-size: 1.5rem; font-weight: bold; color: #2e7d32;')
                    ui.label('Program Rows').style('font-size: 0.9rem; color: #666;')
                
                with ui.column().style('text-align: center;'):
                    ui.label(str(manual_rows)).style('font-size: 1.5rem; font-weight: bold; color: #1976d2;')
                    ui.label('Manual Rows').style('font-size: 0.9rem; color: #666;')
                
                with ui.column().style('text-align: center;'):
                    filled_cells = sum(1 for row in current_data['rows'] for field in fields if str(row.get(field['name'], '')).strip())
                    total_cells = len(current_data['rows']) * len(fields)
                    completion_pct = round((filled_cells / total_cells * 100) if total_cells > 0 else 0, 1)
                    ui.label(f"{completion_pct}%").style('font-size: 1.5rem; font-weight: bold; color: #ff9800;')
                    ui.label('Completion').style('font-size: 0.9rem; color: #666;')
    
    def render_field_input(field, program, criteria_id, row_idx):
        """Render appropriate input based on field type"""
        field_type = field.get('type', 'text')
        field_name = field.get('name', '')
        
        # Get saved value or auto-fill value
        saved_value = get_saved_value(criteria_id, row_idx, field_name)
        auto_fill_value = get_auto_fill_value(field, program)
        
        display_value = saved_value if saved_value is not None else auto_fill_value
        
        if field.get('auto_fill'):
            # Read-only auto-filled field
            ui.label(str(display_value) if display_value is not None else '').style('font-weight: 500;')
        elif field_type == 'number':
            # Number input with validation
            number_input = ui.input(
                value=str(display_value) if display_value is not None else '',
                placeholder='Enter number'
            ).classes('field-input field-number')
            
            # Add validation
            validation = field.get('validation', {})
            if validation.get('min'):
                number_input.props(f'min={validation["min"]}')
            if validation.get('max'):
                number_input.props(f'max={validation["max"]}')
            
            number_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
        
        elif field_type == 'select':
            # Dropdown selection
            options = field.get('options', [])
            select_input = ui.select(
                options=options,
                value=display_value if display_value in options else None
            ).classes('field-select')
            
            select_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
        
        elif field_type == 'checkbox':
            # Checkbox input
            checkbox_input = ui.checkbox(value=bool(display_value)).style('margin: 0;')
            checkbox_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
        
        elif field_type == 'date':
            # Date input
            date_input = ui.input(
                value=str(display_value) if display_value else '',
                placeholder='YYYY-MM-DD'
            ).classes('field-input field-date').props('type=date')
            
            date_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
        
        elif field_type == 'textarea':
            # Text area
            textarea_input = ui.textarea(
                value=str(display_value) if display_value else '',
                placeholder='Enter detailed text'
            ).classes('field-input').style('min-height: 60px; resize: vertical;')
            
            textarea_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
        
        else:  # text, email, etc.
            # Regular text input
            text_input = ui.input(
                value=str(display_value) if display_value else '',
                placeholder=f'Enter {field_type}'
            ).classes('field-input')
            
            if field_type == 'email':
                text_input.props('type=email')
            
            text_input.on('change', lambda e: save_value(criteria_id, row_idx, field_name, e.value))
    
    def get_auto_fill_value(field, program):
        """Get auto-fill value based on field source"""
        from bson import ObjectId
        source = field.get('source', '')
        
        if source == 'program.code':
            return program.get('code', '')
        elif source == 'program.name':
            return program.get('name', '')
        elif source == 'program.type_full':
            return program.get('type_full', program.get('type', ''))
        elif source == 'program.duration':
            return program.get('duration', '')
        elif source == 'school.name':
            # Get school name from program's school_id
            if program.get('school_id'):
                school = schools_col.find_one({'_id': ObjectId(program['school_id'])})
                return school.get('name', '') if school else ''
        elif source == 'system.submission_date':
            return datetime.datetime.now().strftime('%Y-%m-%d')
        elif source == 'system.submitted_by':
            return current_user.get('email', '') if current_user else ''
        
        return None
    
    def get_saved_value(criteria_id, row_idx, field_name):
        """Get saved value from database"""
        # TODO: Implement database storage for form data
        return None
    
    def save_value(criteria_id, row_idx, field_name, value):
        """Save value to database"""
        # TODO: Implement database storage for form data
        print(f"Saving: {criteria_id} row {row_idx} field {field_name} = {value}")
    
    def save_spreadsheet_data_to_db(criteria_id, data):
        """Save spreadsheet data to database"""
        try:
            # Save to spreadsheet collection
            spreadsheets_col.update_one(
                {'criteria_id': criteria_id, 'institution_id': inst_id},
                {'$set': {
                    'data': data,
                    'last_updated': datetime.datetime.utcnow(),
                    'updated_by': current_user.get('email', 'unknown') if current_user else 'unknown'
                }},
                upsert=True
            )
            
            # Log the save action
            log_audit_action(
                action='Saved Spreadsheet Data',
                details=f'Spreadsheet data saved for criteria {criteria_id}',
                institution_id=inst_id,
                entity_type='spreadsheet',
                entity_id=criteria_id
            )
            
        except Exception as e:
            print(f"Error saving spreadsheet data: {e}")
            raise e
    
    def render_basic_criteria_sheet(criteria_data, container, main_color):
        """Render basic criteria (legacy format)"""
        with container:
            ui.label('Basic criteria spreadsheet (legacy format)').style('padding: 2rem; color: #666;')
    
    def render_profile_sheet(profile_data, container, main_color):
        """Render extended profile sheet"""
        with container:
            ui.label('Extended profile spreadsheet').style('padding: 2rem; color: #666;')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/audit_logs')
def audit_logs_page(inst_id: str):
    def content(inst, main_color):
        from bson import ObjectId
        
        # Page header
        ui.label('Audit Logs').style(f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
        
        # Filters
        with ui.row().style('width: 100%; gap: 1rem; margin-bottom: 2rem; align-items: center;'):
            action_filter = ui.select(
                options=['All Actions', 'Login', 'Logout', 'Created', 'Updated', 'Deleted', 'Moved'],
                value='All Actions',
                label='Filter by Action'
            ).style('min-width: 150px;')
            
            entity_filter = ui.select(
                options=['All Entities', 'User', 'Institution', 'School', 'Program', 'Academic Year', 'Criteria', 'Spreadsheet'],
                value='All Entities',
                label='Filter by Entity'
            ).style('min-width: 150px;')
            
            date_from = ui.date('From Date').style('min-width: 120px;')
            date_to = ui.date('To Date').style('min-width: 120px;')
            
            ui.button('Apply Filters', icon='filter_list').style(f'background: {main_color}; color: #fff;')
            ui.button('Clear Filters', icon='clear').style('background: #666; color: #fff;')
        
        # Search
        with ui.row().style('width: 100%; margin-bottom: 2rem;'):
            search_input = ui.input('Search logs...', placeholder='Search by user, action, or details').style('flex: 1;')
            ui.button('Search', icon='search').style(f'background: {main_color}; color: #fff;')
        
        # Logs table
        with ui.card().style('width: 100%; margin-bottom: 2rem;'):
            ui.label('Recent Activity').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
            
            # Get audit logs from database
            try:
                logs = list(audit_logs_col.find({'institution_id': inst_id}).sort('timestamp', -1).limit(100))
                
                if logs:
                    # Create table
                    columns = [
                        {'name': 'timestamp', 'label': 'Date & Time', 'field': 'timestamp', 'sortable': True},
                        {'name': 'user', 'label': 'User', 'field': 'user_id', 'sortable': True},
                        {'name': 'action', 'label': 'Action', 'field': 'action', 'sortable': True},
                        {'name': 'entity_type', 'label': 'Entity Type', 'field': 'entity_type', 'sortable': True},
                        {'name': 'details', 'label': 'Details', 'field': 'details', 'sortable': False},
                        {'name': 'ip_address', 'label': 'IP Address', 'field': 'ip_address', 'sortable': False}
                    ]
                    
                    # Format logs for table
                    table_rows = []
                    for log in logs:
                        # Get user name
                        user_name = 'Unknown User'
                        if log.get('user_id'):
                            try:
                                user = users_col.find_one({'_id': ObjectId(log['user_id'])})
                                if user:
                                    user_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or user.get('email', 'Unknown')
                            except:
                                pass
                        
                        # Format timestamp
                        timestamp_str = 'Unknown'
                        if log.get('timestamp'):
                            try:
                                if isinstance(log['timestamp'], str):
                                    timestamp_str = log['timestamp']
                                else:
                                    timestamp_str = log['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                            except:
                                timestamp_str = str(log['timestamp'])
                        
                        table_rows.append({
                            'timestamp': timestamp_str,
                            'user_id': user_name,
                            'action': log.get('action', 'Unknown'),
                            'entity_type': log.get('entity_type', 'Unknown'),
                            'details': log.get('details', 'No details available'),
                            'ip_address': log.get('ip_address', 'Unknown')
                        })
                    
                    # Display table
                    ui.table(columns=columns, rows=table_rows, pagination=10).style('width: 100%;')
                    
                    # Export button
                    with ui.row().style('margin-top: 1rem; justify-content: flex-end;'):
                        ui.button('Export to CSV', icon='download').style('background: #2e7d32; color: #fff;')
                
                else:
                    ui.label('No audit logs found for this institution.').style('color: #666; font-style: italic; padding: 2rem;')
            
            except Exception as e:
                ui.label(f'Error loading audit logs: {str(e)}').style('color: #d32f2f; padding: 2rem;')
        
        # Statistics cards
        with ui.row().style('width: 100%; gap: 1rem;'):
            # Total logs
            with ui.card().style('flex: 1; text-align: center; padding: 1rem;'):
                try:
                    total_logs = audit_logs_col.count_documents({'institution_id': inst_id})
                    ui.label(str(total_logs)).style(f'font-size: 2rem; font-weight: bold; color: {main_color};')
                    ui.label('Total Logs').style('color: #666;')
                except:
                    ui.label('N/A').style('font-size: 2rem; font-weight: bold; color: #666;')
                    ui.label('Total Logs').style('color: #666;')
            
            # Logs today
            with ui.card().style('flex: 1; text-align: center; padding: 1rem;'):
                try:
                    from datetime import datetime, timedelta
                    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                    tomorrow = today + timedelta(days=1)
                    logs_today = audit_logs_col.count_documents({
                        'institution_id': inst_id,
                        'timestamp': {'$gte': today, '$lt': tomorrow}
                    })
                    ui.label(str(logs_today)).style('font-size: 2rem; font-weight: bold; color: #4caf50;')
                    ui.label('Logs Today').style('color: #666;')
                except:
                    ui.label('N/A').style('font-size: 2rem; font-weight: bold; color: #666;')
                    ui.label('Logs Today').style('color: #666;')
            
            # Active users
            with ui.card().style('flex: 1; text-align: center; padding: 1rem;'):
                try:
                    from datetime import datetime, timedelta
                    week_ago = datetime.now() - timedelta(days=7)
                    active_users = len(audit_logs_col.distinct('user_id', {
                        'institution_id': inst_id,
                        'timestamp': {'$gte': week_ago}
                    }))
                    ui.label(str(active_users)).style('font-size: 2rem; font-weight: bold; color: #ff9800;')
                    ui.label('Active Users (7d)').style('color: #666;')
                except:
                    ui.label('N/A').style('font-size: 2rem; font-weight: bold; color: #666;')
                    ui.label('Active Users (7d)').style('color: #666;')
    
    institution_admin_sidebar(inst_id, content)

# --- MongoDB Setup ---
mongo_client = MongoClient('mongodb://localhost:27017')
db = mongo_client['iqac_portal']

# Collections
users_col = db['users']
institutions_col = db['institutions']
schools_col = db['schools']
programs_col = db['programs']
academic_years_col = db['academic_years']
criterias_col = db['criterias']
criteria_col = db['criterias']  # Alternative name used in some places
extended_profiles_col = db['extended_profiles']
spreadsheets_col = db['spreadsheets']
audit_logs_col = db['audit_logs']

# --- Audit Logging Function ---
def log_audit_action(action, details, user_email=None, ip_address=None, institution_id=None, entity_type=None, entity_id=None):
    """
    Log an audit action to the audit_logs collection
    """
    global current_user
    import datetime
    
    # Use current user if not specified
    if not user_email and current_user:
        user_email = current_user.get('email', 'Unknown')
    
    # Get user's institution if not specified
    if not institution_id and current_user:
        institution_id = current_user.get('institution_id')
    
    # Default IP (in production, you'd get this from request headers)
    if not ip_address:
        ip_address = '127.0.0.1'  # Default for local development
    
    audit_entry = {
        'timestamp': datetime.datetime.utcnow(),
        'user_email': user_email or 'System',
        'action': action,
        'details': details,
        'ip_address': ip_address,
        'institution_id': institution_id,
        'entity_type': entity_type,  # e.g., 'school', 'program', 'criteria', etc.
        'entity_id': entity_id,  # ID of the entity affected
        'created_at': datetime.datetime.utcnow()
    }
    
    try:
        audit_logs_col.insert_one(audit_entry)
    except Exception as e:
        print(f"Failed to log audit action: {e}")

# --- Program Code Generation ---
def generate_program_code(institution_id, academic_year_name, program_type, program_name):
    """
    Generate a unique program code in format: INST_YEAR_TYPE_PROG
    Example: ABC_2024_UG_CS001, XYZ_2025_PG_MBA002
    """
    from bson import ObjectId
    
    # Get institution abbreviation (first 3 letters of name, uppercase)
    inst = institutions_col.find_one({'_id': ObjectId(institution_id)})
    inst_abbr = ''.join([c for c in inst.get('name', 'INS')[:3] if c.isalpha()]).upper()
    if len(inst_abbr) < 3:
        inst_abbr = inst_abbr + 'X' * (3 - len(inst_abbr))
    
    # Get year abbreviation (2024-25 -> 2024)
    year_abbr = academic_year_name.split('-')[0] if '-' in academic_year_name else academic_year_name[:4]
    
    # Program type (UG/PG)
    type_abbr = program_type.upper()[:2]
    
    # Program abbreviation (first 2-3 letters of program name)
    prog_abbr = ''.join([c for c in program_name[:3] if c.isalpha()]).upper()
    if len(prog_abbr) < 2:
        prog_abbr = prog_abbr + 'X' * (2 - len(prog_abbr))
    
    # Find next sequence number
    existing_codes = list(programs_col.find(
        {'institution_id': institution_id, 'code': {'$regex': f'^{inst_abbr}_{year_abbr}_{type_abbr}_{prog_abbr}'}},
        {'code': 1}
    ))
    
    sequence = 1
    if existing_codes:
        # Extract sequence numbers from existing codes
        sequences = []
        for prog in existing_codes:
            code_parts = prog['code'].split('_')
            if len(code_parts) >= 4:
                try:
                    seq_part = code_parts[3][len(prog_abbr):]  # Remove program abbreviation
                    if seq_part.isdigit():
                        sequences.append(int(seq_part))
                except:
                    pass
        if sequences:
            sequence = max(sequences) + 1
    
    # Generate final code
    code = f"{inst_abbr}_{year_abbr}_{type_abbr}_{prog_abbr}{sequence:03d}"
    return code

# --- Year Data Copying ---
def copy_year_data(institution_id, source_year_id, target_year_id):
    """
    Copy hierarchy, criterias, and extended profiles from one academic year to another
    """
    from bson import ObjectId
    
    # Get year names for logging
    source_year = academic_years_col.find_one({'_id': ObjectId(source_year_id)})
    target_year = academic_years_col.find_one({'_id': ObjectId(target_year_id)})
    source_year_name = source_year.get('name', '') if source_year else ''
    target_year_name = target_year.get('name', '') if target_year else ''
    
    copied_counts = {'schools': 0, 'programs': 0, 'criterias': 0, 'extended_profiles': 0}
    
    # Copy Schools
    source_schools = list(schools_col.find({
        'institution_id': institution_id,
        'academic_cycle_id': source_year_id
    }))
    
    school_id_mapping = {}
    for school in source_schools:
        old_id = str(school['_id'])
        # Create new school document
        new_school = {
            'name': school['name'],
            'institution_id': institution_id,
            'academic_cycle_id': target_year_id,
            'type': school.get('type', 'school'),
            'created_at': datetime.datetime.utcnow(),
            'created_by': school.get('created_by', 'admin')
        # }
        result = schools_col.insert_one(new_school)
        school_id_mapping[old_id] = str(result.inserted_id)
        copied_counts['schools'] += 1
    
    # Copy Programs with new codes
    source_programs = list(programs_col.find({
        'institution_id': institution_id,
        'academic_cycle_id': source_year_id
    }))
    
    for program in source_programs:
        old_school_id = program.get('school_id')
        new_school_id = school_id_mapping.get(old_school_id)
        
        if new_school_id:
            # Generate new program code for the new year
            program_type = program.get('type', 'UG')
            program_name = program.get('name', '')
            new_code = generate_program_code(institution_id, target_year_name, program_type, program_name)
            
            new_program = {
                'name': program['name'],
                'code': new_code,
                'type': program.get('type', 'UG'),
                'type_full': program.get('type_full', 'Under Graduate'),
                'duration': program.get('duration', '4 Years'),
                'school_id': new_school_id,
                'institution_id': institution_id,
                'academic_cycle_id': target_year_id,
                'created_at': datetime.datetime.utcnow(),
                'created_by': program.get('created_by', 'admin')
            }
            programs_col.insert_one(new_program)
            copied_counts['programs'] += 1
    
    # Copy Criterias
    source_criterias = list(criterias_col.find({
        'institution_id': institution_id,
        'academic_cycle_id': source_year_id
    }))
    
    for criteria in source_criterias:
        new_criteria = {
            'name': criteria['name'],
            'description': criteria.get('description', ''),
            'headers': criteria.get('headers', []),
            'program_data_included': criteria.get('program_data_included', {}),
            'needs_supporting_docs': criteria.get('needs_supporting_docs', False),
            'institution_id': institution_id,
            'academic_cycle_id': target_year_id,
            'created_at': datetime.datetime.utcnow(),
            'created_by': criteria.get('created_by', 'admin')
        # }
        criterias_col.insert_one(new_criteria)
        copied_counts['criterias'] += 1
    
    # Copy Extended Profiles
    source_profiles = list(extended_profiles_col.find({
        'institution_id': institution_id,
        'academic_cycle_id': source_year_id
    }))
    
    for profile in source_profiles:
        new_profile = {
            'name': profile['name'],
            'description': profile.get('description', ''),
            'headers': profile.get('headers', []),
            'needs_supporting_docs': profile.get('needs_supporting_docs', False),
            'institution_id': institution_id,
            'academic_cycle_id': target_year_id,
            'created_at': datetime.datetime.utcnow(),
            'created_by': profile.get('created_by', 'admin')
        # }
        extended_profiles_col.insert_one(new_profile)
        copied_counts['extended_profiles'] += 1
    
    # Log the copy operation
    details = f'Copied data from "{source_year_name}" to "{target_year_name}": {copied_counts["schools"]} schools, {copied_counts["programs"]} programs, {copied_counts["criterias"]} criterias, {copied_counts["extended_profiles"]} extended profiles'
    log_audit_action(
        action='Copied Academic Year Data',
        details=details,
        institution_id=institution_id,
        entity_type='academic_year',
        entity_id=target_year_id
    )

# --- Global session emulation ---
current_user = None

# --- Change Password Page ---
@ui.page('/change_password')
def change_password_page():
    global current_user
    user = current_user
    if not user or not user.get('must_change_password'):
        ui.notify('Unauthorized or already changed password', color='negative')
        ui.navigate.to('/')
        return
    with ui.row().style('height: 100vh; width: 100vw; display: flex; align-items: center; justify-content: center;'):
        with ui.column().style('align-items: center; justify-content: center; min-width: 350px; background: #fff; padding: 2rem; border-radius: 12px; box-shadow: 0 2px 16px rgba(0,0,0,0.08);'):
            ui.label('Change Password').style('font-size: 2rem; font-weight: bold; margin-bottom: 2rem;')
            new_password = ui.input('New Password').props('type=password').style('width: 300px;')
            confirm_password = ui.input('Confirm Password').props('type=password').style('width: 300px;')
            def update_password():
                if new_password.value != confirm_password.value:
                    ui.notify('Passwords do not match', color='negative')
                    return
                # Update password in MongoDB
                salt = secrets.token_hex(16)
                password_hash = hashlib.sha256((new_password.value + salt).encode()).hexdigest()
                users_col.update_one(
                    {'email': user['email'], 'role': user['role']},
                    {'$set': {'password_hash': password_hash, 'salt': salt, 'must_change_password': False, 'updated_at': datetime.datetime.utcnow()}}
                )
                user['must_change_password'] = False
                global current_user
                current_user = user
                # Log password change
                log_audit_action(
                    action='Password Changed',
                    details='User changed their password',
                    user_email=user['email'],
                    institution_id=user.get('institution_id')
                )
                ui.notify('Password changed successfully!', color='positive')
                ui.navigate.to('/dashboard')
            ui.button('Change Password', on_click=update_password).style('margin-top: 1rem; width: 300px;')

@ui.page('/profile')
def profile_page():
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
        
    user = users_col.find_one({'email': current_user['email']})
    if not user:
        ui.notify('User not found', color='negative')
        ui.navigate.to('/')
        return
    
    with ui.element('div').style('min-height: 100vh; background: var(--gradient-primary); display: flex; align-items: center; justify-content: center; padding: 2rem;'):
        with ui.element('div').classes('beautiful-card').style('max-width: 500px; width: 100%; padding: 0;').classes('animate-fade-in-up'):
            # Header
            with ui.element('div').style('background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); color: white; padding: 2rem; text-align: center; border-radius: 12px 12px 0 0;'):
                # User Avatar
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                email = user.get('email', '')
                initials = (first_name[:1] + last_name[:1]).upper() if first_name or last_name else email[:2].upper()
                
                ui.label(initials).style('width: 80px; height: 80px; border-radius: 50%; background: rgba(255,255,255,0.3); color: white; display: flex; align-items: center; justify-content: center; font-size: 2rem; font-weight: 700; margin: 0 auto 1rem auto; box-shadow: 0 4px 15px rgba(0,0,0,0.2);')
                ui.label('👤 User Profile').style('font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;')
                ui.label('Manage your account information').style('font-size: 1rem; opacity: 0.9;')
            
            # Profile Information
            with ui.element('div').style('padding: 2.5rem;'):
                with ui.column().style('gap: 1.5rem;'):
                    # Personal Information
                    ui.label('📋 Personal Information').style('font-size: 1.2rem; font-weight: 700; color: var(--primary-color); margin-bottom: 1rem;')
                    
                    with ui.row().style('gap: 1rem; width: 100%;'):
                        with ui.column().style('flex: 1;'):
                            ui.label('First Name').classes('form-label')
                            first_name_input = ui.input(value=first_name).classes('input-beautiful')
                        
                        with ui.column().style('flex: 1;'):
                            ui.label('Last Name').classes('form-label')
                            last_name_input = ui.input(value=last_name).classes('input-beautiful')
                    
                    with ui.column().classes('form-group'):
                        ui.label('Email Address').classes('form-label')
                        ui.input(value=email).classes('input-beautiful').props('readonly')
                    
                    with ui.column().classes('form-group'):
                        ui.label('Role').classes('form-label')
                        ui.input(value=user.get('role', '')).classes('input-beautiful').props('readonly')
                    
                    # Institution Information (if applicable)
                    if user.get('institution_id'):
                        try:
                            from bson import ObjectId
                            institution = institutions_col.find_one({'_id': ObjectId(user['institution_id'])})
                            if institution:
                                with ui.column().classes('form-group'):
                                    ui.label('Institution').classes('form-label')
                                    ui.input(value=institution.get('name', '')).classes('input-beautiful').props('readonly')
                        except:
                            pass
                    
                    # Action Buttons
                    with ui.row().style('gap: 1rem; width: 100%; margin-top: 2rem;'):
                        def update_profile():
                            try:
                                users_col.update_one(
                                    {'email': current_user['email']},
                                    {'$set': {
                                        'first_name': first_name_input.value,
                                        'last_name': last_name_input.value,
                                        'updated_at': datetime.datetime.utcnow()
                                    }}
                                )
                                
                                # Log profile update
                                log_audit_action(
                                    action='Updated Profile',
                                    details='User updated their profile information',
                                    user_email=current_user['email'],
                                    institution_id=user.get('institution_id')
                                )
                                
                                ui.notify('Profile updated successfully!', color='positive')
                            except Exception as e:
                                ui.notify(f'Error updating profile: {str(e)}', color='negative')
                        
                        ui.button('💾 Update Profile', on_click=update_profile).classes('btn-beautiful').style('flex: 1;')
                        ui.button('🔒 Change Password', on_click=lambda: ui.navigate.to('/change_password')).style('flex: 1; background: #6c757d; color: white; padding: 0.75rem; border-radius: 8px; border: none; cursor: pointer;')
                    
                    # Back to Dashboard
                    with ui.row().style('width: 100%; justify-content: center; margin-top: 1.5rem;'):
                        ui.button('← Back to Dashboard', on_click=lambda: ui.navigate.to('/dashboard')).style('background: none; color: var(--primary-color); border: 1px solid var(--primary-color); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;')

# --- Schema Example Functions ---
def create_user(email, role, institution_id=None, school_id=None, program_id=None, department_id=None, first_name='', last_name='', academic_cycle_id=None):
    # Accept password, generate salt, store salted hash
    def hash_password(password, salt):
        return hashlib.sha256((password + salt).encode()).hexdigest()
    salt = secrets.token_hex(16)
    raw_password = secrets.token_urlsafe(10)
    password_hash = hash_password(raw_password, salt)
    user = {
        'email': email,
        'role': role,
        'institution_id': institution_id,
        'school_id': school_id,
        'program_id': program_id,
        'department_id': department_id,
        'first_name': first_name,
        'last_name': last_name,
        'academic_cycle_id': academic_cycle_id,
        'created_at': datetime.datetime.utcnow(),
        'updated_at': datetime.datetime.utcnow(),
        'salt': salt,
        'password_hash': password_hash,
        'must_change_password': True,
    }
    result = users_col.insert_one(user)
    
    # Log user creation
    context_details = f"Created {role} user: {email}"
    if first_name or last_name:
        context_details += f" ({first_name} {last_name})"
    
    log_audit_action(
        action='Created User',
        details=context_details,
        institution_id=institution_id,
        entity_type='user',
        entity_id=str(result.inserted_id)
    )
    
    # Return raw password for onboarding (e.g., email to user)
    return result, raw_password

def create_institution(name, logo, theme_color, website_url, created_by):
    institution = {
        'name': name,
        'logo': logo,
        'theme_color': theme_color,
        'website_url': website_url,
        'created_by': created_by,
        'created_at': datetime.datetime.utcnow(),
        'updated_by': created_by,
        'updated_at': datetime.datetime.utcnow(),
    }
    result = institutions_col.insert_one(institution)
    
    # Log institution creation
    log_audit_action(
        action='Created Institution',
        details=f'Institution "{name}" created with theme color {theme_color}',
        user_email=created_by,
        institution_id=str(result.inserted_id),
        entity_type='institution',
        entity_id=str(result.inserted_id)
    )
    
    return result

def create_school(name, institution_id, created_by, academic_cycle_id):
    school = {
        'name': name,
        'institution_id': institution_id,
        'created_by': created_by,
        'created_at': datetime.datetime.utcnow(),
        'updated_at': datetime.datetime.utcnow(),
        'academic_cycle_id': academic_cycle_id,
    }
    result = schools_col.insert_one(school)
    
    # Log school creation
    log_audit_action(
        action='Created School',
        details=f'School "{name}" created',
        user_email=created_by,
        institution_id=institution_id,
        entity_type='school',
        entity_id=str(result.inserted_id)
    )
    
    return result

def create_program(name, school_id, created_by, academic_cycle_id):
    # Get institution_id from school
    from bson import ObjectId
    try:
        if isinstance(school_id, str):
            school = schools_col.find_one({'_id': ObjectId(school_id)})
        else:
            school = schools_col.find_one({'_id': school_id})
    except Exception as e:
        print(f"Error finding school: {e}")
        school = None
    
    institution_id = school['institution_id'] if school else None
    program = {
        'name': name,
        'school_id': school_id,
        'institution_id': institution_id,
        'created_by': created_by,
        'created_at': datetime.datetime.utcnow(),
        'updated_at': datetime.datetime.utcnow(),
        'academic_cycle_id': academic_cycle_id,
    }
    result = programs_col.insert_one(program)
    
    # Log program creation
    school_name = school.get('name', 'Unknown School') if school else 'Unknown School'
    log_audit_action(
        action='Created Program',
        details=f'Program "{name}" created in school "{school_name}"',
        user_email=created_by,
        institution_id=institution_id,
        entity_type='program',
        entity_id=str(result.inserted_id)
    )
    
    return result

def create_academic_year(name, institution_id, is_locked=False):
    year = {
        'name': name,
        'institution_id': institution_id,
        'is_locked': is_locked,
        'created_at': datetime.datetime.utcnow(),
        'updated_at': datetime.datetime.utcnow(),
    }
    result = academic_years_col.insert_one(year)
    
    # Log academic year creation
    log_audit_action(
        action='Created Academic Year',
        details=f'Academic year "{name}" created',
        institution_id=institution_id,
        entity_type='academic_year',
        entity_id=str(result.inserted_id)
    )
    
    return result

@ui.page('/')
def login_page():
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    def show_forgot_password():
        with ui.dialog() as dialog:
            with ui.card().classes('beautiful-card').style('min-width: 400px; padding: 2rem;'):
                ui.label('🔑 Reset Password').style('font-size: 1.5rem; font-weight: 700; margin-bottom: 1.5rem; color: #667eea; text-align: center;')
                
                with ui.column().style('gap: 1rem;'):
                    ui.label('Enter your email address and we\'ll send you a password reset link.').style('color: #666; text-align: center; margin-bottom: 1rem;')
                    forgot_email = ui.input('Email Address').props('type=email').classes('input-beautiful')
                    
                    with ui.row().style('width: 100%; gap: 1rem; margin-top: 1rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('flex: 1; background: #6c757d; color: white; padding: 0.75rem; border-radius: 8px;')
                        ui.button('Send Reset Link', on_click=lambda: (ui.notify(f'Reset link sent to {forgot_email.value}', color='positive'), dialog.close())).classes('btn-beautiful').style('flex: 1;')
        dialog.open()

    def hash_password(password, salt):
        return hashlib.sha256((password + salt).encode()).hexdigest()

    def do_login():
        global current_user
        
        if not email.value or not password.value:
            ui.notify('Please enter both email and password', color='warning')
            return
            
        user = users_col.find_one({'email': email.value})
        if not user:
            ui.notify('Invalid email address', color='negative')
            # Log failed login attempt
            log_audit_action(
                action='Failed Login Attempt',
                details=f'Invalid email: {email.value}',
                user_email=email.value,
                institution_id=None
            )
            return
            
        entered_hash = hash_password(password.value, user['salt'])
        if entered_hash != user['password_hash']:
            ui.notify('Incorrect password', color='negative')
            # Log failed login attempt
            log_audit_action(
                action='Failed Login Attempt',
                details=f'Incorrect password for email: {email.value}',
                user_email=email.value,
                institution_id=user.get('institution_id')
            )
            return
            
        # Save user info in global session
        current_user = {
            'email': user['email'],
            'role': user.get('role', ''),
            'institution_id': user.get('institution_id', ''),
            'must_change_password': user.get('must_change_password', False)
        # }
        
        # Log successful login
        log_audit_action(
            action='Successful Login',
            details=f'User logged in with role: {user.get("role", "Unknown")}',
            user_email=user['email'],
            institution_id=user.get('institution_id')
        )
        
        # Clear any stored academic year selection on login to avoid stale/invalid values
        if hasattr(app.storage, 'user'):
            app.storage.user['selected_academic_year_id'] = None
            
        ui.notify(f'Welcome back, {user.get("first_name", "User")}!', color='positive')
        
        if user.get('must_change_password', False):
            ui.navigate.to('/change_password')
        else:
            # If institution admin, redirect to their profile
            if user.get('role', '') == 'Institution Admin' and user.get('institution_id'):
                ui.navigate.to(f"/institution_admin/{user['institution_id']}")
            #             else:
                ui.navigate.to('/dashboard')

    # Beautiful Login Page Layout
    with ui.element('div').style('min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 2rem;'):
        with ui.card().classes('beautiful-card animate-fade-in-up').style('max-width: 440px; width: 100%; padding: 3rem; text-align: center;'):
            
            # Logo and Title Section
            with ui.column().style('margin-bottom: 2rem;'):
                ui.icon('school', size='4rem').style('color: #667eea; margin-bottom: 1rem;')
                ui.label('IQAC Portal').classes('page-title').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label('Quality Assurance Management System').style('color: rgba(44, 62, 80, 0.7); font-weight: 400; font-size: 0.95rem;')
            
            # Login Form
            with ui.column().style('gap: 1.5rem; margin-bottom: 2rem;'):
                with ui.column().classes('form-group'):
                    ui.label('Email Address').classes('form-label')
                    email = ui.input('Enter your email').props('type=email').classes('input-beautiful')
                
                with ui.column().classes('form-group'):
                    ui.label('Password').classes('form-label')
                    password = ui.input('Enter your password').props('type=password').classes('input-beautiful')
                    password.on('keydown.enter', do_login)  # Login on Enter key
            
            # Action Buttons
            with ui.column().style('gap: 1rem;'):
                ui.button('🚀 Sign In', on_click=do_login).classes('btn-beautiful').style('width: 100%; padding: 1rem; font-size: 1rem; font-weight: 600;')
                ui.button('Forgot your password?', on_click=show_forgot_password).style('background: none; color: #667eea; border: none; font-size: 0.9rem; text-decoration: underline; cursor: pointer; padding: 0.5rem;')
            
            # Footer Section
            with ui.row().style('margin-top: 2rem; padding-top: 2rem; border-top: 1px solid rgba(255, 255, 255, 0.3); justify-content: center;'):
                ui.label('🛡️ Secure Login').style('color: rgba(44, 62, 80, 0.6); font-size: 0.8rem; display: flex; align-items: center; gap: 0.5rem;')

@ui.page('/dashboard')
def dashboard():
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    # For now, always show Platform Owner dashboard
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
        
    user = users_col.find_one({'email': current_user['email']})
    if not user:
        ui.notify('User not found', color='negative')
        ui.navigate.to('/')
        return
        
    first_name = user.get('first_name', '')
    last_name = user.get('last_name', '')
    email = user.get('email', '')
    institutions = list(institutions_col.find())
    
                            def create_institution_card(institution=inst, color=main_color):
                                def go_to_institution():
                                    ui.navigate.to(f'/institution/{institution["_id"]}')
                                
@ui.page('/create_institution')
def create_institution_page():
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
        
                        def create_inst():
                            if not name_input.value:
                                ui.notify('Institution name is required', color='negative')
                                return
                            
                            institution_data = {
                                'name': name_input.value,
                                'location': location_input.value,
                                'type': type_select.value,
                                'establishment_year': int(year_input.value) if year_input.value else None,
                                'website': website_input.value,
                                'theme_color': color_input.value,
                                'logo': logo_input.value,
                                'description': description_input.value,
                                'created_by': current_user['email'],
                                'created_at': datetime.utcnow()
                            }
                            
                            try:
                                result = institutions_col.insert_one(institution_data)
                                
                                # Create audit log
                                audit_data = {
                                    'action': 'institution_created',
                                    'user_email': current_user['email'],
                                    'institution_id': str(result.inserted_id),
                                    'details': {
                                        'institution_name': name_input.value,
                                        'created_fields': list(institution_data.keys())
                                    },
                                    'timestamp': datetime.utcnow(),
                                    'ip_address': None  # Could be captured if needed
                                }
                                audit_logs_col.insert_one(audit_data)
                                
                                ui.notify(f'Institution "{name_input.value}" created successfully!', color='positive')
                                ui.navigate.to('/dashboard')
                            except Exception as e:
                                ui.notify(f'Error creating institution: {str(e)}', color='negative')
                        
                        ui.button('🚀 Create Institution', on_click=create_inst).classes('btn-beautiful').style('padding: 0.75rem 2rem; font-weight: 600;')

@ui.page('/institution/{inst_id}')
def institution_main_page(inst_id: str):
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
    
    try:
        institution = institutions_col.find_one({'_id': ObjectId(inst_id)})
        if not institution:
            ui.notify('Institution not found', color='negative')
            ui.navigate.to('/dashboard')
            return
    except:
        ui.notify('Invalid institution ID', color='negative')
        ui.navigate.to('/dashboard')
        return
    
    institution_name = institution.get('name', 'Institution')
    main_color = institution.get('theme_color', '#667eea')
    
@ui.page('/institution/{inst_id}/users')
def institution_users_page(inst_id: str):
    # Add beautiful global styles  
    add_beautiful_global_styles()
    
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
    
    from bson import ObjectId
    try:
        inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    except Exception:
        inst = None
    if not inst:
        with ui.element('div').style('min-height: 100vh; display: flex; align-items: center; justify-content: center; background: var(--gradient-primary);'):
            with ui.element('div').classes('beautiful-card').style('text-align: center; padding: 3rem;'):
                ui.icon('error', size='4rem').style('color: #f44336; margin-bottom: 1.5rem;')
                ui.label('Institution Not Found').style('font-size: 1.5rem; font-weight: 700; color: #2c3e50; margin-bottom: 1rem;')
                ui.label('The requested institution could not be found.').style('color: rgba(44, 62, 80, 0.7); margin-bottom: 2rem;')
                ui.button('← Back to Dashboard', on_click=lambda: ui.navigate.to('/dashboard')).classes('btn-beautiful')
        return
    
    institution_name = inst.get('name', 'Institution')
    main_color = inst.get('theme_color', '#667eea')
    
    with ui.element('div').style('min-height: 100vh; display: flex;'):
        # Beautiful Sidebar for Institution
        with ui.element('div').classes('beautiful-sidebar').style(f'background: linear-gradient(180deg, {main_color}15, {main_color}05);'):
            # Institution Header
            with ui.element('div').classes('sidebar-header').style(f'border-bottom: 1px solid {main_color}30;'):
                logo_url = inst.get('logo') or f'https://ui-avatars.com/api/?name={institution_name}&background={main_color[1:]}&color=fff&size=60'
                ui.image(logo_url).style('width: 60px; height: 60px; border-radius: 50%; object-fit: cover; margin-bottom: 1rem; box-shadow: 0 4px 15px rgba(0,0,0,0.1);')
                ui.label(institution_name).style('font-size: 1.2rem; font-weight: 700; letter-spacing: 0.025em; color: #2c3e50; text-align: center;')
                ui.label('IQAC Management').style('font-size: 0.8rem; opacity: 0.8; margin-top: 0.25rem; color: #2c3e50;')
            
            # Navigation Items
            with ui.column().style('padding: 1.5rem 0; flex: 1;'):
                ui.link('🏠 Dashboard', f'/institution/{inst_id}').classes('sidebar-nav-item')
                ui.link('👥 Users', f'/institution/{inst_id}/users').classes('sidebar-nav-item active')
                ui.link('📋 Criteria', f'/institution/{inst_id}/criteria').classes('sidebar-nav-item')
                ui.link('📊 Programs', f'/institution/{inst_id}/programs').classes('sidebar-nav-item')
                ui.link('📈 Reports', f'/institution/{inst_id}/reports').classes('sidebar-nav-item')
                ui.link('⚙️ Settings', f'/institution/{inst_id}/settings').classes('sidebar-nav-item')
            
            # Back to Platform
            with ui.column().style('padding: 1.5rem; border-top: 1px solid rgba(0,0,0,0.1); margin-top: auto;'):
                ui.button('← Platform Dashboard', on_click=lambda: ui.navigate.to('/dashboard')).classes('btn-secondary').style('width: 100%; padding: 0.75rem;')
        
        # Main Content Area
        with ui.element('div').classes('main-content'):
            # Page Header
            with ui.element('div').classes('page-header animate-fade-in-up').style(f'border-bottom: 1px solid {main_color}20;'):
                ui.label(f'👥 User Management').classes('page-title').style(f'color: {main_color};')
                ui.label(f'Manage users and roles for {institution_name}').classes('page-subtitle')
                
                # Action Button
                with ui.row().style('justify-content: flex-end; margin-top: 1rem;'):
                    ui.button('➕ Create Institution Admin', on_click=lambda: ui.navigate.to(f'/institution/{inst_id}/create_admin')).classes('btn-beautiful').style(f'background: linear-gradient(135deg, {main_color}, {main_color}88); padding: 0.75rem 1.5rem;')
            
            # Users by Role
            users = list(users_col.find({'institution_id': inst_id}))
            
            if users:
                with ui.column().style('width: 100%; gap: 2rem;').classes('animate-fade-in-up'):
                    from collections import defaultdict
                    role_dict = defaultdict(list)
                    for user in users:
                        role = user.get('role', 'Unknown')
                        role_dict[role].append(user)
                    
                    for role, role_users in role_dict.items():
                        # Role Section
                        with ui.element('div').classes('beautiful-card').style('padding: 2rem;'):
                            # Role Header
                            role_icons = {
                                'Institution Admin': '👑',
                                'Program Admin': '🎓',
                                'Faculty': '👨‍🏫',
                                'Staff': '👥',
                                'Student': '🎒'
                            }
                            role_icon = role_icons.get(role, '👤')
                            
                            with ui.row().style('align-items: center; margin-bottom: 1.5rem; gap: 1rem;'):
                                ui.label(role_icon).style('font-size: 2rem;')
                                with ui.column().style('flex: 1;'):
                                    ui.label(role).style('font-size: 1.3rem; font-weight: 700; color: #2c3e50;')
                                    ui.label(f'{len(role_users)} user{"s" if len(role_users) != 1 else ""}').style('color: rgba(44, 62, 80, 0.7);')
                                
                                # Role badge
                                with ui.element('div').style(f'background: {main_color}15; color: {main_color}; padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.85rem; font-weight: 600;'):
                                    ui.label(f'{len(role_users)} Users')
                            
                            # Users Grid
                            with ui.element('div').style('display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1rem;'):
                                for user in role_users:
                                    with ui.element('div').style('background: rgba(255, 255, 255, 0.8); border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 8px; padding: 1.5rem; transition: all 0.3s ease; backdrop-filter: blur(10px);'):
                                        # User Avatar and Info
                                        first_name = user.get('first_name', '')
                                        last_name = user.get('last_name', '')
                                        email = user.get('email', '')
                                        created_at = user.get('created_at')
                                        
                                        initials = (first_name[:1] + last_name[:1]).upper() if first_name or last_name else email[:2].upper()
                                        
                                        with ui.row().style('align-items: center; gap: 1rem; margin-bottom: 1rem;'):
                                            ui.label(initials).style(f'width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(135deg, {main_color}, {main_color}88); color: white; display: flex; align-items: center; justify-content: center; font-size: 1.1rem; font-weight: 700;')
                                            
                                            with ui.column().style('flex: 1;'):
                                                full_name = f'{first_name} {last_name}' if first_name or last_name else 'User'
                                                ui.label(full_name).style('font-weight: 600; font-size: 1rem; color: #2c3e50;')
                                                ui.label(email).style('font-size: 0.85rem; color: rgba(44, 62, 80, 0.7); margin-top: 0.25rem;')
                                        
                                        # User Details
                                        if created_at:
                                            created_str = created_at.strftime('%B %d, %Y')
                                            ui.label(f'📅 Joined: {created_str}').style('font-size: 0.8rem; color: rgba(44, 62, 80, 0.6); margin-bottom: 0.5rem;')
                                        
                                        # Status Badge
                                        status = user.get('status', 'active')
                                        status_color = '#4caf50' if status == 'active' else '#ff9800'
                                        with ui.element('div').style(f'background: {status_color}15; color: {status_color}; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px; display: inline-block;'):
                                            ui.label(status)
            else:
                # Empty State
                with ui.column().style('align-items: center; text-align: center; padding: 4rem; margin-top: 2rem;').classes('animate-fade-in-up'):
                    ui.icon('group_off', size='5rem').style(f'color: {main_color}40; margin-bottom: 1.5rem;')
                    ui.label('No Users Yet').style('font-size: 1.8rem; font-weight: 700; color: rgba(44, 62, 80, 0.7); margin-bottom: 1rem;')
                    ui.label(f'Start building your {institution_name} team by creating the first admin user.').style('color: rgba(44, 62, 80, 0.6); margin-bottom: 2rem; max-width: 400px;')
                    ui.button('➕ Create First Admin', on_click=lambda: ui.navigate.to(f'/institution/{inst_id}/create_admin')).classes('btn-beautiful').style(f'background: linear-gradient(135deg, {main_color}, {main_color}88); padding: 1rem 2rem; font-size: 1.1rem;')

@ui.page('/institution/{inst_id}/create_admin')
def create_institution_admin_page(inst_id: str):
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    global current_user
    if not current_user:
        ui.notify('Not logged in', color='negative')
        ui.navigate.to('/')
        return
    
    from bson import ObjectId
    try:
        inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    except Exception:
        inst = None
    if not inst:
        with ui.element('div').style('min-height: 100vh; display: flex; align-items: center; justify-content: center; background: var(--gradient-primary);'):
            with ui.element('div').classes('beautiful-card').style('text-align: center; padding: 3rem;'):
                ui.icon('error', size='4rem').style('color: #f44336; margin-bottom: 1.5rem;')
                ui.label('Institution Not Found').style('font-size: 1.5rem; font-weight: 700; color: #2c3e50; margin-bottom: 1rem;')
                ui.button('← Back to Dashboard', on_click=lambda: ui.navigate.to('/dashboard')).classes('btn-beautiful')
        return
    
    institution_name = inst.get('name', 'Institution')
    main_color = inst.get('theme_color', '#667eea')
    
    with ui.element('div').style('min-height: 100vh; background: var(--gradient-primary); display: flex; align-items: center; justify-content: center; padding: 2rem;'):
        with ui.element('div').classes('beautiful-card').style('max-width: 500px; width: 100%; padding: 0;').classes('animate-fade-in-up'):
            # Header
            with ui.element('div').style(f'background: linear-gradient(135deg, {main_color}, {main_color}88); color: white; padding: 2rem; text-align: center; border-radius: 12px 12px 0 0;'):
                ui.icon('admin_panel_settings', size='3rem').style('margin-bottom: 1rem; color: white; filter: drop-shadow(0 2px 8px rgba(0,0,0,0.2));')
                ui.label('Create Institution Admin').style('font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;')
                ui.label(f'Add a new administrator for {institution_name}').style('font-size: 1rem; opacity: 0.9;')
            
            # Form
            with ui.element('div').style('padding: 2.5rem;'):
                with ui.column().style('gap: 1.5rem; width: 100%;'):
                    # First Name
                    with ui.element('div').classes('form-group'):
                        ui.label('👤 First Name').classes('form-label')
                        admin_first_name = ui.input(placeholder='Enter admin first name').classes('form-input')
                    
                    # Last Name
                    with ui.element('div').classes('form-group'):
                        ui.label('👤 Last Name').classes('form-label')
                        admin_last_name = ui.input(placeholder='Enter admin last name').classes('form-input')
                    
                    # Email
                    with ui.element('div').classes('form-group'):
                        ui.label('📧 Email Address').classes('form-label')
                        admin_email = ui.input(placeholder='admin@example.com').props('type=email').classes('form-input')
                        ui.label('This email will be used for login credentials').style('font-size: 0.85rem; color: rgba(44, 62, 80, 0.7); margin-top: 0.5rem;')
                    
                    # Additional Info
                    with ui.element('div').style('background: rgba(102, 126, 234, 0.1); border-left: 4px solid var(--primary-color); padding: 1rem; border-radius: 6px; margin-top: 1rem;'):
                        ui.label('ℹ️ Administrator Access').style('font-weight: 600; color: #2c3e50; margin-bottom: 0.5rem;')
                        ui.label('This user will have full administrative access to manage:').style('color: rgba(44, 62, 80, 0.8); margin-bottom: 0.5rem;')
                        with ui.column().style('gap: 0.25rem; margin-left: 1rem;'):
                            ui.label('• Institution users and roles').style('font-size: 0.9rem; color: rgba(44, 62, 80, 0.7);')
                            ui.label('• Quality criteria and standards').style('font-size: 0.9rem; color: rgba(44, 62, 80, 0.7);')
                            ui.label('• Academic programs and assessments').style('font-size: 0.9rem; color: rgba(44, 62, 80, 0.7);')
                            ui.label('• Reports and analytics').style('font-size: 0.9rem; color: rgba(44, 62, 80, 0.7);')
                    
                    # Action Buttons
                    with ui.row().style('gap: 1rem; justify-content: center; margin-top: 2rem;'):
                        ui.button('← Back to Users', on_click=lambda: ui.navigate.to(f'/institution/{inst_id}/users')).classes('btn-secondary').style('padding: 0.75rem 1.5rem;')
                        
                        def create_admin():
                            if not admin_first_name.value or not admin_last_name.value or not admin_email.value:
                                ui.notify('All fields are required', color='negative')
                                return
                                
                            if not admin_email.value or '@' not in admin_email.value:
                                ui.notify('Please enter a valid email address', color='negative')
                                return
                            
                            try:
                                result, raw_password = create_user(
                                    email=admin_email.value,
                                    role='Institution Admin',
                                    institution_id=inst_id,
                                    first_name=admin_first_name.value,
                                    last_name=admin_last_name.value
                                )
                                
                                # Show success notification with password
                                ui.notify(f'✅ Admin {admin_first_name.value} {admin_last_name.value} created successfully!\n🔑 Password: {raw_password}\n📧 Please share these credentials securely.', 
                                         color='positive', timeout=10000)
                                
                                ui.navigate.to(f'/institution/{inst_id}/users')
                            except Exception as e:
                                ui.notify(f'Error creating admin: {str(e)}', color='negative')
                        
                        ui.button('👑 Create Admin', on_click=create_admin).classes('btn-beautiful').style(f'background: linear-gradient(135deg, {main_color}, {main_color}88); padding: 0.75rem 2rem; font-weight: 600;')

@ui.page('/institution/{inst_id}/hierarchy')
def institution_hierarchy_page(inst_id: str):
    from bson import ObjectId
    try:
        inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    except Exception:
        inst = None
    if not inst:
        ui.label('Institution not found').style('font-size: 1.2rem; color: #c00; margin-top: 2rem;')
        return
    # Only show hierarchy if created by admin
    hierarchy = inst.get('hierarchy')
    with ui.row().style('height: 100vh; width: 100vw; background: linear-gradient(135deg, #e3f2fd 0%, #f5f5f5 100%);'):
        with ui.column().style('background: #f5f5f5; min-width: 260px; height: 100vh; box-shadow: 2px 0 8px rgba(0,0,0,0.04); padding: 2rem 1rem; align-items: flex-start;'):
            ui.button('Back', on_click=lambda: ui.navigate.to(f'/institution/{inst_id}')).style('width: 120px; margin-bottom: 2rem;')
        with ui.column().style('flex: 1; padding: 2rem; align-items: center;'):
            ui.label('Institution Hierarchy').style('font-size: 1.5rem; font-weight: bold; margin-bottom: 2rem;')
            if hierarchy:
                ui.label(str(hierarchy)).style('font-size: 1.1rem; color: #1976d2;')
            else:
                ui.label('No hierarchy created yet.').style('color: #888; margin-bottom: 2rem;')

# --- NiceGUI server entry point ---
# API endpoint for moving programs between schools
@app.post('/api/move_program')
async def move_program(request):
    try:
        import json
        from bson import ObjectId
        
        data = await request.json()
        program_id = data.get('program_id')
        new_school_id = data.get('new_school_id')
        institution_id = data.get('institution_id')
        
        # Get program and school details for logging
        program = programs_col.find_one({'_id': ObjectId(program_id)})
        old_school = schools_col.find_one({'_id': ObjectId(program.get('school_id', ''))})
        new_school = schools_col.find_one({'_id': ObjectId(new_school_id)})
        
        if not program:
            return {'success': False, 'message': 'Program not found'}
        
        if not new_school:
            return {'success': False, 'message': 'Target school not found'}
        
        # Update program's school_id
        programs_col.update_one(
            {'_id': ObjectId(program_id)},
            {'$set': {'school_id': new_school_id}}
        )
        
        # Log the move action
        log_audit_action(
            action='Moved Program',
            details=f'Program "{program.get("name", "")}" (Code: {program.get("code", "")}) moved from "{old_school.get("name", "") if old_school else "Unknown"}" to "{new_school.get("name", "")}"',
            institution_id=institution_id,
            entity_type='program',
            entity_id=program_id
        )
        
        return {'success': True, 'message': f'Program moved to {new_school.get("name", "")} successfully'}
        
    except Exception as e:
        print(f"Error moving program: {e}")
        return {'success': False, 'message': 'Failed to move program'}

if __name__ in {"__main__", "__mp_main__"}:
    ui.run(port=8081, storage_secret="super-secret-key-2025-change-this")