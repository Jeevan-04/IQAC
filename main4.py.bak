from pymongo import MongoClient
from bson import ObjectId
import datetime
import hashlib
import secrets
import re
from nicegui import app, ui
import urllib.parse
import pandas as pd
import io
import base64

# MongoDB Setup
client = MongoClient('mongodb://localhost:27017/')
db = client['iqac_portal']

# Collections
institutions_col = db['institutions']
users_col = db['users']
academic_years_col = db['academic_years']
schools_col = db['schools']
programs_col = db['programs']
criterias_col = db['criterias']
audit_logs_col = db['audit_logs']
extended_profiles_col = db['extended_profiles']

# Global session management
current_user = None

# Session management functions
def check_auth():
    """Check if user is authenticated"""
    global current_user
    if current_user and current_user.get('email'):
        return True
    
    # Try to restore from storage
    if hasattr(app.storage, 'user') and app.storage.user.get('current_user'):
        current_user = app.storage.user['current_user']
        return True
    
    return False

# Missing database helper functions
def create_user(email, role, institution_id, first_name, last_name, school_id=None, program_id=None, department_id=None, academic_cycle_id=None):
    """Create a new user with generated password"""
    # Generate random password
    raw_password = secrets.token_urlsafe(8)
    salt = secrets.token_hex(16)
    password_hash = hash_password(raw_password, salt)
    
    user_doc = {
        'email': email.lower().strip(),
        'password_hash': password_hash,
        'salt': salt,
        'role': role,
        'first_name': first_name,
        'last_name': last_name,
        'institution_id': institution_id,
        'school_id': school_id,
        'program_id': program_id,
        'department_id': department_id,
        'academic_cycle_id': academic_cycle_id,
        'must_change_password': True,
        'created_at': datetime.datetime.utcnow(),
        'updated_at': datetime.datetime.utcnow()
    }
    
    result = users_col.insert_one(user_doc)
    
    # If creating a Program Admin, update the program's admin_email field
    if role == 'Program Admin' and program_id:
        from bson import ObjectId
        try:
            programs_col.update_one(
                {'_id': ObjectId(program_id)},
                {'$set': {'admin_email': email.lower().strip(), 'updated_at': datetime.datetime.utcnow()}}
            )
        except Exception as e:
            print(f"Error updating program admin email: {e}")
    
    log_audit_action(
        action='Created User',
        details=f'User "{email}" created with role "{role}"',
        institution_id=institution_id,
        entity_type='user',
        entity_id=str(result.inserted_id)
    )
    
    return result, raw_password

# Beautiful Global Styles with Theme Support
def add_beautiful_global_styles():
    """Add comprehensive styling with theme color support"""
    ui.add_head_html("""
    <style>
        :root {
            --primary-color: rgb(154, 44, 84);
            --primary-dark: rgb(124, 35, 67);
            --primary-light: rgba(154, 44, 84, 0.1);
            --success-color: #4caf50;
            --warning-color: #ff9800;
            --error-color: #f44336;
            --info-color: #2196f3;
            --text-primary: #2c3e50;
            --text-secondary: #546e7a;
            --background: #fafafa;
            --surface: #ffffff;
            --border: rgba(154, 44, 84, 0.2);
            --shadow: 0 2px 8px rgba(154, 44, 84, 0.12);
            --shadow-hover: 0 4px 16px rgba(154, 44, 84, 0.16);
            --border-radius: 8px;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        body {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background);
            color: var(--text-primary);
            line-height: 1.6;
        }
        
        /* Beautiful Cards */
        .beautiful-card {
            background: var(--surface);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--border);
            transition: var(--transition);
            overflow: hidden;
        }
        
        .beautiful-card:hover {
            box-shadow: var(--shadow-hover);
            transform: translateY(-2px);
        }
        
        /* Themed Buttons */
        .btn-primary {
            background: var(--primary-color);
            color: white;
            border: 2px solid var(--primary-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .btn-primary:hover {
            background: var(--primary-dark);
            border-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-hover);
        }
        
        .btn-secondary {
            background: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .btn-secondary:hover {
            background: var(--primary-light);
            transform: translateY(-1px);
        }
        
        /* Sidebar Button Styling */
        .sidebar button {
            color: var(--text-primary) !important;
            background: transparent !important;
            border: none !important;
            transition: all 0.3s ease !important;
            border-radius: 8px !important;
        }
        
        .sidebar button:hover {
            background: var(--primary-light) !important;
            color: var(--primary-color) !important;
            transform: translateX(4px);
        }
        
        .btn-success {
            background: var(--success-color);
            color: white;
            border: 2px solid var(--success-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .btn-warning {
            background: var(--warning-color);
            color: white;
            border: 2px solid var(--warning-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .btn-danger {
            background: var(--error-color);
            color: white;
            border: 2px solid var(--error-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
        }
        
        /* Beautiful Inputs */
        .beautiful-input {
            border: 2px solid var(--border);
            border-radius: var(--border-radius);
            padding: 0.75rem;
            transition: var(--transition);
            background: var(--surface);
        }
        
        .beautiful-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            outline: none;
        }
        
        /* Layout Components */
        .sidebar {
            position: fixed !important;
            top: 0;
            left: 0;
            width: 280px;
            background: var(--surface);
            border-right: 1px solid var(--border);
            height: 100vh;
            max-height: 100vh;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 1.5rem;
            z-index: 1000;
        }
        
        .main-content {
            margin-left: 280px;
            background: var(--background);
            min-height: 100vh;
            padding: 2rem;
        }
        
        /* Status Indicators */
        .status-success {
            background: #e8f5e9;
            color: #2e7d32;
            border: 1px solid #c8e6c9;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 500;
        }
        
        .status-warning {
            background: #fff3e0;
            color: #f57c00;
            border: 1px solid #ffcc02;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 500;
        }
        
        .status-error {
            background: #ffebee;
            color: #c62828;
            border: 1px solid #ef9a9a;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 500;
        }
        
        /* Animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        .animate-fade-in-up {
            animation: fadeInUp 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.9rem;
        }
        
        .input-beautiful {
            width: 100%;
            border: 2px solid var(--border);
            border-radius: var(--border-radius);
            padding: 0.875rem 1rem;
            transition: var(--transition);
            background: var(--surface);
            font-size: 1rem;
        }
        
        .input-beautiful:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            outline: none;
        }
        
        .btn-beautiful {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            padding: 0.875rem 1.5rem;
            font-weight: 600;
            transition: var(--transition);
            cursor: pointer;
            font-size: 1rem;
        }
        
        .btn-beautiful:hover {
            background: linear-gradient(135deg, var(--primary-dark) 0%, #4c63d2 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }
        
        .slide-up {
            animation: slideUp 0.3s ease-out;
        }
        
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    </style>
    """)

# Color utility functions
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb

def lighten_color(color, percent):
    """Lighten a color by a percentage"""
    if color.startswith('rgb'):
        # Extract RGB values from rgb() string
        import re
        nums = re.findall(r'\d+', color)
        if len(nums) >= 3:
            r, g, b = int(nums[0]), int(nums[1]), int(nums[2])
        else:
            r, g, b = 102, 126, 234  # fallback
    else:
        # Assume hex color
        try:
            r, g, b = hex_to_rgb(color)
        except:
            r, g, b = 102, 126, 234  # fallback
    
    # Lighten each component
    r = min(255, int(r + (255 - r) * percent))
    g = min(255, int(g + (255 - g) * percent))
    b = min(255, int(b + (255 - b) * percent))
    
    return f'rgb({r}, {g}, {b})'

def darken_color(color, percent):
    """Darken a color by a percentage"""
    if color.startswith('rgb'):
        import re
        nums = re.findall(r'\d+', color)
        if len(nums) >= 3:
            r, g, b = int(nums[0]), int(nums[1]), int(nums[2])
        else:
            r, g, b = 102, 126, 234  # fallback
    else:
        try:
            r, g, b = hex_to_rgb(color)
        except:
            r, g, b = 102, 126, 234  # fallback
    
    # Darken each component
    r = max(0, int(r * (1 - percent)))
    g = max(0, int(g * (1 - percent)))
    b = max(0, int(b * (1 - percent)))
    
    return f'rgb({r}, {g}, {b})'

def set_theme_colors(primary_color):
    """Set CSS custom properties for theme colors"""
    light_color = lighten_color(primary_color, 0.8)
    dark_color = darken_color(primary_color, 0.1)
    
    ui.add_head_html(f"""
    <style>
        :root {{
            --primary-color: {primary_color};
            --primary-dark: {dark_color};
            --primary-light: {light_color};
        }}
    </style>
    """)

# Helper Functions
def log_audit_action(action, details, user_email=None, institution_id=None, entity_type=None, entity_id=None):
    """Log an audit action"""
    global current_user
    if not user_email and current_user:
        user_email = current_user.get('email', 'Unknown')
    
    audit_log = {
        'timestamp': datetime.datetime.utcnow(),
        'user_email': user_email or 'System',
        'action': action,
        'details': details,
        'ip_address': '127.0.0.1',
        'institution_id': institution_id,
        'entity_type': entity_type,
        'entity_id': entity_id,
        'created_at': datetime.datetime.utcnow()
    }
    audit_logs_col.insert_one(audit_log)

def hash_password(password, salt):
    """Hash a password with salt"""
    return hashlib.sha256((password + salt).encode()).hexdigest()

# Program Code Generation
def generate_program_code(institution_id, academic_year_name, program_type, program_name):
    """
    Generate a unique program code in format: ITM_2023_UG_BAC001
    Format: INSTITUTION_YEAR_TYPE_PROGRAM001
    - ITM = Institution abbreviation (first 3 letters)
    - 2023 = Academic year (extracted from format like "2023-24")
    - UG/PG/PHD/DP = Program type
    - BAC = First 3 letters of program name
    - 001 = Sequential number (ensures uniqueness)
    """
    from bson import ObjectId
    
    # Get institution abbreviation (first 3 letters of name, uppercase)
    inst = institutions_col.find_one({'_id': ObjectId(institution_id)})
    inst_name = inst.get('name', 'ITM') if inst else 'ITM'
    inst_abbr = ''.join([c for c in inst_name if c.isalpha()])[:3].upper()
    if len(inst_abbr) < 3:
        inst_abbr = inst_abbr + 'M' * (3 - len(inst_abbr))  # Pad with M if needed
    
    # Extract year from academic year name (2023-24 -> 2023)
    year_abbr = academic_year_name.split('-')[0] if '-' in academic_year_name else academic_year_name[:4]
    # Clean year to ensure it's numeric
    year_abbr = ''.join([c for c in year_abbr if c.isdigit()])[:4]
    if len(year_abbr) < 4:
        year_abbr = '2023'  # Default fallback
    
    # Program type mapping
    type_mapping = {
        'Undergraduate': 'UG',
        'Postgraduate': 'PG', 
        'Diploma': 'DP',
        'Certificate': 'CT',
        'Doctorate': 'PHD',
        'PhD': 'PHD'
    }
    type_abbr = type_mapping.get(program_type, program_type.upper()[:3])
    
    # Program abbreviation (first 3 letters of program name, uppercase)
    prog_name_clean = ''.join([c for c in program_name if c.isalpha()])
    prog_abbr = prog_name_clean[:3].upper() if prog_name_clean else 'PRG'
    if len(prog_abbr) < 3:
        prog_abbr = prog_abbr + 'G' * (3 - len(prog_abbr))  # Pad with G if needed
    
    # Base code format: ITM_2023_UG_BAC
    base_code = f"{inst_abbr}_{year_abbr}_{type_abbr}_{prog_abbr}"
    
    # Find all existing codes with this base pattern to determine next sequence number
    existing_codes = list(programs_col.find(
        {'code': {'$regex': f'^{base_code}\\d{{3}}$'}},  # Match exact pattern with 3 digits
        {'code': 1}
    ))
    
    # Extract sequence numbers and find the next available one
    used_sequences = []
    for doc in existing_codes:
        code = doc.get('code', '')
        if code.startswith(base_code) and len(code) == len(base_code) + 3:
            try:
                seq_num = int(code[-3:])  # Last 3 digits
                used_sequences.append(seq_num)
            except ValueError:
                continue
    
    # Find next available sequence number
    sequence = 1
    while sequence in used_sequences:
        sequence += 1
    
    # Ensure sequence doesn't exceed 999
    if sequence > 999:
        sequence = 999
    
    # Format final code: ITM_2023_UG_BAC001
    final_code = f"{base_code}{sequence:03d}"
    
    return final_code
    if existing_codes:
        # Extract sequence numbers from existing codes
        sequences = []
        for prog in existing_codes:
            code = prog.get('code', '')
            if code:
                try:
                    seq_part = code.split('_')[-1]  # Get last part
                    seq_num = ''.join(filter(str.isdigit, seq_part))  # Extract digits
                    if seq_num:
                        sequences.append(int(seq_num))
                except:
                    pass
        if sequences:
            sequence = max(sequences) + 1
    
    # Generate final code
    code = f"{inst_abbr}_{year_abbr}_{type_abbr}_{prog_abbr}{sequence:03d}"
    return code

# Create User Group Page
@ui.page('/institution_admin/{inst_id}/create_user_group')
def create_user_group_page(inst_id: str):
    """Create user group with hierarchy context"""
    add_beautiful_global_styles()
    
    # Check authentication
    if not check_auth():
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    from nicegui import app
    from bson import ObjectId
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    # Get query parameters from the current request
    try:
        from nicegui import context
        query_params = context.get().request.query_params
        school_id = query_params.get('school_id','')
        program_id = query_params.get('program_id','')
        department_id = query_params.get('department_id','')
    except:
        school_id = ''
        program_id = ''
        department_id = ''
    
    # Determine default role based on context
    default_role = ''
    context_info = ''
    if school_id:
        try:
            school_doc = schools_col.find_one({'_id': ObjectId(school_id)})
            school_name = school_doc.get('name', 'Unknown') if school_doc else 'Unknown'
            default_role = 'School Admin'
            context_info = f'School: {school_name}'
        except:
            context_info = 'Invalid School ID'
    elif program_id:
        try:
            program_doc = programs_col.find_one({'_id': ObjectId(program_id)})
            program_name = program_doc.get('name', 'Unknown') if program_doc else 'Unknown'
            default_role = 'Program Admin'
            context_info = f'Program: {program_name}'
        except:
            context_info = 'Invalid Program ID'
    elif department_id:
        try:
            dept_doc = schools_col.find_one({'_id': ObjectId(department_id)})
            dept_name = dept_doc.get('name', 'Unknown') if dept_doc else 'Unknown'
            default_role = 'Department Admin'
            context_info = f'Department: {dept_name}'
        except:
            context_info = 'Invalid Department ID'
    
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    main_color = inst.get('theme_color', '#667eea')
    
    # Modal form
    with ui.row().style('position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1000; align-items: center; justify-content: center; backdrop-filter: blur(8px); background: rgba(0,0,0,0.18);'):
        with ui.card().style(f'align-items: center; padding: 2.5rem; background: #fff; border-radius: 18px; box-shadow: 0 4px 32px rgba(0,0,0,0.18); min-width: 400px;'):
            ui.label('Create User Group').style(f'font-size: 1.7rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
            
            # Show context information
            if context_info:
                ui.label(context_info).style(f'font-size: 0.9rem; color: {main_color}; margin-bottom: 1rem; font-weight: bold;')
            
            first_name = ui.input('First Name').style('width: 350px; margin-bottom: 1rem;')
            last_name = ui.input('Last Name').style('width: 350px; margin-bottom: 1rem;')
            email = ui.input('Email').props('type=email').style('width: 350px; margin-bottom: 1rem;')
            
            # Role display based on context
            with ui.row().style('align-items: center; margin-bottom: 1rem;'):
                ui.label('Role:').style('font-weight: bold; margin-right: 0.5rem;')
                
                if program_id:
                    ui.label('Program Admin').style(f'color: {main_color}; font-weight: bold; background: {main_color}20; padding: 0.25rem 0.5rem; border-radius: 4px;')
                elif school_id:
                    ui.label('School Admin').style(f'color: {main_color}; font-weight: bold; background: {main_color}20; padding: 0.25rem 0.5rem; border-radius: 4px;')
                elif department_id:
                    ui.label('Department Admin').style(f'color: {main_color}; font-weight: bold; background: {main_color}20; padding: 0.25rem 0.5rem; border-radius: 4px;')
                else:
                    ui.label(default_role).style(f'color: {main_color}; font-weight: bold; background: {main_color}20; padding: 0.25rem 0.5rem; border-radius: 4px;')
            
            roles_input = ui.input('Role', value=default_role).style('width: 350px; margin-bottom: 1rem; display: none;')  # Hidden field for form submission
            
            def submit_user():
                selected_academic_year_id = app.storage.user.get('selected_academic_year_id') if app.storage.user else None
                if not selected_academic_year_id:
                    ui.notify('Select an academic year first', color='negative')
                    return
                
                if not all([first_name.value, last_name.value, email.value, roles_input.value]):
                    ui.notify('All fields are required', color='negative')
                    return
                
                result, raw_password = create_user(
                    email=email.value,
                    role=roles_input.value,
                    institution_id=inst_id,
                    first_name=first_name.value,
                    last_name=last_name.value,
                    school_id=school_id if school_id else None,
                    program_id=program_id if program_id else None,
                    department_id=department_id if department_id else None,
                    academic_cycle_id=selected_academic_year_id
                )
                ui.notify(f'User created! Password: {raw_password}', color='positive')
                ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')
                
            ui.button('Create User', on_click=submit_user).style(f'background: {main_color}; color: #fff; width: 350px; margin-top: 1rem; font-size: 1.1rem;')
            ui.button('Cancel', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/hierarchy')).style(f'background: #6c757d; color: #fff; width: 350px; margin-top: 0.5rem; font-size: 1.1rem;')

# Sidebar for Institution Admin
def institution_admin_sidebar(inst_id, content_func):
    """Create institution admin sidebar with themed styling"""
    global current_user
    if not current_user or not current_user.get('email'):
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    # Initialize app.storage.user if needed
    if not hasattr(app.storage, 'user'):
        app.storage.user = {}
    
    from bson import ObjectId
    inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
    if not inst:
        ui.label('Institution not found').style('font-size: 1.2rem; color: #c00; margin-top: 2rem;')
        return
    
    # Set theme colors
    main_color = inst.get('theme_color', '#667eea')
    set_theme_colors(main_color)
    light_color = lighten_color(main_color, 0.8)
    dark_color = darken_color(main_color, 0.1)
    
    logo_url = inst.get('logo') or 'https://ui-avatars.com/api/?name=' + (inst.get('name') or 'Institution')
    
    with ui.row().style('height: 100vh; width: 100vw; background: var(--background);'):
        # Sidebar
        with ui.column().classes('sidebar').style(f'min-width: 280px; background: var(--surface); border-right: 1px solid var(--border); height: 100vh; overflow-y: auto;'):
            # Institution header
            with ui.row().style('align-items: center; margin-bottom: 2rem;'):
                ui.image(logo_url).style('width: 50px; height: 50px; border-radius: 8px; margin-right: 1rem;')
                with ui.column():
                    ui.label(inst.get('name', 'Institution')).style('font-size: 1.1rem; font-weight: bold; color: var(--text-primary);')
                    ui.label('Admin Portal').style('font-size: 0.9rem; color: var(--text-secondary);')
            
            # Navigation menu with sections
            ui.separator().style('margin: 1rem 0; background: var(--border);')
            
            # Overview Section
            ui.label('📊 OVERVIEW').style('font-size: 0.8rem; font-weight: bold; color: var(--text-secondary); margin-bottom: 0.5rem; text-align: left; padding: 0 1rem; letter-spacing: 1px;')
            overview_items = [
                ('🏠', 'Dashboard', f'/institution_admin/{inst_id}'),
                ('🏛️', 'Institution Details', f'/institution_admin/{inst_id}/details'),
            ]
            
            for icon, label, url in overview_items:
                ui.button(f'{icon} {label}', on_click=lambda u=url: ui.navigate.to(u)).style(
                    f'width: 100%; justify-content: flex-start; margin-bottom: 0.3rem; text-align: left; '
                    f'background: transparent; color: var(--text-primary); border: none; '
                    f'padding: 0.75rem 1rem; border-radius: var(--border-radius); '
                    f'transition: var(--transition);'
                ).props('flat')
            
            ui.separator().style('margin: 1rem 0; background: var(--border);')
            
            # Academic Structure Section
            ui.label('🏫 ACADEMIC STRUCTURE').style('font-size: 0.8rem; font-weight: bold; color: var(--text-secondary); margin-bottom: 0.5rem; text-align: left; padding: 0 1rem; letter-spacing: 1px;')
            academic_items = [
                ('🏫', 'Institutional Hierarchy', f'/institution_admin/{inst_id}/hierarchy'),
                ('�', 'Academic Years', f'/institution_admin/{inst_id}/academic_years'),
            ]
            
            for icon, label, url in academic_items:
                ui.button(f'{icon} {label}', on_click=lambda u=url: ui.navigate.to(u)).style(
                    f'width: 100%; justify-content: flex-start; margin-bottom: 0.3rem; text-align: left; '
                    f'background: transparent; color: var(--text-primary); border: none; '
                    f'padding: 0.75rem 1rem; border-radius: var(--border-radius); '
                    f'transition: var(--transition);'
                ).props('flat')
            
            ui.separator().style('margin: 1rem 0; background: var(--border);')
            
            # Assessment & Data Section
            ui.label('📊 ASSESSMENT & DATA').style('font-size: 0.8rem; font-weight: bold; color: var(--text-secondary); margin-bottom: 0.5rem; text-align: left; padding: 0 1rem; letter-spacing: 1px;')
            assessment_items = [
                ('�📊', 'Criterias', f'/institution_admin/{inst_id}/criterias'),
                ('📝', 'Extended Profiles', f'/institution_admin/{inst_id}/extended_profiles'),
                ('📈', 'Spreadsheets', f'/institution_admin/{inst_id}/spreadsheets'),
            ]
            
            for icon, label, url in assessment_items:
                ui.button(f'{icon} {label}', on_click=lambda u=url: ui.navigate.to(u)).style(
                    f'width: 100%; justify-content: flex-start; margin-bottom: 0.3rem; text-align: left; '
                    f'background: transparent; color: var(--text-primary); border: none; '
                    f'padding: 0.75rem 1rem; border-radius: var(--border-radius); '
                    f'transition: var(--transition);'
                ).props('flat')
            
            ui.separator().style('margin: 1rem 0; background: var(--border);')
            
            # Management Section
            ui.label('⚙️ MANAGEMENT').style('font-size: 0.8rem; font-weight: bold; color: var(--text-secondary); margin-bottom: 0.5rem; text-align: left; padding: 0 1rem; letter-spacing: 1px;')
            management_items = [
                ('�', 'Manage Users', f'/institution_admin/{inst_id}/users'),
                ('📋', 'Audit Logs', f'/institution_admin/{inst_id}/audit_logs'),
            ]
            
            for icon, label, url in management_items:
                ui.button(f'{icon} {label}', on_click=lambda u=url: ui.navigate.to(u)).style(
                    f'width: 100%; justify-content: flex-start; margin-bottom: 0.3rem; text-align: left; '
                    f'background: transparent; color: var(--text-primary); border: none; '
                    f'padding: 0.75rem 1rem; border-radius: var(--border-radius); '
                    f'transition: var(--transition);'
                ).props('flat')
            
            ui.separator().style('margin: 1rem 0; background: var(--border);')
            
            # Logout button
            def logout():
                global current_user
                current_user = None
                if hasattr(app.storage, 'user'):
                    app.storage.user.clear()
                ui.notify('Logged out successfully', color='positive')
                ui.navigate.to('/')
            
            ui.button('🚪 Logout', on_click=logout).style(
                'width: 100%; margin-top: auto; background: var(--error-color); color: white;'
            )
        
        # Main content area
        with ui.column().classes('main-content').style('flex: 1; padding: 2rem; overflow-y: auto;'):
            content_func(inst, main_color)

@ui.page('/institution_admin/{inst_id}')
def institution_admin_dashboard(inst_id: str):
    """Institution admin dashboard"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Institution Admin Dashboard').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Quick stats cards
        with ui.row().style('width: 100%; gap: 1rem; margin-bottom: 2rem;'):
            # Academic Years count
            years_count = academic_years_col.count_documents({'institution_id': inst_id})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('📅').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(years_count)).style('font-size: 2rem; font-weight: bold; color: var(--primary-color);')
                ui.label('Academic Years').style('color: var(--text-secondary);')
            
            # Schools count
            schools_count = schools_col.count_documents({'institution_id': inst_id})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('🏫').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(schools_count)).style('font-size: 2rem; font-weight: bold; color: var(--success-color);')
                ui.label('Schools').style('color: var(--text-secondary);')
            
            # Programs count
            programs_count = programs_col.count_documents({'institution_id': inst_id})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('🎓').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(programs_count)).style('font-size: 2rem; font-weight: bold; color: var(--info-color);')
                ui.label('Programs').style('color: var(--text-secondary);')
            
            # Criterias count
            criterias_count = criterias_col.count_documents({'institution_id': inst_id})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('📊').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(criterias_count)).style('font-size: 2rem; font-weight: bold; color: var(--warning-color);')
                ui.label('Criterias').style('color: var(--text-secondary);')
            
            # Extended Profiles count
            profiles_count = extended_profiles_col.count_documents({'institution_id': inst_id})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('📝').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(profiles_count)).style('font-size: 2rem; font-weight: bold; color: var(--primary-color);')
                ui.label('Extended Profiles').style('color: var(--text-secondary);')
        
        # Recent activity
        with ui.card().classes('beautiful-card').style('width: 100%; padding: 1.5rem;'):
            ui.label('Recent Activity').style('font-size: 1.5rem; font-weight: bold; margin-bottom: 1rem;')
            
            recent_logs = list(audit_logs_col.find(
                {'institution_id': inst_id}
            ).sort('timestamp', -1).limit(5))
            
            if recent_logs:
                for log in recent_logs:
                    with ui.row().style('align-items: center; padding: 0.5rem 0; border-bottom: 1px solid var(--border);'):
                        ui.label('•').style('color: var(--primary-color); margin-right: 0.5rem;')
                        ui.label(log.get('action', 'Unknown Action')).style('font-weight: 500;')
                        ui.label(log.get('details', '')).style('color: var(--text-secondary); margin-left: 1rem;')
                        if log.get('timestamp'):
                            ui.label(log['timestamp'].strftime('%Y-%m-%d %H:%M')).style(
                                'margin-left: auto; color: var(--text-secondary); font-size: 0.9rem;'
                            )
            else:
                ui.label('No recent activity').style('color: var(--text-secondary); font-style: italic;')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/criterias')
def institution_admin_criterias(inst_id: str):
    """Enhanced criterias management page"""
    add_beautiful_global_styles()
    
    # Check authentication
    if not check_auth():
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    def content(inst, main_color):
        ui.label('Criterias Management').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
        )
        
        # Academic year selector
        from nicegui import app
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        
        # Initialize session if needed
        if not hasattr(app.storage, 'user'):
            app.storage.user = {}
        
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        
        def on_year_change(e):
            if hasattr(app.storage, 'user'):
                app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
            # Automatically refresh the page content
            ui.run_javascript('window.location.reload()')
        
        with ui.row().style('width: 100%; align-items: center; justify-content: flex-end; margin-bottom: 1rem;'):
            if year_options:
                selected_year_name = None
                for name, id_val in name_to_id.items():
                    if id_val == selected_year_id:
                        selected_year_name = name
                        break
                
                ui.select(
                    options=year_options,
                    value=selected_year_name,
                    on_change=on_year_change,
                    label='Academic Year'
                ).style('min-width: 200px;').classes('beautiful-input')
        
        # Create criteria button
        def open_create_dialog():
            if not selected_year_id:
                ui.notify('Select an academic year first', color='negative')
                return
            
            with ui.dialog() as dialog:
                with ui.card().style(
                    'padding: 2rem; min-width: 800px; max-width: 1000px; max-height: 90vh; overflow-y: auto;'
                ).classes('beautiful-card'):
                    ui.label('Create New Criteria').style(
                        f'font-size: 1.8rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem; text-align: center;'
                    )
                    
                    with ui.column().style('width: 100%; gap: 1.5rem;'):
                        # Basic Information
                        ui.label('Basic Information').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem;'
                        )
                        
                        criteria_name = ui.input('Criteria Name').classes('beautiful-input').style('width: 100%;')
                        criteria_description = ui.textarea('Description').classes('beautiful-input').style('width: 100%; min-height: 100px;')
                        
                        # Criteria Type Selection
                        ui.label('Criteria Type').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem; margin-top: 1rem;'
                        )
                        
                        scope_type = ui.select(
                            options=['Program-based', 'Department-based'],
                            value='Program-based',
                            label='Choose whether this criteria applies to programs or departments'
                        ).classes('beautiful-input').style('width: 100%; margin-bottom: 1rem;')
                        
                        ui.label('Choose whether this criteria applies to programs or departments.').style(
                            'color: var(--text-secondary); font-size: 0.9rem; margin-top: -0.5rem; margin-bottom: 1rem;'
                        )
                        
                        # Deadline
                        deadline_input = ui.input('Deadline').props('type=date').classes('beautiful-input').style('width: 100%; margin-bottom: 1rem;')
                        
                        # Headers/Fields
                        ui.label('Spreadsheet Headers').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem;'
                        )
                        
                        headers_input = ui.textarea(
                            'Headers (one per line)',
                            placeholder='ID\nName\nDescription\nScore\nRemarks'
                        ).classes('beautiful-input').style('width: 100%; min-height: 120px;')
                        
                        # Table Preview
                        ui.label('Criteria Preview').style(
                            f'font-size: 1.1rem; font-weight: bold; color: {main_color}; margin: 1.5rem 0 0.5rem 0;'
                        )
                        
                        preview_container = ui.column().style('width: 100%;')
                        
                        def update_preview():
                            if not headers_input.value:
                                preview_container.clear()
                                with preview_container:
                                    ui.label('Enter headers above to see table preview').style('color: #666; font-style: italic; text-align: center;')
                                return
                                
                            preview_container.clear()
                            headers = [h.strip() for h in headers_input.value.split('\n') if h.strip()]
                            
                            if headers:
                                with preview_container:
                                    # Show scope type indicator
                                    ui.label(f'Scope: {scope_type.value}').style(f'color: {main_color}; font-weight: bold; margin-bottom: 0.5rem;')
                                    
                                    with ui.card().style('width: 100%; background: white; border: 2px solid rgba(154, 44, 84, 0.2); padding: 1rem; border-radius: 8px;'):
                                        # Create table with proper styling
                                        with ui.element('table').style('width: 100%; border-collapse: collapse;'):
                                            # Header row
                                            with ui.element('thead'):
                                                with ui.element('tr'):
                                                    for header in headers:
                                                        with ui.element('th').style('background: rgb(154, 44, 84); color: white; padding: 12px; text-align: left; border: 1px solid #ddd; font-weight: bold;'):
                                                            ui.label(header)
                                            
                                            # Sample data rows
                                            with ui.element('tbody'):
                                                sample_data = [
                                                    ['1', 'Sample Item 1', 'Description 1', '85', 'Good'],
                                                    ['2', 'Sample Item 2', 'Description 2', '92', 'Excellent'],
                                                    ['3', 'Sample Item 3', 'Description 3', '78', 'Satisfactory']
                                                ]
                                                
                                                for i, row_data in enumerate(sample_data):
                                                    with ui.element('tr'):
                                                        for j, header in enumerate(headers):
                                                            sample_value = row_data[j] if j < len(row_data) else f'Sample {i+1}-{j+1}'
                                                            with ui.element('td').style('padding: 10px; border: 1px solid #ddd; background: #f9f9f9;'):
                                                                ui.label(sample_value).style('font-size: 0.9rem;')
                                    
                                    ui.label(f'Table will have {len(headers)} columns as shown above').style(
                                        'font-size: 0.8rem; color: #666; margin-top: 0.5rem; text-align: center;'
                                    )
                        
                        # Real-time update on input change
                        headers_input.on_value_change(lambda: update_preview())
                        scope_type.on_value_change(lambda: update_preview())
                        criteria_name.on_value_change(lambda: update_preview())
                        
                        # Initialize preview
                        update_preview()
                        
                        # Options
                        with ui.row().style('width: 100%; gap: 2rem; margin-top: 1rem;'):
                            needs_docs = ui.checkbox('Needs Supporting Documents', value=True)
                            is_editable = ui.checkbox('Is Editable', value=True)
                        
                        # Create function
                        def create_criteria():
                            global current_user
                            if not criteria_name.value:
                                ui.notify('Criteria name is required', color='negative')
                                return
                            
                            if not headers_input.value:
                                ui.notify('At least one header is required', color='negative')
                                return
                            
                            # Parse headers
                            headers = [h.strip() for h in headers_input.value.split('\n') if h.strip()]
                            
                            # Determine scope type and department_id
                            scope_val = 'program_based' if scope_type.value == 'Program-based' else 'department_based'
                            dept_id = None  # For now, we'll implement department selection later
                            
                            # Parse deadline
                            deadline_val = None
                            if deadline_input.value:
                                try:
                                    deadline_val = datetime.datetime.strptime(deadline_input.value, '%Y-%m-%d')
                                except:
                                    pass
                            
                            criteria_doc = {
                                'name': criteria_name.value,
                                'description': criteria_description.value,
                                'deadline': deadline_val,
                                'institution_id': inst_id,
                                'academic_cycle_id': selected_year_id,
                                'scope_type': scope_val,
                                'department_id': dept_id,
                                'headers': headers,
                                'needs_supporting_docs': needs_docs.value,
                                'is_editable': is_editable.value,
                                'created_at': datetime.datetime.utcnow(),
                                'updated_at': datetime.datetime.utcnow(),
                                'created_by': current_user.get('email', 'admin') if current_user else 'admin'
                            }
                            
                            try:
                                result = criterias_col.insert_one(criteria_doc)
                                
                                log_audit_action(
                                    action='Created Criteria',
                                    details=f'Criteria "{criteria_name.value}" created with scope: {scope_val}',
                                    institution_id=inst_id,
                                    entity_type='criteria',
                                    entity_id=str(result.inserted_id)
                                )
                                
                                ui.notify(f'Criteria "{criteria_name.value}" created successfully!', color='positive')
                                dialog.close()
                                # Force page refresh instead of navigation to avoid flicker
                                ui.run_javascript('window.location.reload()')
                            
                            except Exception as e:
                                ui.notify(f'Error creating criteria: {str(e)}', color='negative')
                        
                        # Action buttons
                        with ui.row().style('width: 100%; justify-content: space-between; margin-top: 2rem;'):
                            ui.button('Cancel', on_click=dialog.close).classes('btn-secondary')
                            ui.button('Create Criteria', on_click=create_criteria).classes('btn-primary')
                
                dialog.open()
        
        ui.button('+ Create New Criteria', on_click=open_create_dialog).classes('btn-primary').style('margin-bottom: 2rem;')
        
        # Display existing criterias
        if selected_year_id:
            existing_criterias = list(criterias_col.find({
                'institution_id': inst_id,
                'academic_cycle_id': selected_year_id
            }))
            
            if existing_criterias:
                ui.label(f'Existing Criterias ({len(existing_criterias)} found)').style(
                    f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
                )
                
                for criteria in existing_criterias:
                    with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1rem; padding: 1.5rem;'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column().style('flex: 1;'):
                                criteria_name = criteria.get('name', 'Unnamed Criteria')
                                scope_type = criteria.get('scope_type', 'program_based')
                                scope_label = 'Program-based' if scope_type == 'program_based' else 'Department-based'
                                
                                ui.label(f"📊 {criteria_name}").style(
                                    'font-size: 1.2rem; font-weight: bold; color: var(--text-primary); margin-bottom: 0.5rem;'
                                )
                                ui.label(f"Type: {scope_label}").style(
                                    'font-size: 0.9rem; color: var(--primary-color); margin-bottom: 0.3rem;'
                                )
                                
                                headers = criteria.get('headers', [])
                                if headers:
                                    ui.label(f"Headers: {', '.join(headers[:3])}{'...' if len(headers) > 3 else ''}").style(
                                        'font-size: 0.8rem; color: var(--text-secondary);'
                                    )
                                
                                if criteria.get('deadline'):
                                    deadline_str = criteria['deadline'].strftime('%Y-%m-%d')
                                    ui.label(f"Deadline: {deadline_str}").style(
                                        'font-size: 0.8rem; color: var(--warning-color);'
                                    )
                                
                                created_at = criteria.get('created_at')
                                if created_at:
                                    ui.label(f"Created: {created_at.strftime('%Y-%m-%d %H:%M')}").style(
                                        'font-size: 0.8rem; color: var(--text-secondary);'
                                    )
                            
                            with ui.row().style('gap: 0.5rem;'):
                                ui.button(
                                    '📈 View Data',
                                    on_click=lambda c_id=str(criteria['_id']): ui.navigate.to(
                                        f'/institution_admin/{inst_id}/spreadsheets?criteria_id={c_id}'
                                    )
                                ).classes('btn-success')
                                
                                # Edit button
                                def edit_criteria(criteria_id=str(criteria['_id']), crit=criteria):
                                    with ui.dialog() as edit_dialog:
                                        with ui.card().style('padding: 2rem; min-width: 600px;').classes('beautiful-card'):
                                            ui.label('Edit Criteria').style(
                                                f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
                                            )
                                            
                                            edit_name = ui.input('Criteria Name', value=crit.get('name', '')).style('width: 100%; margin-bottom: 1rem;')
                                            edit_description = ui.textarea('Description', value=crit.get('description', '')).style('width: 100%; margin-bottom: 1rem;')
                                            
                                            edit_headers = ui.textarea(
                                                'Headers (one per line)',
                                                value='\n'.join(crit.get('headers', []))
                                            ).style('width: 100%; margin-bottom: 1rem;')
                                            
                                            edit_needs_docs = ui.checkbox('Needs Supporting Documents', value=crit.get('needs_supporting_docs', False))
                                            edit_is_editable = ui.checkbox('Is Editable', value=crit.get('is_editable', True))
                                            
                                            def save_changes():
                                                if not edit_name.value:
                                                    ui.notify('Criteria name is required', color='negative')
                                                    return
                                                
                                                headers = [h.strip() for h in edit_headers.value.split('\n') if h.strip()]
                                                
                                                criterias_col.update_one(
                                                    {'_id': ObjectId(criteria_id)},
                                                    {'$set': {
                                                        'name': edit_name.value,
                                                        'description': edit_description.value,
                                                        'headers': headers,
                                                        'needs_supporting_docs': edit_needs_docs.value,
                                                        'is_editable': edit_is_editable.value,
                                                        'updated_at': datetime.datetime.utcnow()
                                                    }}
                                                )
                                                
                                                log_audit_action(
                                                    action='Updated Criteria',
                                                    details=f'Criteria "{edit_name.value}" was updated',
                                                    institution_id=inst_id,
                                                    entity_type='criteria',
                                                    entity_id=criteria_id
                                                )
                                                
                                                ui.notify('Criteria updated successfully!', color='positive')
                                                edit_dialog.close()
                                                ui.run_javascript('window.location.reload()')
                                            
                                            with ui.row().style('margin-top: 1rem; gap: 1rem;'):
                                                ui.button('Cancel', on_click=edit_dialog.close).classes('btn-secondary')
                                                ui.button('Save Changes', on_click=save_changes).classes('btn-primary')
                                    
                                    edit_dialog.open()
                                
                                if criteria.get('is_editable', True):
                                    ui.button('✏️ Edit', on_click=edit_criteria).classes('btn-warning')
                                
                                def delete_criteria(criteria_id=str(criteria['_id']), criteria_name=criteria.get('name', '')):
                                    with ui.dialog() as delete_dialog:
                                        with ui.card().style('padding: 2rem;'):
                                            ui.label('Confirm Deletion').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                            ui.label(f'Are you sure you want to delete criteria "{criteria_name}"?').style('margin-bottom: 1rem;')
                                            ui.label('This action cannot be undone.').style('color: red; font-weight: bold; margin-bottom: 1rem;')
                                            
                                            def confirm_delete():
                                                log_audit_action(
                                                    action='Deleted Criteria',
                                                    details=f'Criteria "{criteria_name}" deleted',
                                                    institution_id=inst_id,
                                                    entity_type='criteria',
                                                    entity_id=criteria_id
                                                )
                                                criterias_col.delete_one({'_id': ObjectId(criteria_id)})
                                                ui.notify(f'Criteria "{criteria_name}" deleted', color='positive')
                                                delete_dialog.close()
                                                ui.run_javascript('window.location.reload()')
                                            
                                            with ui.row().style('gap: 1rem;'):
                                                ui.button('Cancel', on_click=delete_dialog.close).classes('btn-secondary')
                                                ui.button('Delete', on_click=confirm_delete).classes('btn-danger')
                                    
                                    delete_dialog.open()
                                
                                ui.button('🗑️ Delete', on_click=delete_criteria).classes('btn-danger')
            else:
                ui.label('No criterias found for the selected academic year.').style(
                    'color: var(--text-secondary); font-style: italic; margin-top: 2rem;'
                )
        else:
            ui.label('Please select an academic year to view criterias.').style(
                'color: var(--text-secondary); font-style: italic; margin-top: 2rem;'
            )
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/details')
def institution_admin_details(inst_id: str):
    """Institution details management page with complete information"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Institution Details').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Get complete institution document
        complete_inst = institutions_col.find_one({'_id': ObjectId(inst_id)})
        if not complete_inst:
            ui.label('Institution not found').style('color: var(--error-color); font-size: 1.2rem;')
            return
        
        # Basic Information Card
        with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1.5rem; padding: 2rem;'):
            ui.label('📋 Basic Information').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
            
            with ui.row().style('width: 100%; gap: 3rem;'):
                with ui.column().style('flex: 2;'):
                    # Institution details in a nice grid
                    details = [
                        ('Institution Name', complete_inst.get('name', 'N/A')),
                        ('Website URL', complete_inst.get('website_url', 'N/A')),
                        ('Email', complete_inst.get('email', 'N/A')),
                        ('Phone', complete_inst.get('phone', 'N/A')),
                        ('Address', complete_inst.get('address', 'N/A')),
                        ('City', complete_inst.get('city', 'N/A')),
                        ('State', complete_inst.get('state', 'N/A')),
                        ('Country', complete_inst.get('country', 'N/A')),
                        ('Postal Code', complete_inst.get('postal_code', 'N/A')),
                        ('Institution Type', complete_inst.get('institution_type', 'N/A')),
                        ('Establishment Year', complete_inst.get('establishment_year', 'N/A')),
                        ('Total Students', complete_inst.get('total_students', 'N/A')),
                        ('Total Faculty', complete_inst.get('total_faculty', 'N/A')),
                    ]
                    
                    with ui.element('div').style('display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;'):
                        for label, value in details:
                            with ui.card().style('padding: 1rem; border: 1px solid var(--border); background: #f8f9fa;'):
                                ui.label(label).style('font-weight: bold; color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem;')
                                ui.label(str(value)).style('font-size: 1rem; color: var(--text-primary);')
                
                with ui.column().style('flex: 1; align-items: center;'):
                    # Logo and theme
                    if complete_inst.get('logo'):
                        ui.image(complete_inst['logo']).style('width: 150px; height: 150px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); margin-bottom: 1rem;')
                    else:
                        with ui.card().style('width: 150px; height: 150px; display: flex; align-items: center; justify-content: center; background: #f0f0f0; border: 2px dashed #ccc;'):
                            ui.label('No Logo').style('color: #999; font-style: italic;')
                    
                    # Theme color
                    theme_color = complete_inst.get('theme_color', '#667eea')
                    ui.label('Theme Color').style('font-weight: bold; margin-bottom: 0.5rem;')
                    ui.html(f'''
                        <div style="
                            width: 80px; 
                            height: 40px; 
                            background: {theme_color}; 
                            border-radius: 8px; 
                            border: 1px solid #ccc;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            color: white;
                            font-size: 0.8rem;
                            font-weight: bold;
                            margin-bottom: 0.5rem;
                        ">{theme_color}</div>
                    ''')
                    
                    # Edit button
                    ui.button('✏️ Edit Details', on_click=lambda: open_edit_dialog()).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none; margin-top: 1rem;')
        
        # Academic Structure Card
        with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1.5rem; padding: 2rem;'):
            ui.label('🎓 Academic Structure').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
            
            # Get schools and programs count
            schools = list(schools_col.find({'institution_id': inst_id}))
            programs = list(programs_col.find({'institution_id': inst_id}))
            
            with ui.row().style('width: 100%; gap: 2rem;'):
                with ui.card().style('flex: 1; padding: 1.5rem; text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;'):
                    ui.label(str(len(schools))).style('font-size: 3rem; font-weight: bold; margin-bottom: 0.5rem;')
                    ui.label('Schools/Departments').style('font-size: 1.1rem;')
                
                with ui.card().style('flex: 1; padding: 1.5rem; text-align: center; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white;'):
                    ui.label(str(len(programs))).style('font-size: 3rem; font-weight: bold; margin-bottom: 0.5rem;')
                    ui.label('Programs').style('font-size: 1.1rem;')
        
        # System Information Card
        with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1.5rem; padding: 2rem;'):
            ui.label('⚙️ System Information').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
            
            with ui.row().style('width: 100%; gap: 2rem;'):
                with ui.column().style('flex: 1;'):
                    system_details = [
                        ('Institution ID', str(complete_inst.get('_id', 'N/A'))),
                        ('Created Date', complete_inst.get('created_at', datetime.datetime.now()).strftime('%Y-%m-%d %H:%M:%S') if complete_inst.get('created_at') else 'N/A'),
                        ('Last Updated', complete_inst.get('updated_at', datetime.datetime.now()).strftime('%Y-%m-%d %H:%M:%S') if complete_inst.get('updated_at') else 'N/A'),
                        ('Status', complete_inst.get('status', 'Active')),
                        ('NAAC Accreditation', complete_inst.get('naac_grade', 'Not Available')),
                        ('NBA Accreditation', complete_inst.get('nba_accreditation', 'Not Available')),
                    ]
                    
                    for label, value in system_details:
                        with ui.row().style('width: 100%; align-items: center; padding: 0.75rem; border-bottom: 1px solid var(--border);'):
                            ui.label(label).style('font-weight: bold; color: var(--text-secondary); min-width: 150px;')
                            ui.label(str(value)).style('color: var(--text-primary);')
        
        # Additional Data Card (if any extra fields exist)
        extra_fields = {k: v for k, v in complete_inst.items() 
                       if k not in ['_id', 'name', 'website_url', 'email', 'phone', 'address', 'city', 'state', 'country', 
                                   'postal_code', 'institution_type', 'establishment_year', 'total_students', 'total_faculty',
                                   'logo', 'theme_color', 'created_at', 'updated_at', 'status', 'naac_grade', 'nba_accreditation']}
        
        if extra_fields:
            with ui.card().classes('beautiful-card').style('width: 100%; padding: 2rem;'):
                ui.label('📝 Additional Information').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                
                for key, value in extra_fields.items():
                    with ui.row().style('width: 100%; align-items: center; padding: 0.75rem; border-bottom: 1px solid var(--border);'):
                        ui.label(str(key).replace('_', ' ').title()).style('font-weight: bold; color: var(--text-secondary); min-width: 200px;')
                        ui.label(str(value)[:200] + ('...' if len(str(value)) > 200 else '')).style('color: var(--text-primary);')
        
        def open_edit_dialog():
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 600px; max-height: 80vh; overflow-y: auto;'):
                    ui.label('Edit Institution Details').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    # Create input fields for editable data
                    inputs = {}
                    editable_fields = [
                        ('name', 'Institution Name'),
                        ('website_url', 'Website URL'),
                        ('email', 'Email'),
                        ('phone', 'Phone'),
                        ('address', 'Address'),
                        ('city', 'City'),
                        ('state', 'State'),
                        ('country', 'Country'),
                        ('postal_code', 'Postal Code'),
                        ('institution_type', 'Institution Type'),
                        ('establishment_year', 'Establishment Year'),
                        ('total_students', 'Total Students'),
                        ('total_faculty', 'Total Faculty'),
                    ]
                    
                    for field, label in editable_fields:
                        inputs[field] = ui.input(label, value=str(complete_inst.get(field, ''))).style('width: 100%; margin-bottom: 1rem;')
                    
                    def save_changes():
                        try:
                            update_data = {}
                            for field in inputs:
                                value = inputs[field].value.strip()
                                if field in ['establishment_year', 'total_students', 'total_faculty']:
                                    try:
                                        update_data[field] = int(value) if value else None
                                    except ValueError:
                                        update_data[field] = value
                                else:
                                    update_data[field] = value
                            
                            update_data['updated_at'] = datetime.datetime.now()
                            
                            institutions_col.update_one(
                                {'_id': ObjectId(inst_id)},
                                {'$set': update_data}
                            )
                            
                            ui.notify('Institution details updated successfully!', color='positive')
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error updating details: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1.5rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Save Changes', on_click=save_changes).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/hierarchy')
def institution_admin_hierarchy(inst_id: str):
    """Schools and programs management page"""
    add_beautiful_global_styles()
    
    # Check authentication
    if not check_auth():
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    def content(inst, main_color):
        ui.label('Institution Hierarchy').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Academic year selector
        from nicegui import app
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        
        # Initialize session if needed
        if not hasattr(app.storage, 'user'):
            app.storage.user = {}
        
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        
        def on_year_change(e):
            if hasattr(app.storage, 'user'):
                app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
        
        with ui.row().style('width: 100%; align-items: center; justify-content: flex-end; margin-bottom: 1rem;'):
            if year_options:
                selected_year_name = None
                for name, id_val in name_to_id.items():
                    if id_val == selected_year_id:
                        selected_year_name = name
                        break
                
                ui.select(
                    options=year_options,
                    value=selected_year_name,
                    on_change=on_year_change,
                    label='Academic Year'
                ).style('min-width: 200px;').classes('beautiful-input')
        
        # Institution header with add options
        with ui.card().classes('beautiful-card').style(f'width: 100%; margin-bottom: 2rem; padding: 1.5rem; background: {main_color}10; border-left: 4px solid {main_color};'):
            with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                with ui.column():
                    ui.label(f"🏛️ {inst.get('name', 'Institution')}").style(f'font-size: 1.3rem; font-weight: bold; color: {main_color};')
                    ui.label('Institution Level').style('font-size: 0.9rem; color: var(--text-secondary);')
                
                # Add buttons
                with ui.row().style('gap: 0.5rem;'):
                    def add_school():
                        if not selected_year_id:
                            ui.notify('Please select an academic year first', color='warning')
                            return
                        
                        with ui.dialog() as dialog:
                            with ui.card().style('padding: 2rem; min-width: 400px;').classes('beautiful-card'):
                                ui.label('Add New School').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                                
                                school_name = ui.input('School Name', placeholder='e.g., School of Engineering').style('width: 100%; margin-bottom: 1rem;')
                                school_abbr = ui.input('Abbreviation (Optional)', placeholder='e.g., SOE').style('width: 100%; margin-bottom: 1rem;')
                                
                                def create_school():
                                    if not school_name.value:
                                        ui.notify('School name is required', color='negative')
                                        return
                                    
                                    school_doc = {
                                        'name': school_name.value,
                                        'abbreviation': school_abbr.value,
                                        'institution_id': inst_id,
                                        'academic_cycle_id': selected_year_id,
                                        'created_at': datetime.datetime.utcnow(),
                                        'created_by': current_user.get('email', 'admin') if current_user else 'admin'
                                    }
                                    
                                    result = schools_col.insert_one(school_doc)
                                    
                                    log_audit_action(
                                        action='Created School',
                                        details=f'School "{school_name.value}" created',
                                        institution_id=inst_id,
                                        entity_type='school',
                                        entity_id=str(result.inserted_id)
                                    )
                                    
                                    ui.notify(f'School "{school_name.value}" created successfully!', color='positive')
                                    dialog.close()
                                    ui.run_javascript('window.location.reload()')
                                
                                with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                    ui.button('Cancel', on_click=dialog.close).classes('btn-secondary')
                                    ui.button('Create School', on_click=create_school).classes('btn-primary')
                        
                        dialog.open()
                    
                    def add_department():
                        if not selected_year_id:
                            ui.notify('Please select an academic year first', color='warning')
                            return
                        
                        with ui.dialog() as dialog:
                            with ui.card().style('padding: 2rem; min-width: 400px;').classes('beautiful-card'):
                                ui.label('Add New Department').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                                
                                dept_name = ui.input('Department Name', placeholder='e.g., Human Resources').style('width: 100%; margin-bottom: 1rem;')
                                dept_abbr = ui.input('Abbreviation (Optional)', placeholder='e.g., HR').style('width: 100%; margin-bottom: 1rem;')
                                
                                def create_department():
                                    if not dept_name.value:
                                        ui.notify('Department name is required', color='negative')
                                        return
                                    
                                    dept_doc = {
                                        'name': dept_name.value,
                                        'abbreviation': dept_abbr.value,
                                        'institution_id': inst_id,
                                        'academic_cycle_id': selected_year_id,
                                        'type': 'department',
                                        'created_at': datetime.datetime.utcnow(),
                                        'created_by': current_user.get('email', 'admin') if current_user else 'admin'
                                    }
                                    
                                    result = schools_col.insert_one(dept_doc)
                                    
                                    log_audit_action(
                                        action='Created Department',
                                        details=f'Department "{dept_name.value}" created',
                                        institution_id=inst_id,
                                        entity_type='department',
                                        entity_id=str(result.inserted_id)
                                    )
                                    
                                    ui.notify(f'Department "{dept_name.value}" created successfully!', color='positive')
                                    dialog.close()
                                    ui.run_javascript('window.location.reload()')
                                
                                with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                    ui.button('Cancel', on_click=dialog.close).classes('btn-secondary')
                                    ui.button('Create Department', on_click=create_department).classes('btn-primary')
                        
                        dialog.open()
                    
                    ui.button('+ Add School', on_click=add_school).classes('btn-primary')
                    ui.button('+ Add Department', on_click=add_department).classes('btn-success')
        
        if selected_year_id:
            # Get schools and departments
            schools = list(schools_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id, 'type': {'$ne': 'department'}}))
            programs = list(programs_col.find({'institution_id': inst_id, 'academic_cycle_id': selected_year_id}))
            departments = list(schools_col.find({'institution_id': inst_id, 'type': 'department', 'academic_cycle_id': selected_year_id}))
            
            # Display Schools
            for school in schools:
                with ui.card().classes('beautiful-card drop-zone').style(f'width: 100%; margin-bottom: 1rem; padding: 1.5rem; border-left: 4px solid {main_color};').classes(f'school-{school["_id"]}'):
                    with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                        with ui.column():
                            school_name = school.get('name', 'Unnamed School')
                            school_abbr = school.get('abbreviation', '')
                            ui.label(f"🏫 {school_name} {f'({school_abbr})' if school_abbr else ''}").style(
                                f'font-size: 1.2rem; font-weight: bold; color: {main_color};'
                            )
                            ui.label('School').style('font-size: 0.9rem; color: var(--text-secondary);')
                        
                        with ui.row().style('gap: 0.5rem;'):
                            # Add Program button
                            def add_program_to_school(school_id=str(school['_id']), school_name=school_name):
                                with ui.dialog() as dialog:
                                    with ui.card().style('padding: 2rem; min-width: 500px;').classes('beautiful-card'):
                                        ui.label(f'Add Program to {school_name}').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                                        
                                        program_name = ui.input('Program Name', placeholder='e.g., Computer Science Engineering').style('width: 100%; margin-bottom: 1rem;')
                                        program_abbr = ui.input('Abbreviation (Optional)', placeholder='e.g., CSE').style('width: 100%; margin-bottom: 1rem;')
                                        
                                        program_type = ui.select(
                                            options=['Undergraduate', 'Postgraduate', 'Diploma', 'Certificate'],
                                            value='Undergraduate',
                                            label='Program Type'
                                        ).style('width: 100%; margin-bottom: 1rem;')
                                        
                                        program_duration = ui.select(
                                            options=['1 Year', '2 Years', '3 Years', '4 Years', '5 Years', '6 Months'],
                                            value='4 Years',
                                            label='Duration'
                                        ).style('width: 100%; margin-bottom: 1rem;')
                                        
                                        # Preview of generated code (prominent display)
                                        with ui.card().style('background: #f8f9fa; border: 2px solid #e9ecef; padding: 1rem; margin-bottom: 1rem;'):
                                            ui.label('Program Code (Auto-Generated):').style('font-size: 0.9rem; color: #666; font-weight: bold; margin-bottom: 0.5rem;')
                                            preview_code = ui.label('Enter program name to see code preview').style('font-size: 1.2rem; color: #2e7d32; font-weight: bold; font-family: monospace;')
                                        
                                        def update_code_preview():
                                            if program_name.value and selected_year_id:
                                                try:
                                                    year_doc = academic_years_col.find_one({'_id': ObjectId(selected_year_id)})
                                                    year_name = year_doc.get('name', '') if year_doc else ''
                                                    type_short = program_type.value.split(' ')[0] if program_type.value else 'UG'
                                                    
                                                    code = generate_program_code(inst_id, year_name, type_short, program_name.value)
                                                    preview_code.text = f'{code}'
                                                    preview_code.style('font-size: 1.2rem; color: #2e7d32; font-weight: bold; font-family: monospace;')
                                                except:
                                                    preview_code.text = 'Code will be generated'
                                                    preview_code.style('font-size: 1.1rem; color: #666; font-style: italic; font-family: monospace;')
                                            else:
                                                preview_code.text = 'Enter program name to see code preview'
                                                preview_code.style('font-size: 1.1rem; color: #666; font-style: italic; font-family: monospace;')
                                        
                                        # Real-time update on input change
                                        program_name.on_value_change(lambda: update_code_preview())
                                        program_type.on_value_change(lambda: update_code_preview())
                                        
                                        # Initial preview update
                                        update_code_preview()
                                        
                                        def create_program():
                                            if not program_name.value:
                                                ui.notify('Program name is required', color='negative')
                                                return
                                            
                                            # Generate the program code
                                            try:
                                                year_doc = academic_years_col.find_one({'_id': ObjectId(selected_year_id)})
                                                year_name = year_doc.get('name', '') if year_doc else ''
                                                type_short = program_type.value.split(' ')[0] if program_type.value else 'UG'
                                                
                                                program_code = generate_program_code(inst_id, year_name, type_short, program_name.value)
                                            except Exception as e:
                                                ui.notify(f'Error generating program code: {str(e)}', color='negative')
                                                return
                                            
                                            program_doc = {
                                                'name': program_name.value,
                                                'code': program_code,
                                                'abbreviation': program_abbr.value,
                                                'type': type_short,
                                                'type_full': program_type.value,
                                                'duration': program_duration.value,
                                                'school_id': school_id,
                                                'institution_id': inst_id,
                                                'academic_cycle_id': selected_year_id,
                                                'created_at': datetime.datetime.utcnow(),
                                                'created_by': current_user.get('email', 'admin') if current_user else 'admin'
                                            }
                                            
                                            result = programs_col.insert_one(program_doc)
                                            
                                            log_audit_action(
                                                action='Created Program',
                                                details=f'Program "{program_name.value}" ({program_duration.value}) created with code {program_code} in school "{school_name}"',
                                                institution_id=inst_id,
                                                entity_type='program',
                                                entity_id=str(result.inserted_id)
                                            )
                                            
                                            ui.notify(f'Program "{program_name.value}" created with code: {program_code}', color='positive')
                                            dialog.close()
                                            ui.run_javascript('window.location.reload()')
                                        
                                        with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                            ui.button('Cancel', on_click=dialog.close).classes('btn-secondary')
                                            ui.button('Create Program', on_click=create_program).classes('btn-primary')
                                
                                dialog.open()
                            
                            ui.button('+ Add Program', on_click=add_program_to_school).classes('btn-success')
                            ui.button('Create User Group', on_click=lambda s_id=str(school['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?school_id={s_id}')).classes('btn-warning')
                            
                            # Edit school button
                            def edit_school(school_id=str(school['_id']), current_data=school):
                                with ui.dialog() as edit_dialog:
                                    with ui.card().style('padding: 2rem; min-width: 400px;'):
                                        ui.label('Edit School').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                        
                                        name_input = ui.input('School Name', value=current_data.get('name', '')).style('width: 100%; margin-bottom: 1rem;')
                                        abbr_input = ui.input('Abbreviation', value=current_data.get('abbreviation', '')).style('width: 100%; margin-bottom: 1rem;')
                                        desc_input = ui.textarea('Description', value=current_data.get('description', '')).style('width: 100%; margin-bottom: 1rem;')
                                        
                                        def save_changes():
                                            if not name_input.value.strip():
                                                ui.notify('School name is required', color='negative')
                                                return
                                            
                                            try:
                                                schools_col.update_one(
                                                    {'_id': ObjectId(school_id)},
                                                    {'$set': {
                                                        'name': name_input.value.strip(),
                                                        'abbreviation': abbr_input.value.strip(),
                                                        'description': desc_input.value.strip(),
                                                        'updated_at': datetime.now()
                                                    }}
                                                )
                                                
                                                log_audit_action(
                                                    action='Updated School',
                                                    details=f'School "{name_input.value.strip()}" was updated',
                                                    institution_id=inst_id,
                                                    entity_type='school',
                                                    entity_id=school_id
                                                )
                                                
                                                ui.notify('School updated successfully!', color='positive')
                                                edit_dialog.close()
                                                ui.run_javascript('window.location.reload()')
                                            
                                            except Exception as e:
                                                ui.notify(f'Error updating school: {str(e)}', color='negative')
                                        
                                        with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                            ui.button('Cancel', on_click=edit_dialog.close).classes('btn-secondary')
                                            ui.button('Save Changes', on_click=save_changes).style(f'background: {main_color}; color: white;')
                                
                                edit_dialog.open()
                            
                            ui.button('✏️', on_click=edit_school).style('background: #17a2b8; color: #fff;')
                            
                            # Delete school button
                            def delete_school(school_id=str(school['_id']), school_name=school_name):
                                # Check if school has programs
                                school_programs = list(programs_col.find({'school_id': school_id}))
                                if school_programs:
                                    ui.notify(f'Cannot delete school "{school_name}" - it has {len(school_programs)} program(s). Delete programs first.', color='warning')
                                    return
                                
                                with ui.dialog() as delete_dialog:
                                    with ui.card().style('padding: 2rem;'):
                                        ui.label('Confirm Deletion').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                        ui.label(f'Are you sure you want to delete school "{school_name}"?').style('margin-bottom: 1rem;')
                                        ui.label('This action cannot be undone.').style('color: red; font-weight: bold; margin-bottom: 1rem;')
                                        
                                        def confirm_delete():
                                            log_audit_action(
                                                action='Deleted School',
                                                details=f'School "{school_name}" was deleted',
                                                institution_id=inst_id,
                                                entity_type='school',
                                                entity_id=school_id
                                            )
                                            
                                            schools_col.delete_one({'_id': ObjectId(school_id)})
                                            ui.notify(f'School "{school_name}" deleted successfully!', color='positive')
                                            delete_dialog.close()
                                            ui.run_javascript('window.location.reload()')
                                        
                                        with ui.row().style('gap: 1rem;'):
                                            ui.button('Cancel', on_click=delete_dialog.close).classes('btn-secondary')
                                            ui.button('Delete', on_click=confirm_delete).classes('btn-danger')
                                
                                delete_dialog.open()
                            
                            ui.button('🗑️', on_click=delete_school).classes('btn-danger')
                    
                    # Display programs under this school
                    school_programs = [p for p in programs if p.get('school_id') == str(school['_id'])]
                    if school_programs:
                        ui.label(f'Programs ({len(school_programs)}):').style('font-weight: bold; margin-top: 1rem; margin-bottom: 0.5rem;')
                        for program in school_programs:
                            program_card_id = f'program-{program["_id"]}'
                            with ui.card().style('width: 100%; margin-bottom: 0.5rem; padding: 1rem; background: #f8f9fa; border-left: 3px solid var(--success-color); cursor: move;').classes(f'draggable-program {program_card_id}'):
                                with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                                    with ui.column():
                                        program_name = program.get('name', 'Unnamed Program')
                                        program_abbr = program.get('abbreviation', '')
                                        program_type = program.get('type', 'Unknown')
                                        program_duration = program.get('duration', 'Unknown')
                                        program_code = program.get('code', 'N/A')
                                        
                                        ui.label(f"🎓 {program_name} {f'({program_abbr})' if program_abbr else ''}").style(
                                            'font-size: 1rem; font-weight: bold; color: var(--success-color);'
                                        )
                                        ui.label(f'Code: {program_code}').style('font-size: 0.85rem; color: #666; font-family: monospace;')
                                        ui.label(f'{program_type} • {program_duration}').style('font-size: 0.8rem; color: var(--text-secondary);')
                                    
                                    with ui.row().style('gap: 0.5rem;'):
                                        ui.button('Create User Group', on_click=lambda p_id=str(program['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?program_id={p_id}')).style('background: #1976d2; color: #fff; font-size: 0.8rem; padding: 0.25rem 0.5rem;')
                                        
                                        # Edit program button
                                        def edit_program(program_id=str(program['_id']), current_data=program):
                                            with ui.dialog() as edit_dialog:
                                                with ui.card().style('padding: 2rem; min-width: 400px;'):
                                                    ui.label('Edit Program').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                                    
                                                    name_input = ui.input('Program Name', value=current_data.get('name', '')).style('width: 100%; margin-bottom: 1rem;')
                                                    abbr_input = ui.input('Abbreviation', value=current_data.get('abbreviation', '')).style('width: 100%; margin-bottom: 1rem;')
                                                    type_input = ui.input('Type', value=current_data.get('type', '')).style('width: 100%; margin-bottom: 1rem;')
                                                    duration_input = ui.input('Duration', value=current_data.get('duration', '')).style('width: 100%; margin-bottom: 1rem;')
                                                    
                                                    # Current code preview
                                                    with ui.card().style('background: #f8f9fa; border: 2px solid #e9ecef; padding: 1rem; margin-bottom: 1rem;'):
                                                        ui.label('Current Code:').style('font-size: 0.8rem; color: #666; font-weight: bold; margin-bottom: 0.5rem;')
                                                        current_code_label = ui.label(current_data.get('code', 'N/A')).style('font-size: 1.1rem; color: #2e7d32; font-weight: bold; font-family: monospace;')
                                                        ui.label('Note: Code will be regenerated if program name or type changes').style('font-size: 0.75rem; color: #666; margin-top: 0.5rem;')
                                                    
                                                    def save_changes():
                                                        if not name_input.value.strip():
                                                            ui.notify('Program name is required', color='negative')
                                                            return
                                                        
                                                        # Generate new code if name changed
                                                        new_code = current_data.get('code', '')
                                                        if name_input.value.strip() != current_data.get('name', ''):
                                                            try:
                                                                year_doc = academic_years_col.find_one({'_id': ObjectId(current_data['academic_year_id'])})
                                                                if year_doc:
                                                                    new_code = generate_program_code(inst_id, year_doc['name'], type_input.value.strip())
                                                            except:
                                                                pass
                                                        
                                                        try:
                                                            programs_col.update_one(
                                                                {'_id': ObjectId(program_id)},
                                                                {'$set': {
                                                                    'name': name_input.value.strip(),
                                                                    'abbreviation': abbr_input.value.strip(),
                                                                    'type': type_input.value.strip(),
                                                                    'duration': duration_input.value.strip(),
                                                                    'code': new_code,
                                                                    'updated_at': datetime.now()
                                                                }}
                                                            )
                                                            
                                                            log_audit_action(
                                                                action='Updated Program',
                                                                details=f'Program "{name_input.value.strip()}" was updated',
                                                                institution_id=inst_id,
                                                                entity_type='program',
                                                                entity_id=program_id
                                                            )
                                                            
                                                            ui.notify('Program updated successfully!', color='positive')
                                                            edit_dialog.close()
                                                            ui.run_javascript('window.location.reload()')
                                                        
                                                        except Exception as e:
                                                            ui.notify(f'Error updating program: {str(e)}', color='negative')
                                                    
                                                    with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                                        ui.button('Cancel', on_click=edit_dialog.close).classes('btn-secondary')
                                                        ui.button('Save Changes', on_click=save_changes).style(f'background: {main_color}; color: white;')
                                            
                                            edit_dialog.open()
                                        
                                        ui.button('✏️', on_click=edit_program).style('background: #17a2b8; color: #fff; font-size: 0.8rem; padding: 0.25rem 0.5rem;')
                                        
                                        # Delete program button
                                        def delete_program(program_id=str(program['_id']), program_name=program_name):
                                            with ui.dialog() as delete_dialog:
                                                with ui.card().style('padding: 2rem;'):
                                                    ui.label('Confirm Deletion').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                                    ui.label(f'Are you sure you want to delete program "{program_name}"?').style('margin-bottom: 1rem;')
                                                    ui.label('This action cannot be undone.').style('color: red; font-weight: bold; margin-bottom: 1rem;')
                                                    
                                                    def confirm_delete():
                                                        log_audit_action(
                                                            action='Deleted Program',
                                                            details=f'Program "{program_name}" with code "{program.get("code", "N/A")}" was deleted',
                                                            institution_id=inst_id,
                                                            entity_type='program',
                                                            entity_id=program_id
                                                        )
                                                        
                                                        programs_col.delete_one({'_id': ObjectId(program_id)})
                                                        ui.notify(f'Program "{program_name}" deleted successfully!', color='positive')
                                                        delete_dialog.close()
                                                        ui.run_javascript('window.location.reload()')
                                                    
                                                    with ui.row().style('gap: 1rem;'):
                                                        ui.button('Cancel', on_click=delete_dialog.close).classes('btn-secondary')
                                                        ui.button('Delete', on_click=confirm_delete).classes('btn-danger')
                                            
                                            delete_dialog.open()
                                        
                                        ui.button('🗑️', on_click=delete_program).style('background: #dc3545; color: #fff; font-size: 0.8rem; padding: 0.25rem 0.5rem;').style('font-size: 0.8rem; padding: 0.3rem 0.6rem;')
            
            # Display Departments
            if departments:
                ui.label('Departments').style(f'font-size: 1.3rem; font-weight: bold; color: {main_color}; margin-top: 2rem; margin-bottom: 1rem;')
                
                for dept in departments:
                    with ui.card().classes('beautiful-card').style(f'width: 100%; margin-bottom: 1rem; padding: 1.5rem; border-left: 4px solid var(--info-color);'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column():
                                dept_name = dept.get('name', 'Unnamed Department')
                                dept_abbr = dept.get('abbreviation', '')
                                ui.label(f"🏢 {dept_name} {f'({dept_abbr})' if dept_abbr else ''}").style(
                                    'font-size: 1.2rem; font-weight: bold; color: var(--info-color);'
                                )
                                ui.label('Department').style('font-size: 0.9rem; color: var(--text-secondary);')
                            
                            with ui.row().style('gap: 0.5rem;'):
                                ui.button('Create User Group', on_click=lambda d_id=str(dept['_id']): ui.navigate.to(f'/institution_admin/{inst_id}/create_user_group?department_id={d_id}')).classes('btn-warning')
                                
                                # Edit department button
                                def edit_department(dept_id=str(dept['_id']), current_data=dept):
                                    with ui.dialog() as edit_dialog:
                                        with ui.card().style('padding: 2rem; min-width: 400px;'):
                                            ui.label('Edit Department').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                            
                                            name_input = ui.input('Department Name', value=current_data.get('name', '')).style('width: 100%; margin-bottom: 1rem;')
                                            abbr_input = ui.input('Abbreviation', value=current_data.get('abbreviation', '')).style('width: 100%; margin-bottom: 1rem;')
                                            desc_input = ui.textarea('Description', value=current_data.get('description', '')).style('width: 100%; margin-bottom: 1rem;')
                                            
                                            def save_changes():
                                                if not name_input.value.strip():
                                                    ui.notify('Department name is required', color='negative')
                                                    return
                                                
                                                try:
                                                    schools_col.update_one(
                                                        {'_id': ObjectId(dept_id)},
                                                        {'$set': {
                                                            'name': name_input.value.strip(),
                                                            'abbreviation': abbr_input.value.strip(),
                                                            'description': desc_input.value.strip(),
                                                            'updated_at': datetime.now()
                                                        }}
                                                    )
                                                    
                                                    log_audit_action(
                                                        action='Updated Department',
                                                        details=f'Department "{name_input.value.strip()}" was updated',
                                                        institution_id=inst_id,
                                                        entity_type='department',
                                                        entity_id=dept_id
                                                    )
                                                    
                                                    ui.notify('Department updated successfully!', color='positive')
                                                    edit_dialog.close()
                                                    ui.run_javascript('window.location.reload()')
                                                
                                                except Exception as e:
                                                    ui.notify(f'Error updating department: {str(e)}', color='negative')
                                            
                                            with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                                                ui.button('Cancel', on_click=edit_dialog.close).classes('btn-secondary')
                                                ui.button('Save Changes', on_click=save_changes).style(f'background: {main_color}; color: white;')
                                    
                                    edit_dialog.open()
                                
                                ui.button('✏️', on_click=edit_department).style('background: #17a2b8; color: #fff;')
                                
                                # Delete department button
                            def delete_department(dept_id=str(dept['_id']), dept_name=dept_name):
                                with ui.dialog() as delete_dialog:
                                    with ui.card().style('padding: 2rem;'):
                                        ui.label('Confirm Deletion').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                        ui.label(f'Are you sure you want to delete department "{dept_name}"?').style('margin-bottom: 1rem;')
                                        ui.label('This action cannot be undone.').style('color: red; font-weight: bold; margin-bottom: 1rem;')
                                        
                                        def confirm_delete():
                                            log_audit_action(
                                                action='Deleted Department',
                                                details=f'Department "{dept_name}" was deleted',
                                                institution_id=inst_id,
                                                entity_type='department',
                                                entity_id=dept_id
                                            )
                                            
                                            schools_col.delete_one({'_id': ObjectId(dept_id)})
                                            ui.notify(f'Department "{dept_name}" deleted successfully!', color='positive')
                                            delete_dialog.close()
                                            ui.run_javascript('window.location.reload()')
                                        
                                        with ui.row().style('gap: 1rem;'):
                                            ui.button('Cancel', on_click=delete_dialog.close).classes('btn-secondary')
                                            ui.button('Delete', on_click=confirm_delete).classes('btn-danger')
                                
                                delete_dialog.open()
                            
                            ui.button('🗑️', on_click=delete_department).classes('btn-danger')
            
            if not schools and not departments:
                ui.label('No schools or departments found for the selected academic year.').style(
                    'color: var(--text-secondary); font-style: italic; margin-top: 2rem; text-align: center;'
                )
        
        else:
            ui.label('Please select an academic year to view the institution hierarchy.').style(
                'color: var(--text-secondary); font-style: italic; margin-top: 2rem; text-align: center;'
            )
        
        # Add drag and drop JavaScript
        ui.add_head_html(f'''
        <script>
        // Initialize drag and drop for programs
        function initializeDragAndDrop() {{
            const programCards = document.querySelectorAll('.draggable-program');
            const dropZones = document.querySelectorAll('.drop-zone');
            
            // Add drag event listeners to program cards
            programCards.forEach(card => {{
                card.draggable = true;
                
                card.addEventListener('dragstart', function(e) {{
                    e.dataTransfer.setData('text/plain', card.className.split(' ').find(cls => cls.startsWith('program-')));
                    card.style.opacity = '0.5';
                    card.style.transform = 'scale(0.95)';
                }});
                
                card.addEventListener('dragend', function(e) {{
                    card.style.opacity = '1';
                    card.style.transform = 'scale(1)';
                }});
            }});
            
            // Add drop event listeners to school zones
            dropZones.forEach(zone => {{
                zone.addEventListener('dragover', function(e) {{
                    e.preventDefault();
                    zone.style.background = '#e3f2fd';
                    zone.style.borderLeft = '6px solid #2196f3';
                }});
                
                zone.addEventListener('dragleave', function(e) {{
                    zone.style.background = '#fff';
                    zone.style.borderLeft = '4px solid {main_color}';
                }});
                
                zone.addEventListener('drop', function(e) {{
                    e.preventDefault();
                    zone.style.background = '#fff';
                    zone.style.borderLeft = '4px solid {main_color}';
                    
                    const programClass = e.dataTransfer.getData('text/plain');
                    const programId = programClass.replace('program-', '');
                    const schoolClass = zone.className.split(' ').find(cls => cls.startsWith('school-'));
                    const schoolId = schoolClass.replace('school-', '');
                    
                    // Don't move if dropped on same school
                    const programCard = document.querySelector('.' + programClass);
                    const currentSchoolCard = programCard.closest('.drop-zone');
                    if (currentSchoolCard === zone) {{
                        return;
                    }}
                    
                    // Make API call to move program
                    fetch('/api/move_program', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            program_id: programId,
                            new_school_id: schoolId,
                            institution_id: '{inst_id}'
                        }})
                    }})
                    .then(response => response.json())
                    .then(data => {{
                        if (data.success) {{
                            alert('✓ ' + data.message);
                            setTimeout(() => {{
                                window.location.reload();
                            }}, 500);
                        }} else {{
                            alert('✗ ' + (data.message || 'Failed to move program'));
                        }}
                    }})
                    .catch(error => {{
                        console.error('Error:', error);
                        alert('✗ Error moving program');
                    }});
                }});
            }});
        }}
        
        // Initialize when DOM is ready
        if (document.readyState === 'loading') {{
            document.addEventListener('DOMContentLoaded', initializeDragAndDrop);
        }} else {{
            initializeDragAndDrop();
        }}
        </script>
        ''')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/extended_profiles')
def institution_admin_extended_profiles(inst_id: str):
    """Extended profiles management page"""
    add_beautiful_global_styles()
    
    # Check authentication
    if not check_auth():
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    def content(inst, main_color):
        ui.label('Extended Profiles').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Academic year selector
        from nicegui import app
        unlocked_years = list(academic_years_col.find({'institution_id': inst_id, 'is_locked': False}))
        year_options = [y['name'] for y in unlocked_years]
        name_to_id = {y['name']: str(y['_id']) for y in unlocked_years}
        
        # Initialize session if needed
        if not hasattr(app.storage, 'user'):
            app.storage.user = {}
        
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        
        def on_year_change(e):
            if hasattr(app.storage, 'user'):
                app.storage.user['selected_academic_year_id'] = name_to_id.get(e.value)
        
        with ui.row().style('width: 100%; align-items: center; justify-content: flex-end; margin-bottom: 1rem;'):
            if year_options:
                selected_year_name = None
                for name, id_val in name_to_id.items():
                    if id_val == selected_year_id:
                        selected_year_name = name
                        break
                
                ui.select(
                    options=year_options,
                    value=selected_year_name,
                    on_change=on_year_change,
                    label='Academic Year'
                ).style('min-width: 200px;').classes('beautiful-input')
        
        # Create Extended Profile button
        def open_create_dialog():
            if not selected_year_id:
                ui.notify('Select an academic year first', color='negative')
                return
            
            with ui.dialog() as dialog:
                with ui.card().style(
                    'padding: 2rem; min-width: 800px; max-width: 1000px; max-height: 90vh; overflow-y: auto;'
                ).classes('beautiful-card'):
                    ui.label('Create Extended Profile').style(
                        f'font-size: 1.8rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem; text-align: center;'
                    )
                    
                    with ui.column().style('width: 100%; gap: 1.5rem;'):
                        # Basic Information
                        ui.label('Basic Information').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem;'
                        )
                        
                        profile_name = ui.input('Profile Name').classes('beautiful-input').style('width: 100%;')
                        profile_description = ui.textarea('Description').classes('beautiful-input').style('width: 100%; min-height: 100px;')
                        
                        # Extended Profile Type
                        ui.label('Extended Profile Type').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem; margin-top: 1rem;'
                        )
                        
                        scope_type = ui.select(
                            options=['Program-based', 'Department-based'],
                            value='Program-based',
                            label='Choose whether this Extended profile applies to programs or departments'
                        ).classes('beautiful-input').style('width: 100%; margin-bottom: 1rem;')
                        
                        ui.label('Choose whether this Extended profile applies to programs or departments.').style(
                            'color: var(--text-secondary); font-size: 0.9rem; margin-top: -0.5rem; margin-bottom: 1rem;'
                        )
                        
                        # Headers/Fields
                        ui.label('Profile Fields').style(
                            f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 0.5rem; margin-top: 1rem;'
                        )
                        
                        headers_input = ui.textarea(
                            'Field Names (one per line)',
                            placeholder='Name\nPosition\nDepartment\nEmail\nPhone'
                        ).classes('beautiful-input').style('width: 100%; min-height: 120px;')
                        
                        # Table Preview
                        ui.label('Profile Preview').style(
                            f'font-size: 1.1rem; font-weight: bold; color: {main_color}; margin: 1.5rem 0 0.5rem 0;'
                        )
                        
                        preview_container = ui.column().style('width: 100%;')
                        
                        def update_preview():
                            if not headers_input.value:
                                preview_container.clear()
                                with preview_container:
                                    ui.label('Enter field names above to see table preview').style('color: #666; font-style: italic; text-align: center;')
                                return
                                
                            preview_container.clear()
                            headers = [h.strip() for h in headers_input.value.split('\n') if h.strip()]
                            
                            if headers:
                                with preview_container:
                                    ui.label('Table Preview:').style('font-weight: bold; margin-bottom: 0.5rem;')
                                    with ui.card().style('width: 100%; background: white; border: 2px solid rgba(154, 44, 84, 0.2); padding: 1rem; border-radius: 8px;'):
                                        # Create table with proper styling
                                        with ui.element('table').style('width: 100%; border-collapse: collapse;'):
                                            # Header row
                                            with ui.element('thead'):
                                                with ui.element('tr'):
                                                    for header in headers:
                                                        with ui.element('th').style('background: rgb(154, 44, 84); color: white; padding: 12px; text-align: left; border: 1px solid #ddd; font-weight: bold;'):
                                                            ui.label(header)
                                            
                                            # Sample data rows
                                            with ui.element('tbody'):
                                                sample_data = [
                                                    ['John Doe', 'Professor', 'Computer Science', 'john.doe@university.edu', '+1-555-0123'],
                                                    ['Jane Smith', 'Associate Professor', 'Mathematics', 'jane.smith@university.edu', '+1-555-0124'],
                                                    ['Dr. Johnson', 'Assistant Professor', 'Physics', 'johnson@university.edu', '+1-555-0125']
                                                ]
                                                
                                                for i, row_data in enumerate(sample_data):
                                                    with ui.element('tr'):
                                                        for j, header in enumerate(headers):
                                                            sample_value = row_data[j] if j < len(row_data) else f'Sample {i+1}-{j+1}'
                                                            with ui.element('td').style('padding: 10px; border: 1px solid #ddd; background: #f9f9f9;'):
                                                                ui.label(sample_value).style('font-size: 0.9rem;')
                                    
                                    ui.label(f'Table will have {len(headers)} columns as shown above').style(
                                        'font-size: 0.8rem; color: #666; margin-top: 0.5rem; text-align: center;'
                                    )
                        
                        # Update preview when headers change
                        headers_input.on_value_change(lambda: update_preview())
                        scope_type.on_value_change(lambda: update_preview())
                        profile_name.on_value_change(lambda: update_preview())
                        
                        # Initialize preview
                        update_preview()
                        
                        # Options
                        with ui.row().style('width: 100%; gap: 2rem; margin-top: 1rem;'):
                            needs_docs = ui.checkbox('Requires Supporting Documents', value=False)
                        
                        # Create function
                        def create_profile():
                            global current_user
                            if not profile_name.value:
                                ui.notify('Profile name is required', color='negative')
                                return
                            
                            if not headers_input.value:
                                ui.notify('At least one field is required', color='negative')
                                return
                            
                            # Parse headers
                            headers = [h.strip() for h in headers_input.value.split('\n') if h.strip()]
                            
                            profile_doc = {
                                'name': profile_name.value,
                                'description': profile_description.value,
                                'scope_type': 'program_based' if scope_type.value == 'Program-based' else 'department_based',
                                'institution_id': inst_id,
                                'academic_cycle_id': selected_year_id,
                                'headers': headers,
                                'needs_supporting_docs': needs_docs.value,
                                'created_at': datetime.datetime.utcnow(),
                                'updated_at': datetime.datetime.utcnow(),
                                'created_by': current_user.get('email', 'admin') if current_user else 'admin'
                            }
                            
                            try:
                                result = extended_profiles_col.insert_one(profile_doc)
                                
                                log_audit_action(
                                    action='Created Extended Profile',
                                    details=f'Extended Profile "{profile_name.value}" created with {len(headers)} fields',
                                    institution_id=inst_id,
                                    entity_type='extended_profile',
                                    entity_id=str(result.inserted_id)
                                )
                                
                                ui.notify(f'Extended Profile "{profile_name.value}" created successfully!', color='positive')
                                dialog.close()
                                ui.run_javascript('window.location.reload()')
                            
                            except Exception as e:
                                ui.notify(f'Error creating profile: {str(e)}', color='negative')
                        
                        # Action buttons
                        with ui.row().style('width: 100%; justify-content: space-between; margin-top: 2rem;'):
                            ui.button('Cancel', on_click=dialog.close).classes('btn-secondary')
                            ui.button('Create Profile', on_click=create_profile).classes('btn-primary')
                
                dialog.open()
        
        ui.button('+ Create Extended Profile', on_click=open_create_dialog).classes('btn-primary').style('margin-bottom: 2rem;')
        
        # Display existing profiles
        if selected_year_id:
            existing_profiles = list(extended_profiles_col.find({
                'institution_id': inst_id,
                'academic_cycle_id': selected_year_id
            }))
            
            if existing_profiles:
                ui.label(f'Existing Extended Profiles ({len(existing_profiles)} found)').style(
                    f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
                )
                
                for profile in existing_profiles:
                    with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1rem; padding: 1.5rem;'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column().style('flex: 1;'):
                                profile_name = profile.get('name', 'Unnamed Profile')
                                
                                ui.label(f"📋 {profile_name}").style(
                                    'font-size: 1.2rem; font-weight: bold; color: var(--text-primary); margin-bottom: 0.5rem;'
                                )
                                
                                if profile.get('description'):
                                    ui.label(f"Description: {profile['description']}").style(
                                        'font-size: 0.9rem; color: var(--text-secondary); margin-bottom: 0.3rem;'
                                    )
                                
                                headers = profile.get('headers', [])
                                if headers:
                                    ui.label(f"Fields: {', '.join(headers[:3])}{'...' if len(headers) > 3 else ''} ({len(headers)} total)").style(
                                        'font-size: 0.8rem; color: var(--text-secondary);'
                                    )
                                
                                needs_docs = 'Yes' if profile.get('needs_supporting_docs', False) else 'No'
                                ui.label(f"Supporting Documents: {needs_docs}").style(
                                    'font-size: 0.8rem; color: var(--text-secondary);'
                                )
                                
                                created_at = profile.get('created_at')
                                if created_at:
                                    ui.label(f"Created: {created_at.strftime('%Y-%m-%d %H:%M')}").style(
                                        'font-size: 0.8rem; color: var(--text-secondary);'
                                    )
                            
                            with ui.row().style('gap: 0.5rem;'):
                                ui.button(
                                    '📈 View Data',
                                    on_click=lambda p_id=str(profile['_id']): ui.navigate.to(
                                        f'/institution_admin/{inst_id}/spreadsheets?profile_id={p_id}'
                                    )
                                ).classes('btn-success')
                                
                                # Edit button
                                def edit_profile(profile_id=str(profile['_id']), prof=profile):
                                    with ui.dialog() as edit_dialog:
                                        with ui.card().style('padding: 2rem; min-width: 600px;').classes('beautiful-card'):
                                            ui.label('Edit Extended Profile').style(
                                                f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
                                            )
                                            
                                            edit_name = ui.input('Profile Name', value=prof.get('name', '')).style('width: 100%; margin-bottom: 1rem;')
                                            edit_description = ui.textarea('Description', value=prof.get('description', '')).style('width: 100%; margin-bottom: 1rem;')
                                            
                                            edit_headers = ui.textarea(
                                                'Field Names (one per line)',
                                                value='\n'.join(prof.get('headers', []))
                                            ).style('width: 100%; margin-bottom: 1rem;')
                                            
                                            edit_needs_docs = ui.checkbox('Requires Supporting Documents', value=prof.get('needs_supporting_docs', False))
                                            
                                            def save_changes():
                                                if not edit_name.value:
                                                    ui.notify('Profile name is required', color='negative')
                                                    return
                                                
                                                headers = [h.strip() for h in edit_headers.value.split('\n') if h.strip()]
                                                
                                                extended_profiles_col.update_one(
                                                    {'_id': ObjectId(profile_id)},
                                                    {'$set': {
                                                        'name': edit_name.value,
                                                        'description': edit_description.value,
                                                        'headers': headers,
                                                        'needs_supporting_docs': edit_needs_docs.value,
                                                        'updated_at': datetime.datetime.utcnow()
                                                    }}
                                                )
                                                
                                                log_audit_action(
                                                    action='Updated Extended Profile',
                                                    details=f'Extended Profile "{edit_name.value}" was updated',
                                                    institution_id=inst_id,
                                                    entity_type='extended_profile',
                                                    entity_id=profile_id
                                                )
                                                
                                                ui.notify('Extended Profile updated successfully!', color='positive')
                                                edit_dialog.close()
                                                ui.run_javascript('window.location.reload()')
                                            
                                            with ui.row().style('margin-top: 1rem; gap: 1rem;'):
                                                ui.button('Cancel', on_click=edit_dialog.close).classes('btn-secondary')
                                                ui.button('Save Changes', on_click=save_changes).classes('btn-primary')
                                    
                                    edit_dialog.open()
                                
                                ui.button('✏️ Edit', on_click=edit_profile).classes('btn-warning')
                                
                                def delete_profile(profile_id=str(profile['_id']), profile_name=profile.get('name', '')):
                                    with ui.dialog() as delete_dialog:
                                        with ui.card().style('padding: 2rem;'):
                                            ui.label('Confirm Deletion').style('font-size: 1.2rem; font-weight: bold; margin-bottom: 1rem;')
                                            ui.label(f'Are you sure you want to delete extended profile "{profile_name}"?').style('margin-bottom: 1rem;')
                                            ui.label('This action cannot be undone.').style('color: red; font-weight: bold; margin-bottom: 1rem;')
                                            
                                            def confirm_delete():
                                                log_audit_action(
                                                    action='Deleted Extended Profile',
                                                    details=f'Extended Profile "{profile_name}" deleted',
                                                    institution_id=inst_id,
                                                    entity_type='extended_profile',
                                                    entity_id=profile_id
                                                )
                                                extended_profiles_col.delete_one({'_id': ObjectId(profile_id)})
                                                ui.notify(f'Extended Profile "{profile_name}" deleted', color='positive')
                                                delete_dialog.close()
                                                ui.run_javascript('window.location.reload()')
                                            
                                            with ui.row().style('gap: 1rem;'):
                                                ui.button('Cancel', on_click=delete_dialog.close).classes('btn-secondary')
                                                ui.button('Delete', on_click=confirm_delete).classes('btn-danger')
                                    
                                    delete_dialog.open()
                                
                                ui.button('🗑️ Delete', on_click=delete_profile).classes('btn-danger')
            else:
                ui.label('No extended profiles found for the selected academic year.').style(
                    'color: var(--text-secondary); font-style: italic; margin-top: 2rem;'
                )
        else:
            ui.label('Please select an academic year to view extended profiles.').style(
                'color: var(--text-secondary); font-style: italic; margin-top: 2rem;'
            )
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/spreadsheets')
def institution_admin_spreadsheets(inst_id: str):
    """Spreadsheets management page with Excel-like interface"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Spreadsheets').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Get selected academic year
        selected_year_id = app.storage.user.get('selected_academic_year_id') if hasattr(app.storage, 'user') else None
        
        if not selected_year_id:
            ui.label('Please select an academic year to view spreadsheets.').style(
                'color: var(--warning-color); font-size: 1.2rem; text-align: center; padding: 2rem;'
            )
            return
        
        # Debug: Show current academic year selection
        year_doc = academic_years_col.find_one({'_id': ObjectId(selected_year_id)})
        if year_doc:
            ui.label(f'📅 Current Academic Year: {year_doc.get("name", "Unknown")}').style(
                'color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 1rem;'
            )
        
        # Get criterias and extended profiles
        criterias = list(criterias_col.find({'institution_id': inst_id, 'academic_year_id': selected_year_id}))
        profiles = list(extended_profiles_col.find({'institution_id': inst_id, 'academic_year_id': selected_year_id}))
        
        # Debug: Also check for profiles without academic_year_id (legacy data)
        legacy_profiles = list(extended_profiles_col.find({
            'institution_id': inst_id, 
            'academic_year_id': {'$exists': False}
        }))
        legacy_criterias = list(criterias_col.find({
            'institution_id': inst_id, 
            'academic_year_id': {'$exists': False}
        }))
        
        # Debug information
        ui.label(f'🔍 Debug: Found {len(criterias)} criterias, {len(profiles)} profiles for selected year').style(
            'color: var(--text-secondary); font-size: 0.8rem; font-style: italic;'
        )
        ui.label(f'🔍 Debug: Found {len(legacy_criterias)} legacy criterias, {len(legacy_profiles)} legacy profiles without year').style(
            'color: var(--text-secondary); font-size: 0.8rem; font-style: italic;'
        )
        
        # Include legacy data if current year has no data
        if not criterias and legacy_criterias:
            criterias = legacy_criterias
            ui.label('📌 Showing legacy criterias (no academic year assigned)').style(
                'color: var(--warning-color); font-size: 0.9rem; margin-bottom: 0.5rem;'
            )
        
        if not profiles and legacy_profiles:
            profiles = legacy_profiles
            ui.label('📌 Showing legacy extended profiles (no academic year assigned)').style(
                'color: var(--warning-color); font-size: 0.9rem; margin-bottom: 0.5rem;'
            )
        legacy_profiles = list(extended_profiles_col.find({
            'institution_id': inst_id, 
            '$or': [
                {'academic_year_id': {'$exists': False}},
                {'academic_year_id': None}
            ]
        }))
        
        legacy_criterias = list(criterias_col.find({
            'institution_id': inst_id, 
            '$or': [
                {'academic_year_id': {'$exists': False}},
                {'academic_year_id': None}
            ]
        }))
        
        # Debug info
        total_profiles = len(profiles) + len(legacy_profiles)
        total_criterias = len(criterias) + len(legacy_criterias)
        
        if total_profiles > 0 or total_criterias > 0:
            debug_text = f'Found: {len(profiles)} profiles, {len(criterias)} criterias for current year'
            if legacy_profiles or legacy_criterias:
                debug_text += f' + {len(legacy_profiles)} legacy profiles, {len(legacy_criterias)} legacy criterias'
            ui.label(debug_text).style('color: var(--text-secondary); font-size: 0.8rem; margin-bottom: 1rem;')
        
        # Include legacy data if no current year data exists
        if not profiles and legacy_profiles:
            profiles = legacy_profiles
        if not criterias and legacy_criterias:
            criterias = legacy_criterias
        
        all_sheets = []
        
        # Add criterias as sheets (always show with default headers even if empty)
        for criteria in criterias:
            headers = criteria.get('headers', [])
            # If no headers defined, show default headers based on criteria structure
            if not headers:
                headers = ['Criteria Item', 'Value', 'Status', 'Comments']
            
            all_sheets.append({
                'type': 'criteria',
                'name': criteria.get('name', 'Unnamed Criteria'),
                'headers': headers,
                'data': criteria,
                'icon': '📊',
                'has_custom_headers': bool(criteria.get('headers'))
            })
        
        # Add extended profiles as sheets (always show with default headers even if empty)
        for profile in profiles:
            headers = profile.get('headers', [])
            # If no headers defined, show default headers based on profile structure  
            if not headers:
                headers = ['Profile Field', 'Description', 'Type', 'Required']
            
            all_sheets.append({
                'type': 'profile',
                'name': profile.get('name', 'Unnamed Profile'),
                'headers': headers,
                'data': profile,
                'icon': '📝',
                'has_custom_headers': bool(profile.get('headers'))
            })
        
        if not all_sheets:
            with ui.card().classes('beautiful-card').style('width: 100%; padding: 3rem; text-align: center;'):
                ui.label('No spreadsheets available').style(f'font-size: 1.5rem; color: {main_color}; margin-bottom: 1rem;')
                ui.label('Create criterias and extended profiles to see them as spreadsheet tabs here.').style('color: var(--text-secondary);')
                
                with ui.row().style('gap: 1rem; margin-top: 2rem; justify-content: center;'):
                    ui.button('Create Criteria', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/criterias')).classes('btn-primary')
                    ui.button('Create Extended Profile', on_click=lambda: ui.navigate.to(f'/institution_admin/{inst_id}/extended_profiles')).classes('btn-secondary')
            return
        
        # Excel-like interface with JavaScript-based tab switching
        with ui.card().classes('beautiful-card').style('width: 100%; padding: 0; overflow: hidden;'):
            # Sheet tabs (like Excel)
            with ui.row().style('background: #f8f9fa; border-bottom: 1px solid var(--border); padding: 0; overflow-x: auto;'):
                for i, sheet in enumerate(all_sheets):
                    tab_style = f'''
                        background: {"white" if i == 0 else "#f8f9fa"}; 
                        border: 1px solid var(--border); 
                        border-bottom: {"none" if i == 0 else "1px solid var(--border)"}; 
                        padding: 0.75rem 1.5rem; 
                        margin-right: 2px; 
                        cursor: pointer;
                        border-radius: 8px 8px 0 0;
                        transition: all 0.3s ease;
                    '''
                    
                    with ui.element('div').style(tab_style).classes(f'sheet-tab-{i}').props(f'onclick="switchSheet({i})"'):
                        ui.label(f"{sheet['icon']} {sheet['name']}").style(
                            f'font-weight: {"bold" if i == 0 else "normal"}; color: {main_color if i == 0 else "var(--text-secondary)"};'
                        )
            
            # Add JavaScript for tab switching
            ui.add_head_html('''
                <script>
                function switchSheet(index) {
                    // Hide all sheet contents
                    document.querySelectorAll('[class*="sheet-content-"]').forEach(content => {
                        content.style.display = 'none';
                    });
                    
                    // Show selected sheet content
                    const selectedContent = document.querySelector('.sheet-content-' + index);
                    if (selectedContent) {
                        selectedContent.style.display = 'block';
                    }
                    
                    // Update tab styles
                    document.querySelectorAll('[class*="sheet-tab-"]').forEach((tab, i) => {
                        const label = tab.querySelector('div');
                        if (i === index) {
                            tab.style.background = 'white';
                            tab.style.borderBottom = 'none';
                            if (label) label.style.fontWeight = 'bold';
                        } else {
                            tab.style.background = '#f8f9fa';
                            tab.style.borderBottom = '1px solid var(--border)';
                            if (label) label.style.fontWeight = 'normal';
                        }
                    });
                }
                </script>
            ''')
            
            # Sheet contents - Show only one at a time
            with ui.column().style('padding: 2rem; background: white; min-height: 500px;'):
                for i, sheet in enumerate(all_sheets):
                    with ui.column().classes(f'sheet-content-{i}').style(f'display: {"block" if i == 0 else "none"}; width: 100%;'):
                        # Sheet header
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between; margin-bottom: 1.5rem;'):
                            ui.label(f"{sheet['icon']} {sheet['name']}").style(f'font-size: 1.5rem; font-weight: bold; color: {main_color};')
                            
                            sheet_type = sheet['data'].get('scope_type', 'program_based') if sheet['type'] == 'criteria' else 'N/A'
                            if sheet_type != 'N/A':
                                scope_label = 'Program-based' if sheet_type == 'program_based' else 'Department-based'
                                ui.label(f"Scope: {scope_label}").style('color: var(--text-secondary); font-size: 0.9rem;')
                        
                        # Excel-like table
                        headers = sheet['headers']
                        # Always show table with headers (default or custom)
                        with ui.element('div').style('overflow-x: auto; border: 1px solid var(--border); border-radius: 8px;'):
                            with ui.element('table').style('width: 100%; border-collapse: collapse; background: white;'):
                                # Header row
                                with ui.element('thead'):
                                    with ui.element('tr'):
                                        # Row number column
                                        with ui.element('th').style('background: #f8f9fa; padding: 12px; text-align: center; border: 1px solid var(--border); font-weight: bold; width: 50px;'):
                                            ui.label('#')
                                        
                                        # Data columns
                                        for header in headers:
                                            header_style = f'background: {main_color}; color: white; padding: 12px; text-align: left; border: 1px solid var(--border); font-weight: bold; min-width: 150px;'
                                            # Add indicator for default headers
                                            if not sheet.get('has_custom_headers', True):
                                                header_style += ' opacity: 0.8;'
                                            
                                            with ui.element('th').style(header_style):
                                                header_text = header
                                                if not sheet.get('has_custom_headers', True):
                                                    header_text += ' (default)'
                                                ui.label(header_text)
                                
                                # Sample data rows (showing empty structure)
                                with ui.element('tbody'):
                                    for row_num in range(1, 11):  # Show 10 sample rows
                                        with ui.element('tr'):
                                            # Row number
                                            with ui.element('td').style('background: #f8f9fa; padding: 10px; text-align: center; border: 1px solid var(--border); font-weight: bold;'):
                                                ui.label(str(row_num))
                                            
                                            # Empty data cells (editable in future)
                                            for col_idx, header in enumerate(headers):
                                                with ui.element('td').style('padding: 5px; border: 1px solid var(--border); min-height: 40px; background: white;'):
                                                    # Use input for editable cells
                                                    cell_input = ui.input('').style('width: 100%; border: none; background: transparent; padding: 5px;').props('dense outlined')
                                                    cell_input.props('placeholder=Click to edit')
                        
                        # Status indicator for default headers
                        if not sheet.get('has_custom_headers', True):
                            with ui.card().style('background: #fff3cd; border: 1px solid #ffeaa7; padding: 1rem; margin: 1rem 0; border-radius: 8px;'):
                                ui.label('⚠️ This sheet is using default headers. Create custom headers to define your data structure.').style('color: #856404; font-size: 0.9rem;')
                        
                        # Action buttons
                        with ui.row().style('margin-top: 1.5rem; gap: 1rem;'):
                            ui.button('📥 Import Data', on_click=lambda: ui.notify('Import functionality coming soon', color='info')).classes('btn-primary')
                            ui.button('📤 Export Excel', on_click=lambda s=sheet: export_to_excel(s, inst_id)).classes('btn-secondary')
                            
                            if sheet.get('has_custom_headers', True):
                                ui.button('✏️ Edit Headers', on_click=lambda s=sheet: edit_sheet_headers(s)).style('background: var(--warning-color); color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                            else:
                                ui.button('➕ Create Headers', on_click=lambda s=sheet: edit_sheet_headers(s)).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
        
        def export_to_excel(sheet, institution_id):
            """Export sheet data to Excel file"""
            try:
                import openpyxl
                from openpyxl.styles import Font, PatternFill, Alignment
                import io
                import base64
                from datetime import datetime
                
                # Create workbook and worksheet
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = sheet['name'][:31]  # Excel sheet name limit
                
                # Get institution info for filename
                inst = institutions_col.find_one({'_id': ObjectId(institution_id)})
                inst_name = inst.get('name', 'Institution') if inst else 'Institution'
                
                # Add title and metadata
                ws['A1'] = f"{inst_name} - {sheet['name']}"
                ws['A1'].font = Font(bold=True, size=14)
                ws['A2'] = f"Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                ws['A2'].font = Font(size=10)
                
                # Add headers starting from row 4
                headers = sheet['headers']
                header_row = 4
                
                # Add row number column
                ws.cell(row=header_row, column=1, value='#')
                ws.cell(row=header_row, column=1).font = Font(bold=True)
                ws.cell(row=header_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
                
                # Add data headers
                for col_idx, header in enumerate(headers, start=2):
                    ws.cell(row=header_row, column=col_idx, value=header)
                    ws.cell(row=header_row, column=col_idx).font = Font(bold=True, color='FFFFFF')
                    ws.cell(row=header_row, column=col_idx).fill = PatternFill(start_color='2196F3', end_color='2196F3', fill_type='solid')
                
                # Add sample data rows (10 empty rows for data entry)
                for row_num in range(1, 11):
                    data_row = header_row + row_num
                    
                    # Row number
                    ws.cell(row=data_row, column=1, value=row_num)
                    ws.cell(row=data_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
                    
                    # Empty data cells
                    for col_idx in range(2, len(headers) + 2):
                        ws.cell(row=data_row, column=col_idx, value='')
                
                # Auto-adjust column widths
                for column in ws.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    ws.column_dimensions[column_letter].width = adjusted_width
                
                # Save to bytes
                excel_buffer = io.BytesIO()
                wb.save(excel_buffer)
                excel_buffer.seek(0)
                
                # Create download
                filename = f"{inst_name}_{sheet['name']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                filename = filename.replace(' ', '_').replace('/', '_')  # Clean filename
                
                # Encode for download
                excel_data = excel_buffer.getvalue()
                b64_data = base64.b64encode(excel_data).decode()
                
                # Trigger download using JavaScript
                download_js = f'''
                const link = document.createElement('a');
                link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_data}';
                link.download = '{filename}';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                '''
                
                ui.run_javascript(download_js)
                ui.notify(f'Excel file "{filename}" downloaded successfully!', color='positive')
                
            except Exception as e:
                ui.notify(f'Error exporting to Excel: {str(e)}', color='negative')
                print(f"Excel export error: {str(e)}")  # Debug log
        
        def edit_sheet_headers(sheet):
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 500px;'):
                    ui.label(f'Edit Headers - {sheet["name"]}').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    current_headers = '\n'.join(sheet['headers'])
                    headers_input = ui.textarea('Headers (one per line)', value=current_headers).style('width: 100%; min-height: 150px; margin-bottom: 1rem;')
                    
                    def save_headers():
                        new_headers = [h.strip() for h in headers_input.value.split('\n') if h.strip()]
                        
                        if not new_headers:
                            ui.notify('At least one header is required', color='negative')
                            return
                        
                        try:
                            collection = criterias_col if sheet['type'] == 'criteria' else extended_profiles_col
                            collection.update_one(
                                {'_id': sheet['data']['_id']},
                                {'$set': {'headers': new_headers, 'updated_at': datetime.datetime.now()}}
                            )
                            
                            ui.notify('Headers updated successfully!', color='positive')
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error updating headers: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Save Headers', on_click=save_headers).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/users')
def institution_admin_users(inst_id: str):
    """Manage Users page - Show all users except Platform Owner"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Manage Users').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Get all users except Platform Owner (show users from all institutions)
        users = list(users_col.find({
            'role': {'$ne': 'Platform Owner'}  # Exclude Platform Owner
        }))
        
        # Action buttons
        with ui.row().style('width: 100%; margin-bottom: 1.5rem; gap: 1rem;'):
            ui.button('➕ Add New User', on_click=lambda: open_add_user_dialog()).classes('btn-primary')
            ui.button('📤 Export Users', on_click=lambda: ui.notify('Export functionality coming soon', color='info')).classes('btn-secondary')
        
        with ui.card().classes('beautiful-card').style('width: 100%; padding: 0; overflow: hidden;'):
            ui.label(f'Institution Users ({len(users)} found)').style(
                f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin: 1.5rem; margin-bottom: 1rem;'
            )
            
            if users:
                # Users table
                with ui.element('div').style('overflow-x: auto;'):
                    with ui.element('table').style('width: 100%; border-collapse: collapse;'):
                        # Header
                        with ui.element('thead'):
                            with ui.element('tr'):
                                headers = ['User', 'Email', 'Role', 'Department', 'Last Login', 'Status', 'Actions']
                                for header in headers:
                                    with ui.element('th').style(f'background: {main_color}; color: white; padding: 12px; text-align: left; border: 1px solid var(--border); font-weight: bold;'):
                                        ui.label(header)
                        
                        # Rows
                        with ui.element('tbody'):
                            for i, user in enumerate(users):
                                row_bg = '#f8f9fa' if i % 2 == 0 else 'white'
                                
                                with ui.element('tr').style(f'background: {row_bg};'):
                                    # User info
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                                        with ui.column().style('gap: 0.25rem;'):
                                            ui.label(f"👤 {full_name or 'Unnamed User'}").style('font-weight: bold;')
                                            if user.get('phone'):
                                                ui.label(f"📞 {user['phone']}").style('color: var(--text-secondary); font-size: 0.8rem;')
                                    
                                    # Email
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        ui.label(user.get('email', 'No email')).style('font-family: monospace; font-size: 0.9rem;')
                                    
                                    # Role
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        role = user.get('role', 'User')
                                        role_colors = {
                                            'Institution Admin': '#dc3545',
                                            'IQAC Coordinator': '#28a745',
                                            'Department Coordinator': '#ffc107',
                                            'Faculty': '#007bff',
                                            'User': '#6c757d'
                                        }
                                        role_color = role_colors.get(role, '#6c757d')
                                        ui.label(role).style(f'background: {role_color}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8rem; font-weight: bold;')
                                    
                                    # Department
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        ui.label(user.get('department', 'N/A')).style('color: var(--text-secondary);')
                                    
                                    # Last Login
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border); white-space: nowrap;'):
                                        last_login = user.get('last_login')
                                        if last_login:
                                            if isinstance(last_login, str):
                                                ui.label(last_login)
                                            else:
                                                ui.label(last_login.strftime('%Y-%m-%d %H:%M'))
                                        else:
                                            ui.label('Never').style('color: var(--text-secondary); font-style: italic;')
                                    
                                    # Status
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        status = user.get('status', 'active')
                                        status_color = '#28a745' if status == 'active' else '#dc3545'
                                        ui.label(status.title()).style(f'color: {status_color}; font-weight: bold;')
                                    
                                    # Actions
                                    with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                        with ui.row().style('gap: 0.5rem;'):
                                            ui.button('✏️', on_click=lambda u=user: edit_user(u)).style('background: var(--warning-color); color: white; padding: 0.5rem; border-radius: 4px; border: none; font-size: 0.8rem;')
                                            ui.button('🗑️', on_click=lambda u=user: delete_user(u)).style('background: var(--error-color); color: white; padding: 0.5rem; border-radius: 4px; border: none; font-size: 0.8rem;')
            else:
                with ui.element('div').style('padding: 3rem; text-align: center;'):
                    ui.label('No users found').style(f'font-size: 1.5rem; color: {main_color}; margin-bottom: 1rem;')
                    ui.label('Add users to manage institution access and roles.').style('color: var(--text-secondary);')
        
        def open_add_user_dialog():
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 500px;'):
                    ui.label('Add New User').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    first_name = ui.input('First Name').style('width: 100%; margin-bottom: 1rem;')
                    last_name = ui.input('Last Name').style('width: 100%; margin-bottom: 1rem;')
                    email = ui.input('Email', placeholder='user@example.com').style('width: 100%; margin-bottom: 1rem;')
                    phone = ui.input('Phone (Optional)').style('width: 100%; margin-bottom: 1rem;')
                    
                    role = ui.select(
                        ['Institution Admin', 'IQAC Coordinator', 'Department Coordinator', 'Faculty', 'User'],
                        value='User',
                        label='Role'
                    ).style('width: 100%; margin-bottom: 1rem;')
                    
                    department = ui.input('Department (Optional)').style('width: 100%; margin-bottom: 1rem;')
                    password = ui.input('Password', password=True).style('width: 100%; margin-bottom: 1rem;')
                    
                    def add_user():
                        if not all([first_name.value.strip(), last_name.value.strip(), email.value.strip(), password.value.strip()]):
                            ui.notify('Please fill in all required fields', color='negative')
                            return
                        
                        # Check if email already exists
                        if users_col.find_one({'email': email.value.strip()}):
                            ui.notify('Email already exists', color='negative')
                            return
                        
                        try:
                            new_user = {
                                'first_name': first_name.value.strip(),
                                'last_name': last_name.value.strip(),
                                'email': email.value.strip(),
                                'phone': phone.value.strip() if phone.value.strip() else None,
                                'role': role.value,
                                'department': department.value.strip() if department.value.strip() else None,
                                'password': password.value.strip(),  # In real app, hash this
                                'institution_id': inst_id,
                                'status': 'active',
                                'created_at': datetime.datetime.now(),
                                'last_login': None
                            }
                            
                            users_col.insert_one(new_user)
                            
                            ui.notify('User added successfully!', color='positive')
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error adding user: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Add User', on_click=add_user).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
        
        def edit_user(user):
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 500px;'):
                    ui.label(f'Edit User - {user.get("email", "Unknown")}').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    first_name = ui.input('First Name', value=user.get('first_name', '')).style('width: 100%; margin-bottom: 1rem;')
                    last_name = ui.input('Last Name', value=user.get('last_name', '')).style('width: 100%; margin-bottom: 1rem;')
                    email = ui.input('Email', value=user.get('email', '')).style('width: 100%; margin-bottom: 1rem;')
                    phone = ui.input('Phone', value=user.get('phone', '') or '').style('width: 100%; margin-bottom: 1rem;')
                    
                    role = ui.select(
                        ['Institution Admin', 'IQAC Coordinator', 'Department Coordinator', 'Faculty', 'User'],
                        value=user.get('role', 'User'),
                        label='Role'
                    ).style('width: 100%; margin-bottom: 1rem;')
                    
                    department = ui.input('Department', value=user.get('department', '') or '').style('width: 100%; margin-bottom: 1rem;')
                    
                    status = ui.select(
                        ['active', 'inactive'],
                        value=user.get('status', 'active'),
                        label='Status'
                    ).style('width: 100%; margin-bottom: 1rem;')
                    
                    def save_user():
                        if not all([first_name.value.strip(), last_name.value.strip(), email.value.strip()]):
                            ui.notify('Please fill in all required fields', color='negative')
                            return
                        
                        try:
                            update_data = {
                                'first_name': first_name.value.strip(),
                                'last_name': last_name.value.strip(),
                                'email': email.value.strip(),
                                'phone': phone.value.strip() if phone.value.strip() else None,
                                'role': role.value,
                                'department': department.value.strip() if department.value.strip() else None,
                                'status': status.value,
                                'updated_at': datetime.datetime.now()
                            }
                            
                            users_col.update_one(
                                {'_id': user['_id']},
                                {'$set': update_data}
                            )
                            
                            ui.notify('User updated successfully!', color='positive')
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error updating user: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Save Changes', on_click=save_user).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
        
        def delete_user(user):
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 400px;'):
                    ui.label('Confirm Deletion').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                    ui.label(f'Are you sure you want to delete user "{user.get("email", "Unknown")}"?').style('margin-bottom: 1.5rem;')
                    ui.label('This action cannot be undone.').style('color: var(--error-color); font-weight: bold; margin-bottom: 1.5rem;')
                    
                    def confirm_delete():
                        try:
                            users_col.delete_one({'_id': user['_id']})
                            ui.notify('User deleted successfully!', color='positive')
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error deleting user: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; justify-content: flex-end;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Delete User', on_click=confirm_delete).style('background: var(--error-color); color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/academic_years')
def institution_admin_academic_years(inst_id: str):
    """Academic years management page"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Academic Years').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Add New Academic Year Dialog
        def add_academic_year():
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 600px;'):
                    ui.label('Add New Academic Year').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    year_name = ui.input('Academic Year Name', placeholder='e.g., 2024-25').style('width: 100%; margin-bottom: 1rem;')
                    year_description = ui.textarea('Description (Optional)', placeholder='e.g., Academic session 2024-2025').style('width: 100%; margin-bottom: 1.5rem;')
                    
                    # Copy from existing year section
                    existing_years = list(academic_years_col.find({'institution_id': inst_id}).sort('name', 1))
                    
                    if existing_years:
                        ui.separator().style('margin: 1rem 0;')
                        ui.label('Copy Data from Existing Academic Year').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                        
                        copy_from_year = ui.checkbox('Copy hierarchy and templates from existing year', value=False).style('margin-bottom: 1rem;')
                        
                        year_options = {str(year['_id']): year['name'] for year in existing_years}
                        source_year = ui.select(
                            options=year_options,
                            label='Select source academic year',
                            with_input=True
                        ).style('width: 100%; margin-bottom: 1rem;')
                        
                        # What to copy
                        ui.label('Select items to copy:').style('font-weight: bold; margin-bottom: 0.5rem;')
                        copy_hierarchy = ui.checkbox('Schools, Programs & Departments', value=True).style('margin-bottom: 0.5rem;')
                        copy_criterias = ui.checkbox('Criterias Templates', value=True).style('margin-bottom: 0.5rem;')
                        copy_profiles = ui.checkbox('Extended Profiles Templates', value=True).style('margin-bottom: 1rem;')
                        
                        # Initially hide copy options
                        source_year.style('display: none;')
                        copy_hierarchy.style('display: none;')
                        copy_criterias.style('display: none;')
                        copy_profiles.style('display: none;')
                        
                        def toggle_copy_options():
                            if copy_from_year.value:
                                source_year.style('display: block;')
                                copy_hierarchy.style('display: block;')
                                copy_criterias.style('display: block;')
                                copy_profiles.style('display: block;')
                            else:
                                source_year.style('display: none;')
                                copy_hierarchy.style('display: none;')
                                copy_criterias.style('display: none;')
                                copy_profiles.style('display: none;')
                        
                        copy_from_year.on_value_change(lambda: toggle_copy_options())
                    
                    def create_year():
                        if not year_name.value.strip():
                            ui.notify('Academic year name is required', color='negative')
                            return
                        
                        # Check if year already exists
                        existing = academic_years_col.find_one({'institution_id': inst_id, 'name': year_name.value.strip()})
                        if existing:
                            ui.notify('Academic year with this name already exists', color='negative')
                            return
                        
                        year_doc = {
                            'name': year_name.value.strip(),
                            'description': year_description.value.strip() if year_description.value else '',
                            'institution_id': inst_id,
                            'is_locked': False,
                            'created_at': datetime.datetime.now(),
                            'updated_at': datetime.datetime.now()
                        }
                        
                        try:
                            result = academic_years_col.insert_one(year_doc)
                            new_year_id = str(result.inserted_id)
                            
                            # Copy data if requested
                            if existing_years and copy_from_year.value and source_year.value:
                                try:
                                    from bson import ObjectId
                                    source_id = source_year.value
                                    copied_items = []
                                    
                                    if copy_hierarchy.value:
                                        # Copy schools
                                        source_schools = list(schools_col.find({'institution_id': inst_id, 'academic_year_id': source_id}))
                                        for school in source_schools:
                                            school['_id'] = ObjectId()
                                            school['academic_year_id'] = new_year_id
                                            school['created_at'] = datetime.datetime.now()
                                            schools_col.insert_one(school)
                                        
                                        # Copy programs
                                        source_programs = list(programs_col.find({'institution_id': inst_id, 'academic_cycle_id': source_id}))
                                        for program in source_programs:
                                            program['_id'] = ObjectId()
                                            program['academic_cycle_id'] = new_year_id
                                            program['created_at'] = datetime.datetime.now()
                                            programs_col.insert_one(program)
                                        
                                        copied_items.append(f"{len(source_schools)} schools and {len(source_programs)} programs")
                                    
                                    if copy_criterias.value:
                                        source_criterias = list(criterias_col.find({'institution_id': inst_id, 'academic_cycle_id': source_id}))
                                        for criteria in source_criterias:
                                            criteria['_id'] = ObjectId()
                                            criteria['academic_cycle_id'] = new_year_id
                                            criteria['created_at'] = datetime.datetime.now()
                                            criterias_col.insert_one(criteria)
                                        copied_items.append(f"{len(source_criterias)} criterias")
                                    
                                    if copy_profiles.value:
                                        source_profiles = list(extended_profiles_col.find({'institution_id': inst_id, 'academic_cycle_id': source_id}))
                                        for profile in source_profiles:
                                            profile['_id'] = ObjectId()
                                            profile['academic_cycle_id'] = new_year_id
                                            profile['created_at'] = datetime.datetime.now()
                                            extended_profiles_col.insert_one(profile)
                                        copied_items.append(f"{len(source_profiles)} extended profiles")
                                    
                                    if copied_items:
                                        ui.notify(f'Academic Year created and copied: {", ".join(copied_items)}', color='positive')
                                    else:
                                        ui.notify(f'Academic Year "{year_name.value.strip()}" created successfully!', color='positive')
                                except Exception as e:
                                    ui.notify(f'Academic Year created but copy failed: {str(e)}', color='warning')
                            else:
                                ui.notify(f'Academic Year "{year_name.value.strip()}" created successfully!', color='positive')
                            
                            log_audit_action(
                                action='Created Academic Year',
                                details=f'Academic Year "{year_name.value.strip()}" was created',
                                institution_id=inst_id,
                                entity_type='academic_year',
                                entity_id=new_year_id
                            )
                            
                            dialog.close()
                            ui.run_javascript('window.location.reload()')
                        except Exception as e:
                            ui.notify(f'Error creating academic year: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1.5rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Create Academic Year', on_click=create_year).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
            
            dialog.open()
        
        # Copy Academic Year Dialog
        def copy_academic_year():
            years = list(academic_years_col.find({'institution_id': inst_id}).sort('name', 1))
            if len(years) < 1:
                ui.notify('No academic years found to copy from', color='negative')
                return
            
            with ui.dialog() as dialog:
                with ui.card().style('padding: 2rem; min-width: 600px;'):
                    ui.label('Copy Academic Year Data').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1.5rem;')
                    
                    year_options = {str(year['_id']): year['name'] for year in years}
                    
                    source_year = ui.select(
                        options=year_options,
                        label='Source Academic Year (Copy FROM)',
                        with_input=True
                    ).style('width: 100%; margin-bottom: 1rem;')
                    
                    target_year = ui.select(
                        options=year_options,
                        label='Target Academic Year (Copy TO)',
                        with_input=True
                    ).style('width: 100%; margin-bottom: 1rem;')
                    
                    copy_hierarchy = ui.checkbox('Schools, Programs & Departments', value=True).style('margin-bottom: 0.5rem;')
                    copy_criterias = ui.checkbox('Criterias', value=True).style('margin-bottom: 0.5rem;')
                    copy_profiles = ui.checkbox('Extended Profiles', value=True).style('margin-bottom: 1.5rem;')
                    
                    ui.label('⚠️ Warning: This will overwrite existing data in the target academic year!').style(
                        'color: var(--warning-color); font-weight: bold; background: rgba(255, 152, 0, 0.1); '
                        'padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;'
                    )
                    
                    def perform_copy():
                        if not source_year.value or not target_year.value:
                            ui.notify('Please select both source and target academic years', color='negative')
                            return
                        
                        if source_year.value == target_year.value:
                            ui.notify('Source and target academic years cannot be the same', color='negative')
                            return
                        
                        if not (copy_hierarchy.value or copy_criterias.value or copy_profiles.value):
                            ui.notify('Please select at least one item to copy', color='negative')
                            return
                        
                        try:
                            from bson import ObjectId
                            source_id = source_year.value
                            target_id = target_year.value
                            
                            copied_items = []
                            
                            if copy_hierarchy.value:
                                # Delete existing hierarchy in target year
                                schools_col.delete_many({'institution_id': inst_id, 'academic_year_id': target_id})
                                programs_col.delete_many({'institution_id': inst_id, 'academic_year_id': target_id})
                                
                                # Copy schools
                                source_schools = list(schools_col.find({'institution_id': inst_id, 'academic_year_id': source_id}))
                                for school in source_schools:
                                    school['_id'] = ObjectId()
                                    school['academic_year_id'] = target_id
                                    school['created_at'] = datetime.datetime.now()
                                    schools_col.insert_one(school)
                                
                                # Copy programs
                                source_programs = list(programs_col.find({'institution_id': inst_id, 'academic_year_id': source_id}))
                                for program in source_programs:
                                    program['_id'] = ObjectId()
                                    program['academic_year_id'] = target_id
                                    program['created_at'] = datetime.datetime.now()
                                    programs_col.insert_one(program)
                                
                                copied_items.append(f"{len(source_schools)} schools and {len(source_programs)} programs")
                            
                            if copy_criterias.value:
                                criterias_col.delete_many({'institution_id': inst_id, 'academic_year_id': target_id})
                                source_criterias = list(criterias_col.find({'institution_id': inst_id, 'academic_year_id': source_id}))
                                for criteria in source_criterias:
                                    criteria['_id'] = ObjectId()
                                    criteria['academic_year_id'] = target_id
                                    criteria['created_at'] = datetime.datetime.now()
                                    criterias_col.insert_one(criteria)
                                copied_items.append(f"{len(source_criterias)} criterias")
                            
                            if copy_profiles.value:
                                extended_profiles_col.delete_many({'institution_id': inst_id, 'academic_year_id': target_id})
                                source_profiles = list(extended_profiles_col.find({'institution_id': inst_id, 'academic_year_id': source_id}))
                                for profile in source_profiles:
                                    profile['_id'] = ObjectId()
                                    profile['academic_year_id'] = target_id
                                    profile['created_at'] = datetime.datetime.now()
                                    extended_profiles_col.insert_one(profile)
                                copied_items.append(f"{len(source_profiles)} extended profiles")
                            
                            success_message = f"Successfully copied: {', '.join(copied_items)}"
                            ui.notify(success_message, color='positive')
                            dialog.close()
                            
                        except Exception as e:
                            ui.notify(f'Error copying data: {str(e)}', color='negative')
                    
                    with ui.row().style('gap: 1rem; margin-top: 1rem;'):
                        ui.button('Cancel', on_click=dialog.close).style('background: #6c757d; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                        ui.button('Copy Data', on_click=perform_copy).style(f'background: {main_color}; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none;')
                
                dialog.open()
        
        # Action buttons
        with ui.row().style('gap: 1rem; margin-bottom: 2rem;'):
            ui.button('+ Add Academic Year', on_click=add_academic_year).classes('btn-primary')
        
        # Academic Years List
        years = list(academic_years_col.find({'institution_id': inst_id}).sort('created_at', -1))
        
        with ui.card().classes('beautiful-card').style('width: 100%; padding: 2rem;'):
            ui.label(f'Academic Years ({len(years)} found)').style(
                f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;'
            )
            
            if years:
                for year in years:
                    with ui.card().style('width: 100%; padding: 1.5rem; margin-bottom: 1rem; border: 1px solid var(--border);'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.column():
                                ui.label(f"📅 {year.get('name', 'Unnamed Year')}").style('font-size: 1.2rem; font-weight: bold; margin-bottom: 0.5rem;')
                                if year.get('description'):
                                    ui.label(year['description']).style('color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem;')
                                ui.label(f"Created: {year.get('created_at', datetime.datetime.now()).strftime('%B %d, %Y')}").style('color: var(--text-secondary); font-size: 0.8rem;')
                            
                            with ui.column().style('align-items: flex-end;'):
                                is_locked = year.get('is_locked', False)
                                status_text = '🔒 Locked' if is_locked else '🔓 Active'
                                status_color = 'var(--error-color)' if is_locked else 'var(--success-color)'
                                ui.label(status_text).style(f'color: {status_color}; font-weight: bold; margin-bottom: 1rem;')
                                
                                # Lock/Unlock toggle
                                def toggle_lock(year_id=str(year['_id']), current_lock_status=is_locked):
                                    try:
                                        new_status = not current_lock_status
                                        academic_years_col.update_one(
                                            {'_id': ObjectId(year_id)},
                                            {'$set': {'is_locked': new_status, 'updated_at': datetime.datetime.now()}}
                                        )
                                        
                                        action = 'Locked' if new_status else 'Unlocked'
                                        log_audit_action(
                                            action=f'{action} Academic Year',
                                            details=f'Academic Year "{year.get("name", "Unknown")}" was {action.lower()}',
                                            institution_id=inst_id,
                                            entity_type='academic_year',
                                            entity_id=year_id
                                        )
                                        
                                        ui.notify(f'Academic Year {action.lower()} successfully!', color='positive')
                                        ui.run_javascript('window.location.reload()')
                                    except Exception as e:
                                        ui.notify(f'Error updating lock status: {str(e)}', color='negative')
                                
                                lock_button_text = '🔓 Unlock' if is_locked else '🔒 Lock'
                                lock_button_color = 'var(--success-color)' if is_locked else 'var(--warning-color)'
                                ui.button(lock_button_text, on_click=toggle_lock).style(f'background: {lock_button_color}; color: white; padding: 0.5rem 1rem; border-radius: 6px; border: none;')
            else:
                ui.label('No academic years found. Click "Add Academic Year" to create your first academic year.').style('color: var(--text-secondary); font-style: italic; text-align: center; padding: 2rem;')
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/institution_admin/{inst_id}/audit_logs')
def institution_admin_audit_logs(inst_id: str):
    """Audit logs management page with filters and pagination"""
    add_beautiful_global_styles()
    
    def content(inst, main_color):
        ui.label('Audit Logs').classes('fade-in').style(
            f'font-size: 2rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;'
        )
        
        # Filters container
        with ui.card().classes('beautiful-card').style('width: 100%; margin-bottom: 1rem; padding: 1.5rem;'):
            ui.label('Filters & Search').style(f'font-size: 1.3rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
            
            with ui.row().style('width: 100%; gap: 1rem; align-items: end;'):
                # Search input
                search_input = ui.input('Search logs...', placeholder='Search by action, user, or details').style('flex: 2; min-width: 200px;')
                
                # Action filter
                action_filter = ui.select(
                    ['All Actions', 'CREATE', 'UPDATE', 'DELETE', 'LOGIN', 'LOGOUT'],
                    value='All Actions',
                    label='Action Type'
                ).style('flex: 1; min-width: 150px;')
                
                # Date range
                date_from = ui.input('Start Date').props('type=date').classes('beautiful-input').style('flex: 1; min-width: 150px;')
                date_to = ui.input('End Date').props('type=date').classes('beautiful-input').style('flex: 1; min-width: 150px;')
                
                # Filter button
                filter_btn = ui.button('🔍 Filter', on_click=lambda: load_logs()).classes('btn-primary')
                clear_btn = ui.button('🔄 Clear', on_click=lambda: clear_filters()).style('background: #6c757d; color: white; padding: 0.75rem 1rem; border-radius: 8px; border: none;')
        
        # Pagination state
        current_page = 1
        page_size = 10
        
        # Logs container
        logs_container = ui.column().style('width: 100%;')
        
        # Pagination container
        pagination_container = ui.row().style('width: 100%; justify-content: center; margin-top: 1rem; gap: 1rem;')
        
        def clear_filters():
            search_input.value = ''
            action_filter.value = 'All Actions'
            date_from.value = None
            date_to.value = None
            load_logs()
        
        def load_logs(page=1):
            nonlocal current_page
            current_page = page
            
            # Build filter query
            filter_query = {'institution_id': inst_id}
            
            # Search filter
            if search_input.value.strip():
                search_term = search_input.value.strip()
                filter_query['$or'] = [
                    {'action': {'$regex': search_term, '$options': 'i'}},
                    {'user_email': {'$regex': search_term, '$options': 'i'}},
                    {'details': {'$regex': search_term, '$options': 'i'}}
                ]
            
            # Action filter
            if action_filter.value != 'All Actions':
                filter_query['action'] = action_filter.value
            
            # Date filters
            date_filter = {}
            if date_from.value:
                # Handle both string and date object types
                if isinstance(date_from.value, str):
                    try:
                        from_date = datetime.datetime.strptime(date_from.value, '%Y-%m-%d').date()
                        date_filter['$gte'] = datetime.datetime.combine(from_date, datetime.time.min)
                    except ValueError:
                        pass  # Skip invalid date format
                elif hasattr(date_from.value, 'year'):  # It's a date object
                    date_filter['$gte'] = datetime.datetime.combine(date_from.value, datetime.time.min)
            
            if date_to.value:
                # Handle both string and date object types
                if isinstance(date_to.value, str):
                    try:
                        to_date = datetime.datetime.strptime(date_to.value, '%Y-%m-%d').date()
                        date_filter['$lte'] = datetime.datetime.combine(to_date, datetime.time.max)
                    except ValueError:
                        pass  # Skip invalid date format
                elif hasattr(date_to.value, 'year'):  # It's a date object
                    date_filter['$lte'] = datetime.datetime.combine(date_to.value, datetime.time.max)
            
            if date_filter:
                filter_query['timestamp'] = date_filter
            
            # Get total count for pagination
            total_logs = audit_logs_col.count_documents(filter_query)
            total_pages = max(1, (total_logs + page_size - 1) // page_size)
            
            # Get paginated logs
            skip = (current_page - 1) * page_size
            logs = list(audit_logs_col.find(filter_query)
                       .sort('timestamp', -1)
                       .skip(skip)
                       .limit(page_size))
            
            # Clear containers
            logs_container.clear()
            pagination_container.clear()
            
            # Display logs
            with logs_container:
                if logs:
                    # Stats
                    with ui.row().style('width: 100%; margin-bottom: 1rem; align-items: center; justify-content: space-between;'):
                        ui.label(f'Showing {len(logs)} of {total_logs} logs (Page {current_page} of {total_pages})').style('color: var(--text-secondary);')
                        ui.label(f'Total: {total_logs} audit entries').style(f'color: {main_color}; font-weight: bold;')
                    
                    # Logs table
                    with ui.card().classes('beautiful-card').style('width: 100%; padding: 0; overflow: hidden;'):
                        with ui.element('div').style('overflow-x: auto;'):
                            with ui.element('table').style('width: 100%; border-collapse: collapse;'):
                                # Header
                                with ui.element('thead'):
                                    with ui.element('tr'):
                                        headers = ['Timestamp', 'Action', 'User', 'Details', 'IP Address']
                                        for header in headers:
                                            with ui.element('th').style(f'background: {main_color}; color: white; padding: 12px; text-align: left; border: 1px solid var(--border); font-weight: bold;'):
                                                ui.label(header)
                                
                                # Rows
                                with ui.element('tbody'):
                                    for i, log in enumerate(logs):
                                        row_bg = '#f8f9fa' if i % 2 == 0 else 'white'
                                        
                                        with ui.element('tr').style(f'background: {row_bg};'):
                                            # Timestamp
                                            with ui.element('td').style('padding: 12px; border: 1px solid var(--border); white-space: nowrap;'):
                                                timestamp = log.get('timestamp', datetime.datetime.now())
                                                if isinstance(timestamp, str):
                                                    ui.label(timestamp)
                                                else:
                                                    ui.label(timestamp.strftime('%Y-%m-%d %H:%M:%S'))
                                            
                                            # Action
                                            with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                                action = log.get('action', 'Unknown')
                                                action_color = {
                                                    'CREATE': '#28a745',
                                                    'UPDATE': '#ffc107',
                                                    'DELETE': '#dc3545',
                                                    'LOGIN': '#007bff',
                                                    'LOGOUT': '#6c757d'
                                                }.get(action, '#6c757d')
                                                
                                                ui.label(action).style(f'background: {action_color}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8rem; font-weight: bold;')
                                            
                                            # User
                                            with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                                ui.label(log.get('user_email', 'System'))
                                            
                                            # Details
                                            with ui.element('td').style('padding: 12px; border: 1px solid var(--border); max-width: 300px;'):
                                                details = log.get('details', '')
                                                if len(details) > 100:
                                                    ui.label(details[:100] + '...').style('color: var(--text-secondary);')
                                                else:
                                                    ui.label(details).style('color: var(--text-secondary);')
                                            
                                            # IP Address
                                            with ui.element('td').style('padding: 12px; border: 1px solid var(--border);'):
                                                ui.label(log.get('ip_address', 'N/A')).style('font-family: monospace; font-size: 0.9rem;')
                else:
                    with ui.card().classes('beautiful-card').style('width: 100%; padding: 3rem; text-align: center;'):
                        ui.label('No audit logs found').style(f'font-size: 1.5rem; color: {main_color}; margin-bottom: 1rem;')
                        ui.label('Logs will appear here as users perform actions in the system.').style('color: var(--text-secondary);')
            
            # Pagination
            with pagination_container:
                if total_pages > 1:
                    # Previous button
                    prev_disabled = current_page <= 1
                    ui.button(
                        '← Previous',
                        on_click=lambda: load_logs(current_page - 1),
                        color='primary' if not prev_disabled else 'grey'
                    ).style(f'{"pointer-events: none; opacity: 0.5;" if prev_disabled else ""}')
                    
                    # Page numbers
                    start_page = max(1, current_page - 2)
                    end_page = min(total_pages, current_page + 2)
                    
                    for page_num in range(start_page, end_page + 1):
                        is_current = page_num == current_page
                        ui.button(
                            str(page_num),
                            on_click=lambda p=page_num: load_logs(p),
                            color='primary' if is_current else 'grey'
                        ).style(f'min-width: 40px; {"font-weight: bold;" if is_current else ""}')
                    
                    # Next button
                    next_disabled = current_page >= total_pages
                    ui.button(
                        'Next →',
                        on_click=lambda: load_logs(current_page + 1),
                        color='primary' if not next_disabled else 'grey'
                    ).style(f'{"pointer-events: none; opacity: 0.5;" if next_disabled else ""}')
                    
                    # Page info
                    ui.label(f'Page {current_page} of {total_pages}').style('color: var(--text-secondary); margin-left: 1rem; align-self: center;')
        
        # Initial load
        load_logs()
    
    institution_admin_sidebar(inst_id, content)

@ui.page('/')
# ============================================
# PROGRAM ADMIN INTERFACE
# ============================================

@ui.page('/program_admin/{program_id}')
def program_admin_dashboard(program_id: str):
    """Program admin dashboard with limited access"""
    add_beautiful_global_styles()
    
    # Check authentication
    if not check_auth():
        ui.notify('Please log in first', color='negative')
        ui.navigate.to('/')
        return
    
    global current_user
    if not current_user or current_user.get('role') != 'Program Admin':
        ui.notify('Access denied. Program Admin role required.', color='negative')
        ui.navigate.to('/')
        return
    
    # Get program info
    from bson import ObjectId
    try:
        program = programs_col.find_one({'_id': ObjectId(program_id)})
        if not program:
            ui.notify('Program not found', color='negative')
            ui.navigate.to('/')
            return
        
        institution = institutions_col.find_one({'_id': ObjectId(program['institution_id'])})
        main_color = institution.get('theme_color', '#667eea') if institution else '#667eea'
        
    except Exception as e:
        ui.notify('Invalid program ID', color='negative')
        ui.navigate.to('/')
        return
    
    # Header with logout
    with ui.row().style('width: 100%; justify-content: space-between; align-items: center; padding: 1rem 2rem; background: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'):
        ui.label(f"Program Admin - {program['name']}").style(f'font-size: 1.5rem; font-weight: bold; color: {main_color};')
        
        with ui.row().style('gap: 1rem; align-items: center;'):
            ui.label(f"Welcome, {current_user.get('email', 'Admin')}").style('color: var(--text-secondary);')
            ui.button('Logout', on_click=lambda: (globals().update({'current_user': None}), ui.navigate.to('/'))).style('background: #dc3545; color: white; padding: 0.5rem 1rem; border-radius: 6px;')
    
    # Main content
    with ui.column().style('padding: 2rem; min-height: calc(100vh - 80px); background: #f8f9fa;'):
        # Dashboard cards
        with ui.row().style('gap: 2rem; margin-bottom: 2rem; flex-wrap: wrap;'):
            # Progress card
            with ui.card().style('padding: 1.5rem; min-width: 300px; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'):
                ui.label('📊 Your Progress').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                
                # Get completion stats
                criterias = list(criterias_col.find({'institution_id': program['institution_id']}))
                profiles = list(extended_profiles_col.find({'institution_id': program['institution_id']}))
                
                total_items = len(criterias) + len(profiles)
                completed_items = 0  # TODO: Track completion
                
                progress_percent = (completed_items / total_items * 100) if total_items > 0 else 0
                
                ui.label(f'Criterias: {len(criterias)}').style('margin-bottom: 0.5rem;')
                ui.label(f'Extended Profiles: {len(profiles)}').style('margin-bottom: 0.5rem;')
                ui.label(f'Progress: {progress_percent:.1f}%').style(f'color: {main_color}; font-weight: bold;')
            
            # Deadlines card
            with ui.card().style('padding: 1.5rem; min-width: 300px; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'):
                ui.label('⏰ Deadlines').style(f'font-size: 1.2rem; font-weight: bold; color: {main_color}; margin-bottom: 1rem;')
                ui.label('No active deadlines').style('color: var(--text-secondary); font-style: italic;')
        
        # Main navigation tabs
        with ui.card().style('padding: 0; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'):
            # Tab navigation
            with ui.row().style('border-bottom: 1px solid #e0e0e0; padding: 0;'):
                ui.button('📊 Criterias', on_click=lambda: show_criterias_section()).style(f'background: {main_color}; color: white; border-radius: 12px 0 0 0; padding: 1rem 2rem; border: none;').classes('active-tab')
                ui.button('📝 Extended Profiles', on_click=lambda: show_profiles_section()).style('background: #f8f9fa; color: var(--text-secondary); padding: 1rem 2rem; border: none;').classes('tab-button')
            
            # Content area
            content_area = ui.column().style('padding: 2rem;')
            
            def show_criterias_section():
                content_area.clear()
                with content_area:
                    ui.label('📊 Criterias to Fill').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
                    
                    if not criterias:
                        ui.label('No criterias available. Please contact your institution admin.').style('color: var(--text-secondary); font-style: italic; text-align: center; padding: 2rem;')
                        return
                    
                    for criteria in criterias:
                        with ui.card().style('margin-bottom: 1rem; padding: 1.5rem; border: 1px solid #e0e0e0;'):
                            with ui.row().style('width: 100%; justify-content: space-between; align-items: center;'):
                                with ui.column():
                                    ui.label(criteria.get('name', 'Unnamed Criteria')).style(f'font-size: 1.1rem; font-weight: bold; color: {main_color};')
                                    scope_type = criteria.get('scope_type', 'program_based')
                                    scope_label = 'Program-based' if scope_type == 'program_based' else 'Department-based'
                                    ui.label(f'Scope: {scope_label}').style('color: var(--text-secondary); font-size: 0.9rem;')
                                
                                with ui.row().style('gap: 1rem;'):
                                    ui.button('📥 Download Template', on_click=lambda c=criteria: download_criteria_template(c)).classes('btn-secondary')
                                    ui.button('📤 Upload Data', on_click=lambda c=criteria: upload_criteria_data(c)).classes('btn-primary')
                                    ui.button('👁️ View/Edit', on_click=lambda c=criteria: view_edit_criteria(c)).style(f'background: {main_color}; color: white; padding: 0.5rem 1rem; border-radius: 6px; border: none;')
            
            def show_profiles_section():
                content_area.clear()
                with content_area:
                    ui.label('📝 Extended Profiles to Fill').style(f'font-size: 1.5rem; font-weight: bold; color: {main_color}; margin-bottom: 2rem;')
                    
                    if not profiles:
                        ui.label('No extended profiles available. Please contact your institution admin.').style('color: var(--text-secondary); font-style: italic; text-align: center; padding: 2rem;')
                        return
                    
                    for profile in profiles:
                        with ui.card().style('margin-bottom: 1rem; padding: 1.5rem; border: 1px solid #e0e0e0;'):
                            with ui.row().style('width: 100%; justify-content: space-between; align-items: center;'):
                                with ui.column():
                                    ui.label(profile.get('name', 'Unnamed Profile')).style(f'font-size: 1.1rem; font-weight: bold; color: {main_color};')
                                    profile_type = profile.get('type', 'Program-based')
                                    ui.label(f'Type: {profile_type}').style('color: var(--text-secondary); font-size: 0.9rem;')
                                
                                with ui.row().style('gap: 1rem;'):
                                    ui.button('📥 Download Template', on_click=lambda p=profile: download_profile_template(p)).classes('btn-secondary')
                                    ui.button('📤 Upload Data', on_click=lambda p=profile: upload_profile_data(p)).classes('btn-primary')
                                    ui.button('👁️ View/Edit', on_click=lambda p=profile: view_edit_profile(p)).style(f'background: {main_color}; color: white; padding: 0.5rem 1rem; border-radius: 6px; border: none;')
            
            # Load initial section
            show_criterias_section()
    
    def download_criteria_template(criteria):
        """Download blank Excel template for criteria"""
        try:
            import openpyxl
            from openpyxl.styles import Font, PatternFill
            import io
            import base64
            from datetime import datetime
            
            # Create workbook
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = criteria.get('name', 'Criteria')[:31]
            
            # Add title
            ws['A1'] = f"Criteria: {criteria.get('name', 'Unnamed')}"
            ws['A1'].font = Font(bold=True, size=14)
            ws['A2'] = f"Template downloaded: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Add headers starting from row 4
            headers = criteria.get('headers', ['Criteria Item', 'Value', 'Status', 'Comments'])
            header_row = 4
            
            # Row number column
            ws.cell(row=header_row, column=1, value='#')
            ws.cell(row=header_row, column=1).font = Font(bold=True)
            ws.cell(row=header_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
            
            # Data headers
            for col_idx, header in enumerate(headers, start=2):
                ws.cell(row=header_row, column=col_idx, value=header)
                ws.cell(row=header_row, column=col_idx).font = Font(bold=True, color='FFFFFF')
                ws.cell(row=header_row, column=col_idx).fill = PatternFill(start_color='2196F3', end_color='2196F3', fill_type='solid')
            
            # Add 20 empty rows for data entry
            for row_num in range(1, 21):
                data_row = header_row + row_num
                ws.cell(row=data_row, column=1, value=row_num)
                ws.cell(row=data_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            # Save and download
            excel_buffer = io.BytesIO()
            wb.save(excel_buffer)
            excel_buffer.seek(0)
            
            filename = f"{criteria.get('name', 'Criteria').replace(' ', '_')}_Template_{datetime.now().strftime('%Y%m%d')}.xlsx"
            excel_data = excel_buffer.getvalue()
            b64_data = base64.b64encode(excel_data).decode()
            
            download_js = f'''
            const link = document.createElement('a');
            link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_data}';
            link.download = '{filename}';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            '''
            
            ui.run_javascript(download_js)
            ui.notify(f'Template "{filename}" downloaded successfully!', color='positive')
            
        except Exception as e:
            ui.notify(f'Error downloading template: {str(e)}', color='negative')
    
    def download_profile_template(profile):
        """Download blank Excel template for extended profile"""
        try:
            import openpyxl
            from openpyxl.styles import Font, PatternFill
            import io
            import base64
            from datetime import datetime
            
            # Create workbook
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = profile.get('name', 'Profile')[:31]
            
            # Add title
            ws['A1'] = f"Extended Profile: {profile.get('name', 'Unnamed')}"
            ws['A1'].font = Font(bold=True, size=14)
            ws['A2'] = f"Template downloaded: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Add headers starting from row 4
            headers = profile.get('headers', ['Profile Field', 'Description', 'Type', 'Required'])
            header_row = 4
            
            # Row number column
            ws.cell(row=header_row, column=1, value='#')
            ws.cell(row=header_row, column=1).font = Font(bold=True)
            ws.cell(row=header_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
            
            # Data headers
            for col_idx, header in enumerate(headers, start=2):
                ws.cell(row=header_row, column=col_idx, value=header)
                ws.cell(row=header_row, column=col_idx).font = Font(bold=True, color='FFFFFF')
                ws.cell(row=header_row, column=col_idx).fill = PatternFill(start_color='4CAF50', end_color='4CAF50', fill_type='solid')
            
            # Add 20 empty rows for data entry
            for row_num in range(1, 21):
                data_row = header_row + row_num
                ws.cell(row=data_row, column=1, value=row_num)
                ws.cell(row=data_row, column=1).fill = PatternFill(start_color='F8F9FA', end_color='F8F9FA', fill_type='solid')
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            # Save and download
            excel_buffer = io.BytesIO()
            wb.save(excel_buffer)
            excel_buffer.seek(0)
            
            filename = f"{profile.get('name', 'Profile').replace(' ', '_')}_Template_{datetime.now().strftime('%Y%m%d')}.xlsx"
            excel_data = excel_buffer.getvalue()
            b64_data = base64.b64encode(excel_data).decode()
            
            download_js = f'''
            const link = document.createElement('a');
            link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_data}';
            link.download = '{filename}';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            '''
            
            ui.run_javascript(download_js)
            ui.notify(f'Template "{filename}" downloaded successfully!', color='positive')
            
        except Exception as e:
            ui.notify(f'Error downloading template: {str(e)}', color='negative')
    
    def upload_criteria_data(criteria):
        """Upload and parse Excel data for criteria"""
        ui.notify('Upload functionality will be implemented next', color='info')
    
    def upload_profile_data(profile):
        """Upload and parse Excel data for extended profile"""
        ui.notify('Upload functionality will be implemented next', color='info')
    
    def view_edit_criteria(criteria):
        """View and edit criteria data"""
        ui.notify('View/Edit functionality will be implemented next', color='info')
    
    def view_edit_profile(profile):
        """View and edit profile data"""
        ui.notify('View/Edit functionality will be implemented next', color='info')

def login_page():
    # Add beautiful global styles
    add_beautiful_global_styles()
    
    # Ensure the page has no margins/padding and login is perfectly centered
    ui.add_head_html('''
        <style>
            body, html {
                margin: 0 !important;
                padding: 0 !important;
                overflow: hidden !important;
                height: 100vh !important;
                width: 100vw !important;
                background: white !important;
            }
            .nicegui-content {
                margin: 0 !important;
                padding: 0 !important;
                height: 100vh !important;
                width: 100vw !important;
            }
            .login-input .q-field__control {
                padding: 0.75rem !important;
                border: 2px solid rgba(154, 44, 84, 0.2) !important;
                border-radius: 8px !important;
                font-size: 1rem !important;
                background: white !important;
            }
            .login-input .q-field__control:focus-within {
                border-color: rgb(154, 44, 84) !important;
                box-shadow: 0 0 0 3px rgba(154, 44, 84, 0.1) !important;
            }
            .login-input .q-field__label {
                color: rgba(154, 44, 84, 0.7) !important;
                font-weight: 500 !important;
            }
            .login-input input {
                padding: 0.5rem !important;
                font-size: 1rem !important;
            }
        </style>
    ''')
    
    def show_forgot_password():
        with ui.dialog() as dialog:
            with ui.card().style('min-width: 400px; padding: 2rem; background: white; border-radius: 12px;'):
                ui.label('Reset Password').style('font-size: 1.5rem; font-weight: bold; margin-bottom: 1.5rem; color: rgb(154, 44, 84); text-align: center;')
                
                ui.label('Enter your email address to receive a password reset link.').style('color: #666; text-align: center; margin-bottom: 1rem;')
                forgot_email = ui.input('Email Address', placeholder='Enter your email').props('type=email').style('width: 100%; margin-bottom: 1rem;')
                
                with ui.row().style('width: 100%; gap: 1rem; margin-top: 1rem;'):
                    ui.button('Cancel', on_click=dialog.close).style('flex: 1; background: #6c757d; color: white; padding: 0.75rem; border-radius: 8px; border: none;')
                    ui.button('Send Reset Link', on_click=lambda: (ui.notify(f'Reset link sent to {forgot_email.value}', color='positive'), dialog.close())).style('flex: 1; background: rgb(154, 44, 84); color: white; padding: 0.75rem; border-radius: 8px; border: none;')
        dialog.open()

    def do_login():
        global current_user
        
        if not email.value or not password.value:
            ui.notify('Please enter both email and password', color='warning')
            return
            
        user = users_col.find_one({'email': email.value})
        if not user:
            ui.notify('Invalid email address', color='negative')
            # Log failed login attempt
            log_audit_action(
                action='Failed Login Attempt',
                details=f'Invalid email: {email.value}',
                user_email=email.value,
                institution_id=None
            )
            return
            
        entered_hash = hash_password(password.value, user['salt'])
        if entered_hash != user['password_hash']:
            ui.notify('Incorrect password', color='negative')
            # Log failed login attempt
            log_audit_action(
                action='Failed Login Attempt',
                details=f'Incorrect password for email: {email.value}',
                user_email=email.value,
                institution_id=user.get('institution_id')
            )
            return
            
        # Save user info in global session
        current_user = {
            'email': user['email'],
            'role': user.get('role', ''),
            'institution_id': user.get('institution_id', ''),
            'must_change_password': user.get('must_change_password', False)
        }
        
        # Store in app.storage for persistence
        if not hasattr(app.storage, 'user'):
            app.storage.user = {}
        app.storage.user['current_user'] = current_user
        
        # Log successful login
        log_audit_action(
            action='Successful Login',
            details=f'User logged in with role: {user.get("role", "Unknown")}',
            user_email=user['email'],
            institution_id=user.get('institution_id')
        )
        
        # Clear any stored academic year selection on login to avoid stale/invalid values
        if hasattr(app.storage, 'user'):
            app.storage.user['selected_academic_year_id'] = None
            
        ui.notify(f'Welcome back!', color='positive')
        
        if user.get('must_change_password', False):
            ui.navigate.to('/change_password')
        else:
            # Redirect based on role
            if user.get('role', '') == 'Institution Admin' and user.get('institution_id'):
                ui.navigate.to(f"/institution_admin/{user['institution_id']}")
            elif user.get('role', '') == 'Program Admin':
                # Find the program this admin is assigned to
                program = programs_col.find_one({'admin_email': user['email']})
                if program:
                    ui.navigate.to(f"/program_admin/{program['_id']}")
                else:
                    ui.notify('No program assigned to your account. Please contact your institution admin.', color='warning')
                    ui.navigate.to('/dashboard')
            else:
                ui.navigate.to('/dashboard')

    # Perfectly Centered Login Box - Both Horizontally and Vertically
    with ui.element('div').style('''
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        overflow: hidden;
    '''):
        with ui.card().style('''
            width: 400px;
            max-width: 90vw;
            padding: 3rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(154, 44, 84, 0.2);
            border: 1px solid rgba(154, 44, 84, 0.1);
            position: relative;
            z-index: 1;
        '''):
            
            # Header
            with ui.column().style('align-items: center; margin-bottom: 2rem;'):
                ui.label('IQAC Portal').style('font-size: 2rem; font-weight: bold; color: rgb(154, 44, 84); margin-bottom: 0.5rem;')
            
            # Login Form
            with ui.column().style('gap: 1.5rem; margin-bottom: 2rem;'):
                email = ui.input('Email', placeholder='Enter your email').props('type=email').style('''
                    width: 100%;
                ''').classes('login-input')
                
                password = ui.input('Password', placeholder='Enter your password').props('type=password').style('''
                    width: 100%;
                ''').classes('login-input')
                password.on('keydown.enter', do_login)  # Login on Enter key
            
            # Action Buttons
            with ui.column().style('gap: 1rem;'):
                ui.button('Sign In', on_click=do_login).style('''
                    width: 100%; 
                    padding: 1rem; 
                    background: rgb(154, 44, 84); 
                    color: white; 
                    border: none; 
                    border-radius: 8px; 
                    font-size: 1rem; 
                    font-weight: 600;
                    cursor: pointer;
                ''')
                
                ui.button('Forgot Password?', on_click=show_forgot_password).style('''
                    background: none; 
                    color: rgb(154, 44, 84); 
                    border: none; 
                    font-size: 0.9rem; 
                    text-decoration: underline; 
                    cursor: pointer; 
                    padding: 0.5rem;
                    width: 100%;
                ''')

@ui.page('/dashboard')
def dashboard():
    """Platform owner dashboard"""
    add_beautiful_global_styles()
    
    global current_user
    
    # Check authentication
    if not check_auth() or current_user.get('role') != 'Platform Owner':
        ui.notify('Access denied', color='negative')
        ui.navigate.to('/')
        return
    
    with ui.column().style('min-height: 100vh; background: var(--background); padding: 2rem;'):
        # Header
        with ui.row().style('width: 100%; align-items: center; justify-content: space-between; margin-bottom: 2rem;'):
            ui.label('Platform Dashboard').style(
                'font-size: 2.5rem; font-weight: bold; color: var(--primary-color);'
            )
            
            def logout():
                global current_user
                current_user = None
                if hasattr(app.storage, 'user'):
                    app.storage.user.clear()
                ui.notify('Logged out successfully', color='positive')
                ui.navigate.to('/')
            
            ui.button('Logout', on_click=logout).classes('btn-secondary')
        
        # Stats cards
        with ui.row().style('width: 100%; gap: 1rem; margin-bottom: 2rem;'):
            # Total institutions
            inst_count = institutions_col.count_documents({})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('🏛️').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(inst_count)).style('font-size: 2rem; font-weight: bold; color: var(--primary-color);')
                ui.label('Institutions').style('color: var(--text-secondary);')
            
            # Total users
            users_count = users_col.count_documents({})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('👥').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(users_count)).style('font-size: 2rem; font-weight: bold; color: var(--success-color);')
                ui.label('Users').style('color: var(--text-secondary);')
            
            # Total criterias
            criterias_count = criterias_col.count_documents({})
            with ui.card().classes('beautiful-card slide-up').style('flex: 1; padding: 1.5rem;'):
                ui.label('📊').style('font-size: 2rem; margin-bottom: 0.5rem;')
                ui.label(str(criterias_count)).style('font-size: 2rem; font-weight: bold; color: var(--info-color);')
                ui.label('Criterias').style('color: var(--text-secondary);')
        
        # Actions
        with ui.row().style('width: 100%; gap: 1rem; margin-bottom: 2rem;'):
            def create_institution():
                ui.navigate.to('/create_institution')
            
            ui.button('+ Create New Institution', on_click=create_institution).classes('btn-primary')
        
        # Institutions list
        institutions = list(institutions_col.find())
        
        if institutions:
            ui.label('Institutions').style(
                'font-size: 1.5rem; font-weight: bold; color: var(--text-primary); margin-bottom: 1rem;'
            )
            
            with ui.column().style('width: 100%; gap: 1rem;'):
                for inst in institutions:
                    with ui.card().classes('beautiful-card').style('padding: 1.5rem;'):
                        with ui.row().style('width: 100%; align-items: center; justify-content: space-between;'):
                            with ui.row().style('align-items: center;'):
                                if inst.get('logo'):
                                    ui.image(inst['logo']).style('width: 60px; height: 60px; border-radius: 8px; margin-right: 1rem;')
                                
                                with ui.column():
                                    ui.label(inst.get('name', 'Unnamed Institution')).style(
                                        'font-size: 1.2rem; font-weight: bold; color: var(--text-primary);'
                                    )
                                    if inst.get('website_url'):
                                        ui.label(inst['website_url']).style('color: var(--text-secondary); font-size: 0.9rem;')
                                    if inst.get('city'):
                                        ui.label(f"📍 {inst['city']}, {inst.get('state', '')}").style(
                                            'color: var(--text-secondary); font-size: 0.9rem;'
                                        )
                            
                            ui.button(
                                'Manage',
                                on_click=lambda inst_id=str(inst['_id']): ui.navigate.to(f'/institution_admin/{inst_id}')
                            ).classes('btn-primary')
        else:
            ui.label('No institutions found. Create your first institution to get started.').style(
                'color: var(--text-secondary); font-style: italic; text-align: center; margin-top: 2rem;'
            )

# API endpoint for moving programs between schools
@app.post('/api/move_program')
async def move_program(request):
    try:
        from bson import ObjectId
        import json
        
        data = await request.json()
        program_id = data.get('program_id')
        new_school_id = data.get('new_school_id')
        institution_id = data.get('institution_id')
        
        if not all([program_id, new_school_id, institution_id]):
            return {'success': False, 'message': 'Missing required parameters'}
        
        # Get program and school details for logging
        program = programs_col.find_one({'_id': ObjectId(program_id)})
        if not program:
            return {'success': False, 'message': 'Program not found'}
            
        old_school = schools_col.find_one({'_id': ObjectId(program.get('school_id', ''))}) if program.get('school_id') else None
        new_school = schools_col.find_one({'_id': ObjectId(new_school_id)})
        
        if not new_school:
            return {'success': False, 'message': 'Target school not found'}
        
        # Update program's school_id
        result = programs_col.update_one(
            {'_id': ObjectId(program_id)},
            {'$set': {'school_id': new_school_id, 'updated_at': datetime.datetime.utcnow()}}
        )
        
        if result.modified_count == 0:
            return {'success': False, 'message': 'Failed to update program'}
        
        # Log the move action
        log_audit_action(
            action='Moved Program',
            details=f'Program "{program.get("name", "")}" moved from "{old_school.get("name", "") if old_school else "Unknown"}" to "{new_school.get("name", "")}"',
            institution_id=institution_id,
            entity_type='program',
            entity_id=program_id
        )
        
        return {'success': True, 'message': f'Program moved to {new_school.get("name", "")} successfully'}
        
    except Exception as e:
        print(f"Error moving program: {e}")
        import traceback
        traceback.print_exc()
        return {'success': False, 'message': f'Failed to move program: {str(e)}'}

if __name__ in {"__main__", "__mp_main__"}:
    ui.run(port=8082, storage_secret="super-secret-key-2025-change-this")
